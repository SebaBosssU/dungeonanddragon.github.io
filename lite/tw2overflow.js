/*!
 * ___overflow_name v___overflow_version
 * ___overflow_date
 * Developed by ___overflow_author_name <___overflow_author_email>
 *
 * This work is free. You can redistribute it and/or modify it under the
 * terms of the Do What The Fuck You Want To Public License, Version 2,
 * as published by Sam Hocevar. See the LICENCE file for more details.
 */

;(function (window, undefined) {

const $rootScope = injector.get('$rootScope')
const transferredSharedDataService = injector.get('transferredSharedDataService')
const modelDataService = injector.get('modelDataService')
const socketService = injector.get('socketService')
const routeProvider = injector.get('routeProvider')
const eventTypeProvider = injector.get('eventTypeProvider')
const windowDisplayService = injector.get('windowDisplayService')
const windowManagerService = injector.get('windowManagerService')
const angularHotkeys = injector.get('hotkeys')
const armyService = injector.get('armyService')
const villageService = injector.get('villageService')
const mapService = injector.get('mapService')
const $filter = injector.get('$filter')
const $timeout = injector.get('$timeout')
const storageService = injector.get('storageService')
const reportService = injector.get('reportService')
const noop = function () {}
const hasOwn = Object.prototype.hasOwnProperty

define('two/EventScope', [
    'queues/EventQueue'
], function (eventQueue) {
    const EventScope = function (windowId, onDestroy) {
        if (typeof windowId === 'undefined') {
            throw new Error('EventScope: no windowId')
        }

        this.windowId = windowId
        this.onDestroy = onDestroy || noop
        this.listeners = []

        const unregister = $rootScope.$on(eventTypeProvider.WINDOW_CLOSED, (event, templateName) => {
            if (templateName === '!' + this.windowId) {
                this.destroy()
                unregister()
            }
        })
    }

    EventScope.prototype.register = function (id, handler, _root) {
        if (_root) {
            this.listeners.push($rootScope.$on(id, handler))
        } else {
            eventQueue.register(id, handler)

            this.listeners.push(function () {
                eventQueue.unregister(id, handler)
            })
        }
    }

    EventScope.prototype.destroy = function () {
        this.listeners.forEach((unregister) => {
            unregister()
        })

        this.onDestroy()
    }

    return EventScope
})

define('two/utils', [
    'helper/time',
    'helper/math'
], function (
    $timeHelper,
    $math
) {
    let utils = {}

    /**
     * Gera um número aleatório aproximado da base.
     *
     * @param {Number} base - Número base para o calculo.
     */
    utils.randomSeconds = function (base) {
        if (!base) {
            return 0
        }

        base = parseInt(base, 10)

        const max = base + (base / 2)
        const min = base - (base / 2)

        return Math.round(Math.random() * (max - min) + min)
    }

    /**
     * Converte uma string com um tempo em segundos.
     *
     * @param {String} time - Tempo que será convertido (hh:mm:ss)
     */
    utils.time2seconds = function (time) {
        time = time.split(':')
        time[0] = parseInt(time[0], 10) * 60 * 60
        time[1] = parseInt(time[1], 10) * 60
        time[2] = parseInt(time[2], 10)

        return time.reduce(function (a, b) {
            return a + b
        })
    }

    /**
     * Emite notificação nativa do jogo.
     *
     * @param {String} type - success || error
     * @param {String} message - Texto a ser exibido
     */
    utils.notif = function (type, message) {
        $rootScope.$broadcast(eventTypeProvider.NOTIFICATION_DISABLE)
        $rootScope.$broadcast(eventTypeProvider.NOTIFICATION_ENABLE)

        const eventType = type === 'success'
            ? eventTypeProvider.MESSAGE_SUCCESS
            : eventTypeProvider.MESSAGE_ERROR

        $rootScope.$broadcast(eventType, {
            message: message
        })
    }


    /**
     * Gera uma string com nome e coordenadas da aldeia
     *
     * @param {Object} village - Dados da aldeia
     * @return {String}
     */
    utils.genVillageLabel = function (village) {
        return village.name + ' (' + village.x + '|' + village.y + ')'
    }

    /**
     * Verifica se uma coordenada é válida.
     * 00|00
     * 000|00
     * 000|000
     * 00|000
     *
     * @param {String} xy - Coordenadas
     * @return {Boolean}
     */
    utils.isValidCoords = function (xy) {
        return /\s*\d{2,3}\|\d{2,3}\s*/.test(xy)
    }

    /**
     * Validação de horario e data de envio. Exmplo: 23:59:00:999 30/12/2016
     *
     * @param  {String}  dateTime
     * @return {Boolean}
     */
    utils.isValidDateTime = function (dateTime) {
        return /^\s*([01][0-9]|2[0-3]):[0-5]\d:[0-5]\d(:\d{1,3})? (0[1-9]|[12][0-9]|3[0-1])\/(0[1-9]|1[0-2])\/\d{4}\s*$/.test(dateTime)
    }

    /**
     * Inverte a posição do dia com o mês.
     */
    utils.fixDate = function (dateTime) {
        const dateAndTime = dateTime.trim().split(' ')
        const time = dateAndTime[0]
        const date = dateAndTime[1].split('/')

        return time + ' ' + date[1] + '/' + date[0] + '/' + date[2]
    }

    /**
     * Gera um id unico
     *
     * @return {String}
     */
    utils.guid = function () {
        return Math.floor((Math.random()) * 0x1000000).toString(16)
    }

    /**
     * Obtem o timestamp de uma data em string.
     * Formato da data: mês/dia/ano
     * Exmplo de entrada: 23:59:59:999 12/30/2017
     *
     * @param  {String} dateString - Data em formato de string.
     * @return {Number} Timestamp (milisegundos)
     */
    utils.getTimeFromString = function (dateString, offset) {
        const dateSplit = utils.fixDate(dateString).split(' ')
        const time = dateSplit[0].split(':')
        const date = dateSplit[1].split('/')

        const hour = time[0]
        const min = time[1]
        const sec = time[2]
        const ms = time[3] || null

        const month = parseInt(date[0], 10) - 1
        const day = date[1]
        const year = date[2]

        const _date = new Date(year, month, day, hour, min, sec, ms)

        return _date.getTime() + (offset || 0)
    }

    /**
     * Formata milisegundos em hora/data
     *
     * @return {String} Data e hora formatada
     */
    utils.formatDate = function (ms, format) {
        return $filter('readableDateFilter')(
            ms,
            null,
            $rootScope.GAME_TIMEZONE,
            $rootScope.GAME_TIME_OFFSET,
            format || 'HH:mm:ss dd/MM/yyyy'
        )
    }

    /**
     * Obtem a diferença entre o timezone local e do servidor.
     *
     * @type {Number}
     */
    utils.getTimeOffset = function () {
        const localDate = $timeHelper.gameDate()
        const localOffset = localDate.getTimezoneOffset() * 1000 * 60
        const serverOffset = $rootScope.GAME_TIME_OFFSET

        return localOffset + serverOffset
    }

    utils.xhrGet = function (url, dataType = 'text') {
        return new Promise(function (resolve, reject) {
            if (!url) {
                return reject()
            }

            let xhr = new XMLHttpRequest()
            xhr.open('GET', url, true)
            xhr.responseType = dataType
            xhr.addEventListener('load', function () {
                resolve(xhr)
            }, false)

            xhr.send()
        })
    }

    utils.obj2selectOptions = function (obj, _includeIcon) {
        let list = []

        for (let i in obj) {
            let item = {
                name: obj[i].name,
                value: obj[i].id
            }

            if (_includeIcon) {
                item.leftIcon = obj[i].icon
            }

            list.push(item)
        }

        return list
    }

    /**
     * @param {Object} origin - Objeto da aldeia origem.
     * @param {Object} target - Objeto da aldeia alvo.
     * @param {Object} units - Exercito usado no ataque como referência
     * para calcular o tempo.
     * @param {String} type - Tipo de comando (attack,support,relocate)
     * @param {Object} officers - Oficiais usados no comando (usados para efeitos)
     *
     * @return {Number} Tempo de viagem
     */
    utils.getTravelTime = function (origin, target, units, type, officers, useEffects) {
        const targetIsBarbarian = !target.character_id
        const targetIsSameTribe = target.character_id && target.tribe_id &&
                target.tribe_id === modelDataService.getSelectedCharacter().getTribeId()

        if (useEffects !== false) {
            if (type === 'attack') {
                if ('supporter' in officers) {
                    delete officers.supporter
                }

                if (targetIsBarbarian) {
                    useEffects = true
                }
            } else if (type === 'support') {
                if (targetIsSameTribe) {
                    useEffects = true
                }

                if ('supporter' in officers) {
                    useEffects = true
                }
            }
        }

        const army = {
            units: units,
            officers: angular.copy(officers)
        }

        const travelTime = armyService.calculateTravelTime(army, {
            barbarian: targetIsBarbarian,
            ownTribe: targetIsSameTribe,
            officers: officers,
            effects: useEffects
        }, type)

        const distance = $math.actualDistance(origin, target)

        const totalTravelTime = armyService.getTravelTimeForDistance(
            army,
            travelTime,
            distance,
            type
        )

        return totalTravelTime * 1000
    }

    utils.each = function (obj, iterator) {
        if (typeof iterator !== 'function') {
            iterator = noop
        }

        if (Array.isArray(obj)) {
            for (let i = 0, l = obj.length; i < l; i++) {
                if (iterator(obj[i], i) === false) {
                    return false
                }
            }
        } else if (angular.isObject(obj)) {
            for (let i in obj) {
                if (hasOwn.call(obj, i)) {
                    if (iterator(obj[i], i) === false) {
                        return false
                    }
                }
            }
        }

        return true
    }

    return utils
})

define('two/ready', [
    'conf/gameStates',
    'two/mapData'
], function (
    GAME_STATES,
    twoMapData
) {
    let queueRequests = {}

    const ready = function (callback, which) {
        which = which || ['map']

        if (typeof which === 'string') {
            which = [which]
        }

        const readyStep = function (item) {
            which = which.filter(function (_item) {
                return _item !== item
            })

            if (!which.length) {
                callback()
            }
        }

        const handlers = {
            'map': function () {
                const mapScope = transferredSharedDataService.getSharedData('MapController')

                if (mapScope.isInitialized) {
                    return readyStep('map')
                }

                $rootScope.$on(eventTypeProvider.MAP_INITIALIZED, function () {
                    readyStep('map')
                })
            },
            'tribe_relations': function () {
                const $player = modelDataService.getSelectedCharacter()

                if ($player) {
                    const $tribeRelations = $player.getTribeRelations()

                    if (!$player.getTribeId() || $tribeRelations) {
                        return readyStep('tribe_relations')
                    }
                }

                const unbind = $rootScope.$on(eventTypeProvider.TRIBE_RELATION_LIST, function () {
                    unbind()
                    readyStep('tribe_relations')
                })
            },
            'initial_village': function () {
                const $gameState = modelDataService.getGameState()

                if ($gameState.getGameState(GAME_STATES.INITIAL_VILLAGE_READY)) {
                    return readyStep('initial_village')
                }

                $rootScope.$on(eventTypeProvider.GAME_STATE_INITIAL_VILLAGE_READY, function () {
                    readyStep('initial_village')
                })
            },
            'all_villages_ready': function () {
                const $gameState = modelDataService.getGameState()

                if ($gameState.getGameState(GAME_STATES.ALL_VILLAGES_READY)) {
                    return readyStep('all_villages_ready')
                }

                $rootScope.$on(eventTypeProvider.GAME_STATE_ALL_VILLAGES_READY, function () {
                    readyStep('all_villages_ready')
                })
            },
            'minimap_data': function () {
                if (twoMapData.isLoaded()) {
                    return readyStep('minimap_data')
                }

                twoMapData.load(function () {
                    readyStep('minimap_data')
                })
            },
            'presets': function () {
                if (modelDataService.getPresetList().isLoaded()) {
                    return readyStep('presets')
                }

                queueRequests.presets = queueRequests.presets || new Promise(function (resolve) {
                    socketService.emit(routeProvider.GET_PRESETS, {}, resolve)
                })

                queueRequests.presets.then(function () {
                    readyStep('presets')
                })
            },
            'world_config': function () {
                if (modelDataService.getWorldConfig && modelDataService.getWorldConfig()) {
                    return readyStep('world_config')
                }

                setTimeout(handlers['world_config'], 100)
            }
        }

        const mapScope = transferredSharedDataService.getSharedData('MapController')

        if (!mapScope) {
            return setTimeout(function () {
                ready(callback, which)
            }, 100)
        }

        which.forEach(function (readyItem) {
            handlers[readyItem]()
        })
    }

    return ready
})

require([
    'two/ready',
    'Lockr'
], function (
    ready,
    Lockr
) {
    ready(function () {
        let $player = modelDataService.getSelectedCharacter()

        // Lockr settings
        Lockr.prefix = $player.getId() + '_twOverflow_' + $player.getWorldId() + '-'
    })
})

define('two/language', [
    'helper/i18n'
], function (
    i18n
) {
    let initialized = false
    const languages = ___overflow_lang // eslint-disable-line
    const DEFAULT_LANG = 'en_us'
    const SHARED_LANGS = {
        'en_dk': 'en_us',
        'pt_pt': 'pt_br'
    }

    function selectLanguage (langId) {
        langId = hasOwn.call(SHARED_LANGS, langId) ? SHARED_LANGS[langId] : langId
        i18n.setJSON(languages[langId] || languages[DEFAULT_LANG])
    }

    let twoLanguage = {}

    twoLanguage.init = function () {
        if (initialized) {
            return false
        }

        initialized = true
        
        selectLanguage($rootScope.loc.ale)

        // trigger eventTypeProvider.LANGUAGE_SELECTED_CHANGED you dumb fucks
        $rootScope.$watch('loc.ale', function (newValue, oldValue) {
            if (newValue !== oldValue) {
                selectLanguage($rootScope.loc.ale)
            }
        })
    }

    return twoLanguage
})

define('two/Settings', [
    'two/utils',
    'Lockr'
], function (
    utils,
    Lockr
) {
    const generateDiff = function (before, after) {
        let changes = {}

        for (let id in before) {
            if (hasOwn.call(after, id)) {
                if (!angular.equals(before[id], after[id])) {
                    changes[id] = after[id]
                }
            } else {
                changes[id] = before[id]
            }
        }

        return angular.equals({}, changes) ? false : changes
    }

    const generateDefaults = function (map) {
        let defaults = {}

        for (let key in map) {
            defaults[key] = map[key].default
        }

        return defaults
    }

    const disabledOption = function () {
        return {
            name: $filter('i18n')('disabled', $rootScope.loc.ale, 'common'),
            value: false
        }
    }

    const getUpdates = function (map, changes) {
        let updates = {}

        for (let id in changes) {
            (map[id].updates || []).forEach(function (updateItem) {
                updates[updateItem] = true
            })
        }

        if (angular.equals(updates, {})) {
            return false
        }

        return updates
    }

    let Settings = function (configs) {
        this.settingsMap = configs.settingsMap
        this.storageKey = configs.storageKey
        this.defaults = generateDefaults(this.settingsMap)
        this.settings = angular.merge({}, this.defaults, Lockr.get(this.storageKey, {}))
        this.events = {
            settingsChange: configs.onChange || noop
        }
        this.injected = false
    }

    Settings.prototype.get = function (id) {
        return angular.copy(this.settings[id])
    }

    Settings.prototype.getAll = function () {
        return angular.copy(this.settings)
    }

    Settings.prototype.getDefault = function (id) {
        return hasOwn.call(this.defaults, id) ? this.defaults[id] : undefined
    }

    Settings.prototype.store = function () {
        Lockr.set(this.storageKey, this.settings)
    }

    Settings.prototype.set = function (id, value, opt) {
        if (!hasOwn.call(this.settingsMap, id)) {
            return false
        }

        const map = this.settingsMap[id]
        
        if (map.inputType === 'number') {
            value = parseInt(value, 10)

            if (hasOwn.call(map, 'min')) {
                value = Math.max(map.min, value)
            }

            if (hasOwn.call(map, 'max')) {
                value = Math.min(map.max, value)
            }
        }

        const before = angular.copy(this.settings)
        this.settings[id] = value
        const after = angular.copy(this.settings)
        const changes = generateDiff(before, after)

        if (!changes) {
            return false
        }

        const updates = getUpdates(this.settingsMap, changes)

        this.store()
        this.updateScope()
        this.events.settingsChange.call(this, changes, updates, opt || {})

        return true
    }

    Settings.prototype.setAll = function (values, opt) {
        const before = angular.copy(this.settings)

        for (let id in values) {
            if (hasOwn.call(this.settingsMap, id)) {
                const map = this.settingsMap[id]
                let value = values[id]

                if (map.inputType === 'number') {
                    value = parseInt(value, 10)

                    if (hasOwn.call(map, 'min')) {
                        value = Math.max(map.min, value)
                    }

                    if (hasOwn.call(map, 'max')) {
                        value = Math.min(map.max, value)
                    }
                }

                this.settings[id] = value
            }
        }

        const after = angular.copy(this.settings)
        const changes = generateDiff(before, after)

        if (!changes) {
            return false
        }

        const updates = getUpdates(this.settingsMap, changes)

        this.store()
        this.updateScope()
        this.events.settingsChange.call(this, changes, updates, opt || {})

        return true
    }

    Settings.prototype.reset = function (id, opt) {
        this.set(id, this.defaults[id], opt)

        return true
    }

    Settings.prototype.resetAll = function (opt) {
        this.setAll(angular.copy(this.defaults), opt)

        return true
    }

    Settings.prototype.each = function (callback) {
        for (let id in this.settings) {
            if (!hasOwn.call(this.settingsMap, id)) {
                continue
            }
            
            let map = this.settingsMap[id]

            if (map.inputType === 'checkbox') {
                callback.call(this, id, !!this.settings[id], map)
            } else {
                callback.call(this, id, this.settings[id], map)
            }
        }
    }

    Settings.prototype.onChange = function (callback) {
        if (typeof callback === 'function') {
            this.events.settingsChange = callback
        }
    }

    Settings.prototype.injectScope = function ($scope, opt) {
        this.injected = {
            $scope: $scope,
            opt: opt
        }

        $scope.settings = this.encode(opt)

        utils.each(this.settingsMap, function (map, id) {
            if (map.inputType === 'select') {
                $scope.$watch(function () {
                    return $scope.settings[id]
                }, function (value) {
                    if (map.multiSelect) {
                        if (!value.length) {
                            $scope.settings[id] = [disabledOption()]
                        }
                    } else if (!value) {
                        $scope.settings[id] = disabledOption()
                    }
                }, true)
            }
        })
    }

    Settings.prototype.updateScope = function () {
        if (!this.injected) {
            return false
        }

        this.injected.$scope.settings = this.encode(this.injected.opt)
    }

    Settings.prototype.encode = function (opt) {
        let encoded = {}
        const presets = modelDataService.getPresetList().getPresets()
        const groups = modelDataService.getGroupList().getGroups()

        opt = opt || {}

        this.each(function (id, value, map) {
            if (map.inputType === 'select') {
                if (!value && map.disabledOption) {
                    encoded[id] = map.multiSelect ? [disabledOption()] : disabledOption()
                    return
                }

                switch (map.type) {
                    case 'presets': {
                        if (map.multiSelect) {
                            let multiValues = []

                            value.forEach(function (presetId) {
                                if (!presets[presetId]) {
                                    return
                                }

                                multiValues.push({
                                    name: presets[presetId].name,
                                    value: presetId
                                })
                            })

                            encoded[id] = multiValues.length ? multiValues : [disabledOption()]
                        } else {
                            if (!presets[value] && map.disabledOption) {
                                encoded[id] = disabledOption()
                                return
                            }

                            encoded[id] = {
                                name: presets[value].name,
                                value: value
                            }
                        }

                        break
                    }
                    case 'groups': {
                        if (map.multiSelect) {
                            let multiValues = []

                            value.forEach(function (groupId) {
                                if (!groups[groupId]) {
                                    return
                                }

                                multiValues.push({
                                    name: groups[groupId].name,
                                    value: groupId,
                                    leftIcon: groups[groupId].icon
                                })
                            })

                            encoded[id] = multiValues.length ? multiValues : [disabledOption()]
                        } else {
                            if (!groups[value] && map.disabledOption) {
                                encoded[id] = disabledOption()
                                return
                            }

                            encoded[id] = {
                                name: groups[value].name,
                                value: value
                            }
                        }

                        break
                    }
                    default: {
                        encoded[id] = {
                            name: opt.textObject ? $filter('i18n')(value, $rootScope.loc.ale, opt.textObject) : value,
                            value: value
                        }

                        if (opt.multiSelect) {
                            encoded[id] = [encoded[id]]
                        }

                        break
                    }
                }
            } else {
                encoded[id] = value
            }
        })

        return encoded
    }

    Settings.prototype.decode = function (encoded) {
        let decoded = {}

        for (let id in encoded) {
            let map = this.settingsMap[id]

            if (map.inputType === 'select') {
                if (map.multiSelect) {
                    if (encoded[id].length === 1 && encoded[id][0].value === false) {
                        decoded[id] = []
                    } else {
                        let multiValues = []

                        encoded[id].forEach(function (item) {
                            multiValues.push(item.value)
                        })

                        decoded[id] = multiValues
                    }
                } else {
                    decoded[id] = encoded[id].value
                }
            } else {
                decoded[id] = encoded[id]
            }
        }

        return decoded
    }

    Settings.encodeList = function (list, opt) {
        let encoded = []

        opt = opt || {}

        if (opt.disabled) {
            encoded.push(disabledOption())
        }

        switch (opt.type) {
            case 'keys': {
                for (let prop in list) {
                    encoded.push({
                        name: prop,
                        value: prop
                    })
                }

                break
            }
            case 'groups': {
                for (let prop in list) {
                    let value = list[prop]

                    encoded.push({
                        name: value.name,
                        value: value.id,
                        leftIcon: value.icon
                    })
                }

                break
            }
            case 'presets': {
                for (let prop in list) {
                    let value = list[prop]

                    encoded.push({
                        name: value.name,
                        value: value.id
                    })
                }

                break
            }
            case 'values':
            default: {
                for (let prop in list) {
                    let value = list[prop]

                    encoded.push({
                        name: opt.textObject ? $filter('i18n')(value, $rootScope.loc.ale, opt.textObject) : value,
                        value: value
                    })
                }
            }
        }

        return encoded
    }

    Settings.disabledOption = disabledOption

    return Settings
})

define('two/mapData', [
    'conf/conf'
], function (
    conf
) {
    let villages = []
    let grid = []
    let loading = false
    let loaded = false
    let callbackQueue = []
    const MINIMAP_WIDTH = 306
    const MINIMAP_HEIGHT = 306

    angular.extend(eventTypeProvider, {
        MAP_DATA_LOADED: 'map_data_loaded'
    })

    const init = function () {
        const xChunks = Math.ceil(conf.MAP_SIZE / MINIMAP_WIDTH)
        const yChunks = Math.ceil(conf.MAP_SIZE / MINIMAP_HEIGHT)

        for (let gridX = 0; gridX < xChunks; gridX++) {
            grid.push([])

            let chunkX = MINIMAP_WIDTH * gridX
            let chunkWidth = MINIMAP_WIDTH.bound(0, chunkX + MINIMAP_WIDTH).bound(0, conf.MAP_SIZE - chunkX)
            chunkX = chunkX.bound(0, conf.MAP_SIZE)

            for (let gridY = 0; gridY < yChunks; gridY++) {
                let chunkY = MINIMAP_HEIGHT * gridY
                let chunkHeight = MINIMAP_HEIGHT.bound(0, chunkY + MINIMAP_HEIGHT).bound(0, conf.MAP_SIZE - chunkY)
                chunkY = chunkY.bound(0, conf.MAP_SIZE)

                grid[gridX].push({
                    x: chunkX,
                    y: chunkY,
                    width: chunkWidth,
                    height: chunkHeight
                })
            }
        }
    }

    let twoMapData = {}

    twoMapData.load = function (callback = noop, force) {
        if (force) {
            loaded = false
        } else if (loading) {
            return callbackQueue.push(callback)
        } else if (loaded) {
            return callback(villages)
        }

        callbackQueue.push(callback)
        loading = true
        let cells = []

        for (let gridX = 0; gridX < grid.length; gridX++) {
            for (let gridY = 0; gridY < grid[gridX].length; gridY++) {
                cells.push(grid[gridX][gridY])
            }
        }

        let requests = []

        cells.forEach(function (cell) {
            let promise = new Promise(function (resolve, reject) {
                socketService.emit(routeProvider.MAP_GET_MINIMAP_VILLAGES, cell, function (data) {
                    if (data.message) {
                        return reject(data.message)
                    }

                    if (data.villages.length) {
                        villages = villages.concat(data.villages)
                    }

                    resolve()
                })
            })

            requests.push(promise)
        })

        return Promise.all(requests).then(function () {
            loading = false
            loaded = true

            $rootScope.$broadcast(eventTypeProvider.MAP_DATA_LOADED)
            
            callbackQueue.forEach(function (queuedCallback) {
                queuedCallback(villages)
            })

            callbackQueue = []
        }).catch(function (error) {
            // eslint-disable-next-line no-console
            console.error(error.message)
        })
    }

    twoMapData.getVillages = function () {
        return villages
    }

    twoMapData.isLoaded = function () {
        return loaded
    }

    init()

    return twoMapData
})

define('two/ui', [
    'conf/conf',
    'conf/cdn',
    'two/ready'
], function (
    conf,
    cdnConf,
    ready
) {
    let interfaceOverflow = {}
    let templates = {}
    let initialized = false
    let $menu
    let $menu2
    let $menu3
    let $menu4

    let $head = document.querySelector('head')
    let httpService = injector.get('httpService')
    let templateManagerService = injector.get('templateManagerService')
    let $templateCache = injector.get('$templateCache')

    templateManagerService.load = function (templateName, onSuccess, opt_onError) {
        let path

        const success = function (data, status, headers, config) {
            $templateCache.put(path.substr(1), data)

            if (angular.isFunction(onSuccess)) {
                onSuccess(data, status, headers, config)
            }

            if (!$rootScope.$$phase) {
                $rootScope.$apply()
            }
        }

        const error = function (data, status, headers, config) {
            if (angular.isFunction(opt_onError)) {
                opt_onError(data, status, headers, config)
            }
        }

        if (0 !== templateName.indexOf('!')) {
            path = conf.TEMPLATE_PATH_EXT.join(templateName)
        } else {
            path = templateName.substr(1)
        }

        if ($templateCache.get(path.substr(1))) {
            success($templateCache.get(path.substr(1)), 304)
        } else {
            if (cdnConf.versionMap[path]) {
                httpService.get(path, success, error)
            } else {
                success(templates[path], 304)
            }
        }
    }

    interfaceOverflow.init = function () {
        if (initialized) {
            return false
        }

        let $wrapper = document.querySelector('#wrapper')
        let $container = document.createElement('div')
        let $container2 = document.createElement('div')
        let $container3 = document.createElement('div')
        let $container4 = document.createElement('div')
        let $mainButton = document.createElement('div')
        let $mainButton2 = document.createElement('div')
        let $mainButton3 = document.createElement('div')
        let $mainButton4 = document.createElement('div')

        $container.className = 'two-menu-container'
        $wrapper.appendChild($container)
        $container2.className = 'two-menu-container2'
        $wrapper.appendChild($container2)
        $container3.className = 'two-menu-container3'
        $wrapper.appendChild($container3)
        $container4.className = 'two-menu-container4'
        $wrapper.appendChild($container4)

        $mainButton.className = 'two-main-button'
        $mainButton.style.display = 'none'
        $mainButton2.className = 'two-economy-button'
        $mainButton2.style.display = 'none'
        $mainButton3.className = 'two-intrigue-button'
        $mainButton3.style.display = 'none'
        $mainButton4.className = 'two-other-button'
        $mainButton4.style.display = 'none'
        $container.appendChild($mainButton)
        $container2.appendChild($mainButton2)
        $container3.appendChild($mainButton3)
        $container4.appendChild($mainButton4)

        $menu = document.createElement('div')
        $menu.className = 'two-menu'
        $container.appendChild($menu)
        $menu2 = document.createElement('div')
        $menu2.className = 'two-menu2'
        $container2.appendChild($menu2)
        $menu3 = document.createElement('div')
        $menu3.className = 'two-menu3'
        $container3.appendChild($menu3)
        $menu4 = document.createElement('div')
        $menu4.className = 'two-menu4'
        $container4.appendChild($menu4)

        initialized = true
        interfaceOverflow.addStyle('___overflow_css_style')

        ready(function () {
            $mainButton.style.display = 'block'
            $mainButton2.style.display = 'block'
            $mainButton3.style.display = 'block'
            $mainButton4.style.display = 'block'
        }, ['map'])
    }

    interfaceOverflow.addTemplate = function (path, data) {
        templates[path] = data
    }

    interfaceOverflow.addStyle = function (styles) {
        let $style = document.createElement('style')
        $style.type = 'text/css'
        $style.appendChild(document.createTextNode(styles))
        $head.appendChild($style)
    }

    interfaceOverflow.addMenuButton = function (label, order, _tooltip) {
        let $button = document.createElement('div')
        $button.className = 'btn-border btn-orange button'
        $button.innerHTML = label
        $button.style.order = order
        $menu.appendChild($button)

        if (typeof _tooltip === 'string') {
            $button.addEventListener('mouseenter', function (event) {
                $rootScope.$broadcast(eventTypeProvider.TOOLTIP_SHOW, 'twoverflow-tooltip', _tooltip, true, event)
            })

            $button.addEventListener('mouseleave', function () {
                $rootScope.$broadcast(eventTypeProvider.TOOLTIP_HIDE, 'twoverflow-tooltip')
            })
        }

        return $menu.appendChild($button)
    }

    interfaceOverflow.addMenuButton2 = function (label, order, _tooltip) {
        let $button = document.createElement('div')
        $button.className = 'btn-border btn-orange button'
        $button.innerHTML = label
        $button.style.order = order
        $menu2.appendChild($button)

        if (typeof _tooltip === 'string') {
            $button.addEventListener('mouseenter', function (event) {
                $rootScope.$broadcast(eventTypeProvider.TOOLTIP_SHOW, 'twoverflow-tooltip', _tooltip, true, event)
            })

            $button.addEventListener('mouseleave', function () {
                $rootScope.$broadcast(eventTypeProvider.TOOLTIP_HIDE, 'twoverflow-tooltip')
            })
        }

        return $menu2.appendChild($button)
    }

    interfaceOverflow.addMenuButton3 = function (label, order, _tooltip) {
        let $button = document.createElement('div')
        $button.className = 'btn-border btn-orange button'
        $button.innerHTML = label
        $button.style.order = order
        $menu3.appendChild($button)

        if (typeof _tooltip === 'string') {
            $button.addEventListener('mouseenter', function (event) {
                $rootScope.$broadcast(eventTypeProvider.TOOLTIP_SHOW, 'twoverflow-tooltip', _tooltip, true, event)
            })

            $button.addEventListener('mouseleave', function () {
                $rootScope.$broadcast(eventTypeProvider.TOOLTIP_HIDE, 'twoverflow-tooltip')
            })
        }

        return $menu3.appendChild($button)
    }

    interfaceOverflow.addMenuButton4 = function (label, order, _tooltip) {
        let $button = document.createElement('div')
        $button.className = 'btn-border btn-orange button'
        $button.innerHTML = label
        $button.style.order = order
        $menu4.appendChild($button)

        if (typeof _tooltip === 'string') {
            $button.addEventListener('mouseenter', function (event) {
                $rootScope.$broadcast(eventTypeProvider.TOOLTIP_SHOW, 'twoverflow-tooltip', _tooltip, true, event)
            })

            $button.addEventListener('mouseleave', function () {
                $rootScope.$broadcast(eventTypeProvider.TOOLTIP_HIDE, 'twoverflow-tooltip')
            })
        }

        return $menu4.appendChild($button)
    }

    interfaceOverflow.addDivisor = function (order) {
        let $div = document.createElement('div')
        $div.className = 'divisor'
        $div.style.order = order
        $menu.appendChild($div)
    }
    interfaceOverflow.addDivisor2 = function (order) {
        let $div = document.createElement('div')
        $div.className = 'divisor'
        $div.style.order = order
        $menu2.appendChild($div)
    }
    interfaceOverflow.addDivisor3 = function (order) {
        let $div = document.createElement('div')
        $div.className = 'divisor'
        $div.style.order = order
        $menu3.appendChild($div)
    }
    interfaceOverflow.addDivisor4 = function (order) {
        let $div = document.createElement('div')
        $div.className = 'divisor'
        $div.style.order = order
        $menu4.appendChild($div)
    }

    interfaceOverflow.isInitialized = function () {
        return initialized
    }

    return interfaceOverflow
})

require([
    'two/ui'
], function (interfaceOverflow) {
    if (interfaceOverflow.isInitialized()) {
        return false
    }

    interfaceOverflow.init()
})

require([
    'two/language',
    'two/ready',
    'Lockr'
], function (
    twoLanguage,
    ready,
    Lockr
) {
    const checkNewVersion = function () {
        const currentVersion = '___overflow_version'
        const storedVersion = Lockr.get('twoverflow_version', '1.0.0')

        if (currentVersion.endsWith('dev')) {
            return false
        }

        const versionNumber = function (rawVersion) {
            if (/\d+\.\d+\.\d+/.test(rawVersion)) {
                return parseInt(rawVersion.split('.').reduce((a, b) => a + b), 10)
            }
        }

        if (versionNumber(currentVersion) > versionNumber(storedVersion)) {
            const changelogUrl = 'https://gitlab.com/relaxeaza/twoverflow/blob/master/CHANGELOG.md'
            const changelogMsg = $filter('i18n')('check_changes', $rootScope.loc.ale, 'common')
            const firefoxMsg = $filter('i18n')('firefox_shill', $rootScope.loc.ale, 'common')
            const updatedMsg = $filter('i18n')('new_version', $rootScope.loc.ale, 'common', currentVersion)

            $rootScope.$broadcast(eventTypeProvider.NOTIFICATION_NEW, {
                message: `[b]${updatedMsg}[/b]\n[url=${changelogUrl}]${changelogMsg}[/url]\n\n${firefoxMsg}`
            })

            Lockr.set('twoverflow_version', currentVersion)
        }
    }

    ready(function () {
        twoLanguage.init()
        checkNewVersion()
    })
})

/**
 * https://github.com/tsironis/lockr
 */
define('Lockr', function(root, Lockr) {
    'use strict'

    Lockr.prefix = ''

    Lockr._getPrefixedKey = function(key, options) {
        options = options || {}

        if (options.noPrefix) {
            return key
        } else {
            return this.prefix + key
        }

    }

    Lockr.set = function(key, value, options) {
        const query_key = this._getPrefixedKey(key, options)

        try {
            localStorage.setItem(query_key, JSON.stringify({
                data: value
            }))
        } catch (e) {}
    }

    Lockr.get = function(key, missing, options) {
        const query_key = this._getPrefixedKey(key, options)
        let value

        try {
            value = JSON.parse(localStorage.getItem(query_key))
        } catch (e) {
            if (localStorage[query_key]) {
                value = {
                    data: localStorage.getItem(query_key)
                }
            } else {
                value = null
            }
        }
        
        if (value === null) {
            return missing
        } else if (typeof value === 'object' && typeof value.data !== 'undefined') {
            return value.data
        } else {
            return missing
        }
    }

    return Lockr
})

define('two/about', [], function () {
    let initialized = false

    let about = {}

    about.isInitialized = function () {
        return initialized
    }

    about.init = function () {
        initialized = true
    }

    return about
})

define('two/about/ui', [
    'two/ui'
], function (
    interfaceOverflow
) {
    let $scope
    
    const selectTab = function (tabType) {
        $scope.selectedTab = tabType
    }

    const init = function () {
        interfaceOverflow.addDivisor4(189)
        const $button = interfaceOverflow.addMenuButton4('O mnie', 190)

        $button.addEventListener('click', function () {
            buildWindow()
        })

        interfaceOverflow.addTemplate('twoverflow_about_window', `___about_html_main`)
        interfaceOverflow.addStyle('___about_css_style')
    }

    const buildWindow = function () {
        $scope = $rootScope.$new()
        $scope.selectTab = selectTab

        windowManagerService.getModal('!twoverflow_about_window', $scope)
    }

    return init
})

require([
    'two/ready',
    'two/about',
    'two/about/ui'
], function (
    ready,
    about,
    aboutInterface
) {
    if (about.isInitialized()) {
        return false
    }

    ready(function () {
        about.init()
        aboutInterface()
    }, ['map'])
})

define('two/alertSender', [
    'two/utils',
    'queues/EventQueue',
    'models/CommandModel',
    'conf/unitTypes'
], function(
    utils,
    eventQueue,
    CommandModel,
    UNIT_TYPES
) {
    let convert
    var overviewService = injector.get('overviewService')
    var initialized = false
    var running = false
    var globalInfoModel = modelDataService.getSelectedCharacter().getGlobalInfo()
    var COLUMN_TYPES = {
        'ORIGIN_VILLAGE': 'origin_village_name',
        'COMMAND_TYPE': 'command_type',
        'TARGET_VILLAGE': 'target_village_name',
        'TIME_COMPLETED': 'time_completed',
        'COMMAND_PROGRESS': 'command_progress',
        'ORIGIN_CHARACTER': 'origin_character_name'
    }
    var sorting = {
        reverse: false,
        column: COLUMN_TYPES.COMMAND_PROGRESS
    }
    var player = modelDataService.getSelectedCharacter()
    var tribe = player.tribeById
    var tribeId = tribe[0]
    var villages = player.getVillageList()
    var villagesIds = []
    var playerId = player.data.character_id
    var playerName = player.data.character_name
    var attacks = []
    var tribemates = []
    var UNIT_SPEED_ORDER = [
        UNIT_TYPES.LIGHT_CAVALRY,
        UNIT_TYPES.HEAVY_CAVALRY,
        UNIT_TYPES.AXE,
        UNIT_TYPES.SWORD,
        UNIT_TYPES.RAM,
        UNIT_TYPES.SNOB,
        UNIT_TYPES.TREBUCHET
    ]

    function secondsToDaysHHMMSS(totalSeconds) {
        var returnString = ''
        var date = new Date(totalSeconds * 1000)
        convert = date.toLocaleString()
        returnString = convert
        return returnString
    }
    var checkincomingsAttacks = function() {
        if (!running) {
            return false
        }
        socketService.emit(routeProvider.TRIBE_GET_MEMBERLIST, {
            tribe: tribeId
        }, function(data) {
            var members = data.members
            for (var i = 0; i < members.length; i++) {
                tribemates.push(members[i].id)
            }
        })
        villages.forEach(function(village) {
            villagesIds.push(village.getId())
        })
        var incomingCommands = globalInfoModel.getCommandListModel().getIncomingCommands().length
        var count = incomingCommands > 25 ? incomingCommands : 25
        socketService.emit(routeProvider.OVERVIEW_GET_INCOMING, {
            'count': count,
            'offset': 0,
            'sorting': sorting.column,
            'reverse': sorting.reverse ? 1 : 0,
            'groups': [],
            'command_types': ['attack'],
            'villages': villagesIds
        }, sendAlerts)
    }
    var sendAlerts = function sendAlerts(data) {
        var alertText = []
        var commands = data.commands
        for (var i = 0; i < commands.length; i++) {
            overviewService.formatCommand(commands[i])
            if (tribemates.includes(commands[i].origin_character_id)) {
                console.log('Nadchodzące ruchy wojsk pochodzą od współplemieńca ' + commands[i].origin_character_id + ' Rodzaj ' + commands[i].command_type)
            } else {
                if (commands[i].command_type == 'attack') {
                    if (attacks.includes(commands[i].command_id)) {
                        console.log('Już wysłano powiadomienie')
                    } else {
                        attacks.push(commands[i].command_id)
                        commands[i].slowestUnit = getSlowestUnit(commands[i])
                        var timecompleted = commands[i].time_completed
                        var finalTime = secondsToDaysHHMMSS(timecompleted)
                        var incomingUnit = ''
                        var incomingName = ''
                        if (commands[i].slowestUnit == 'sword') {
                            incomingName = ' [color=03709d]MIECZNIK[/color]'
                            incomingUnit = 'sword'
                        } else if (commands[i].slowestUnit == 'axe') {
                            incomingName = ' [color=e21f1f]TOPORNIK[/color]'
                            incomingUnit = 'axe'
                        } else if (commands[i].slowestUnit == 'ram') {
                            incomingName = ' [color=730202]TARAN[/color]'
                            incomingUnit = 'ram'
                        } else if (commands[i].slowestUnit == 'snob') {
                            incomingName = ' [color=ffee00]SZLACHCIC[/color]'
                            incomingUnit = 'snob'
                        } else if (commands[i].slowestUnit == 'trebuchet') {
                            incomingName = ' [color=494500]TREBUSZ[/color]'
                            incomingUnit = 'trebuchet'
                        } else if (commands[i].slowestUnit == 'light_cavalry') {
                            incomingName = ' [color=d96a19]LEKKA KAWALERIA[/color]'
                            incomingUnit = 'light_cavalry'
                        } else if (commands[i].slowestUnit == 'heavy_cavalry') {
                            incomingName = ' [color=0111af]CIĘŻKA KAWALERIA[/color]'
                            incomingUnit = 'heavy_cavalry'
                        }
                        alertText.push('[size=large][b]Nadchodzący atak [/b]--- [/size][unit]' + incomingUnit + '[/unit] [size=large][b]' + incomingName + '[/b][/size][br][b][size=XL] Czas dotarcia: ' + finalTime + '[/size][/b][br][size=medium][b] Wioska cel: [/b][village=' + commands[i].target_village_id + ']' + commands[i].target_village_name + '[/village][b] Gracz cel: [/b][player=' + playerId + ']' + playerName + '[/player][b] [br]Wioska pochodzenia: [/b][village=' + commands[i].origin_village_id + ']' + commands[i].origin_village_name + '[/village][b] Gracz atakujący: [/b][player=' + commands[i].origin_character_id + ']' + commands[i].origin_character_name + '[/player][/size]')
                        var message = alertText.join()
                        if (incomingUnit == 'snob' || incomingUnit == 'trebuchet') {
                            socketService.emit(routeProvider.MESSAGE_REPLY, {
                                message_id: 7749,
                                message: message
                            })
                            alertText = []
                        } else {
                            socketService.emit(routeProvider.MESSAGE_REPLY, {
                                message_id: 7750,
                                message: message
                            })
                            alertText = []
                        }
                    }
                }
            }
        }
    }
    var getSlowestUnit = function(command) {
        const origin = {
            x: command.origin_x,
            y: command.origin_y
        }
        const target = {
            x: command.target_x,
            y: command.target_y
        }
        const unitDurationDiff = UNIT_SPEED_ORDER.map(function(unit) {
            const travelTime = utils.getTravelTime(origin, target, {
                [unit]: 1
            }, command.command_type, {}, false)
            const durationDiff = Math.abs(travelTime - command.model.duration)
            return {
                unit: unit,
                diff: durationDiff
            }
        }).sort(function(a, b) {
            return a.diff - b.diff
        })
        return unitDurationDiff[0].unit
    }
    var alertSender = {}
    alertSender.init = function() {
        initialized = true
    }
    alertSender.start = function() {
        eventQueue.trigger(eventTypeProvider.ALERT_SENDER_STARTED)
        running = true
        setInterval(function() {
            running = true
            checkincomingsAttacks()
        }, 60000)
        checkincomingsAttacks()
    }
    alertSender.stop = function() {
        eventQueue.trigger(eventTypeProvider.ALERT_SENDER_STOPPED)
        running = false
    }
    alertSender.isRunning = function() {
        return running
    }
    alertSender.isInitialized = function() {
        return initialized
    }
    return alertSender
})
define('two/alertSender/events', [], function () {
    angular.extend(eventTypeProvider, {
        ALERT_SENDER_STARTED: 'alert_sender_started',
        ALERT_SENDER_STOPPED: 'alert_sender_stopped'
    })
})

define('two/alertSender/ui', [
    'two/ui',
    'two/alertSender',
    'two/utils',
    'queues/EventQueue'
], function (
    interfaceOverflow,
    alertSender,
    utils,
    eventQueue
) {
    let $button

    const init = function () {
        $button = interfaceOverflow.addMenuButton('Wartownik', 60, $filter('i18n')('description', $rootScope.loc.ale, 'alert_sender'))

        $button.addEventListener('click', function () {
            if (alertSender.isRunning()) {
                alertSender.stop()
                utils.notif('success', $filter('i18n')('deactivated', $rootScope.loc.ale, 'alert_sender'))
            } else {
                alertSender.start()
                utils.notif('success', $filter('i18n')('activated', $rootScope.loc.ale, 'alert_sender'))
            }
        })

        eventQueue.register(eventTypeProvider.ALERT_SENDER_STARTED, function () {
            $button.classList.remove('btn-orange')
            $button.classList.add('btn-red')
        })

        eventQueue.register(eventTypeProvider.ALERT_SENDER_STOPPED, function () {
            $button.classList.remove('btn-red')
            $button.classList.add('btn-orange')
        })

        if (alertSender.isRunning()) {
            eventQueue.trigger(eventTypeProvider.ALERT_SENDER_STARTED)
        }

        return opener
    }

    return init
})
require([
    'two/ready',
    'two/alertSender',
    'two/alertSender/ui',
    'Lockr',
    'queues/EventQueue',
    'two/alertSender/events',
], function(
    ready,
    alertSender,
    alertSenderInterface,
    Lockr,
    eventQueue
) {
    const STORAGE_KEYS = {
        ACTIVE: 'alert_sender_active'
    }
	
    if (alertSender.isInitialized()) {
        return false
    }
    ready(function() {
        alertSender.init()
        alertSenderInterface()

        ready(function() {
            if (Lockr.get(STORAGE_KEYS.ACTIVE, false, true)) {
                alertSender.start()
            }

            eventQueue.register(eventTypeProvider.ALERT_SENDER_STARTED, function() {
                Lockr.set(STORAGE_KEYS.ACTIVE, true)
            })

            eventQueue.register(eventTypeProvider.ALERT_SENDER_STOPPED, function() {
                Lockr.set(STORAGE_KEYS.ACTIVE, false)
            })
        }, ['initial_village'])
    })
})
define('two/armyHelper', [
    'two/Settings',
    'two/armyHelper/settings',
    'two/armyHelper/settings/map',
    'two/armyHelper/settings/updates',
    'two/armyHelper/types/unit',
    'two/ready',
    'queues/EventQueue',
    'Lockr',
    'helper/time'
], function(
    Settings,
    SETTINGS,
    SETTINGS_MAP,
    UPDATES,
    B_UNIT,
    ready,
    eventQueue,
    Lockr,
    timeHelper
) {
    let initialized = false
    let running = false
    let settings
    const LOGS_LIMIT = 500
    let armyHelperSettings
    let logs
    let byGroupBalance = []
    let byUnitAndGroupBalance = []
    var SpearA = 0
    var SpearO = 0
    var SpearI = 0
    var SpearS = 0
    var SpearR = 0
    var SpearT = 0
    var SwordA = 0
    var SwordO = 0
    var SwordI = 0
    var SwordS = 0
    var SwordR = 0
    var SwordT = 0
    var AxeA = 0
    var AxeO = 0
    var AxeI = 0
    var AxeS = 0
    var AxeR = 0
    var AxeT = 0
    var ArcherA = 0
    var ArcherO = 0
    var ArcherI = 0
    var ArcherS = 0
    var ArcherR = 0
    var ArcherT = 0
    var LightCavalryA = 0
    var LightCavalryO = 0
    var LightCavalryI = 0
    var LightCavalryS = 0
    var LightCavalryR = 0
    var LightCavalryT = 0
    var MountedArcherA = 0
    var MountedArcherO = 0
    var MountedArcherI = 0
    var MountedArcherS = 0
    var MountedArcherR = 0
    var MountedArcherT = 0
    var HeavyCavalryA = 0
    var HeavyCavalryO = 0
    var HeavyCavalryI = 0
    var HeavyCavalryS = 0
    var HeavyCavalryR = 0
    var HeavyCavalryT = 0
    var RamA = 0
    var RamO = 0
    var RamI = 0
    var RamS = 0
    var RamR = 0
    var RamT = 0
    var CatapultA = 0
    var CatapultO = 0
    var CatapultI = 0
    var CatapultS = 0
    var CatapultR = 0
    var CatapultT = 0
    var TrebuchetA = 0
    var TrebuchetO = 0
    var TrebuchetI = 0
    var TrebuchetS = 0
    var TrebuchetR = 0
    var TrebuchetT = 0
    var BerserkerA = 0
    var BerserkerO = 0
    var BerserkerI = 0
    var BerserkerS = 0
    var BerserkerR = 0
    var BerserkerT = 0
    var SnobA = 0
    var SnobO = 0
    var SnobI = 0
    var SnobS = 0
    var SnobR = 0
    var SnobT = 0
    var KnightA = 0
    var KnightO = 0
    var KnightI = 0
    var KnightS = 0
    var KnightR = 0
    var KnightT = 0
    const STORAGE_KEYS = {
        LOGS: 'army_helper_logs',
        SETTINGS: 'army_helper_settings'
    }
    const BALANCER_UNIT = {
        [B_UNIT.SPEAR]: 'spear',
        [B_UNIT.SWORD]: 'sword',
        [B_UNIT.AXE]: 'axe',
        [B_UNIT.ARCHER]: 'archer',
        [B_UNIT.LIGHT_CAVALRY]: 'light_cavalry',
        [B_UNIT.MOUNTED_ARCHER]: 'mounted_archer',
        [B_UNIT.HEAVT_CAVALRY]: 'heavy_cavalry',
        [B_UNIT.RAM]: 'ram',
        [B_UNIT.CATAPULT]: 'catapult',
        [B_UNIT.TREBUCHET]: 'trebuchet',
        [B_UNIT.DOPPELSOLDNER]: 'doppelsoldner',
        [B_UNIT.SNOB]: 'snob',
        [B_UNIT.KNIGHT]: 'knight'
    }
    console.log(BALANCER_UNIT)
    const updateGroups = function() {
        byGroupBalance = []
        byUnitAndGroupBalance = []
        const allGroups = modelDataService.getGroupList().getGroups()
        const groupsSelectedByTheUser3 = armyHelperSettings[SETTINGS.GROUP3]
        const groupsSelectedByTheUser4 = armyHelperSettings[SETTINGS.GROUP4]
        groupsSelectedByTheUser3.forEach(function(groupId) {
            byGroupBalance.push(allGroups[groupId])
        })
        groupsSelectedByTheUser4.forEach(function(groupId) {
            byUnitAndGroupBalance.push(allGroups[groupId])
        })
    }
    const addLog = function(villageId, targetId, unit, group) {
        let data = {
            time: timeHelper.gameTime(),
            villageId: villageId,
            targetId: targetId,
            unit: unit,
            group: group
        }
        logs.unshift(data)
        if (logs.length > LOGS_LIMIT) {
            logs.splice(logs.length - LOGS_LIMIT, logs.length)
        }
        Lockr.set(STORAGE_KEYS.LOGS, logs)
        return true
    }
    const armyHelper = {}
    armyHelper.init = function() {
        initialized = true
        logs = Lockr.get(STORAGE_KEYS.LOGS, [], true)
        settings = new Settings({
            settingsMap: SETTINGS_MAP,
            storageKey: STORAGE_KEYS.SETTINGS
        })
        settings.onChange(function(changes, updates) {
            armyHelperSettings = settings.getAll()
            if (updates[UPDATES.GROUPS]) {
                updateGroups()
            }
        })
        armyHelperSettings = settings.getAll()
        console.log('armyHelper settings', armyHelperSettings)
        $rootScope.$on(eventTypeProvider.GROUPS_CREATED, updateGroups)
        $rootScope.$on(eventTypeProvider.GROUPS_DESTROYED, updateGroups)
        $rootScope.$on(eventTypeProvider.GROUPS_UPDATED, updateGroups)
    }
    armyHelper.start = function() {
        running = true
        addLog('Rozpoczęto balansowanie wojsk', '', '', '')
        eventQueue.trigger(eventTypeProvider.ARMY_HELPER_START)
    }
    armyHelper.stop = function() {
        running = false
        addLog('Zatrzymano balansowanie wojsk', '', '', '')
        eventQueue.trigger(eventTypeProvider.ARMY_HELPER_STOP)
    }
    armyHelper.getSettings = function() {
        return settings
    }
    armyHelper.isInitialized = function() {
        return initialized
    }
    armyHelper.isRunning = function() {
        return running
    }
    armyHelper.getLogs = function() {
        return logs
    }
    armyHelper.checkArmy = function() {
        var player = modelDataService.getSelectedCharacter()
        var villages = player.getVillageList()

        function checkArmy() {
            var calcSpearA = 0
            var calcSpearO = 0
            var calcSpearI = 0
            var calcSpearS = 0
            var calcSpearR = 0
            var calcSpearT = 0
            var calcSwordA = 0
            var calcSwordO = 0
            var calcSwordI = 0
            var calcSwordS = 0
            var calcSwordR = 0
            var calcSwordT = 0
            var calcAxeA = 0
            var calcAxeO = 0
            var calcAxeI = 0
            var calcAxeS = 0
            var calcAxeR = 0
            var calcAxeT = 0
            var calcArcherA = 0
            var calcArcherO = 0
            var calcArcherI = 0
            var calcArcherS = 0
            var calcArcherR = 0
            var calcArcherT = 0
            var calcLightCavalryA = 0
            var calcLightCavalryO = 0
            var calcLightCavalryI = 0
            var calcLightCavalryS = 0
            var calcLightCavalryR = 0
            var calcLightCavalryT = 0
            var calcMountedArcherA = 0
            var calcMountedArcherO = 0
            var calcMountedArcherI = 0
            var calcMountedArcherS = 0
            var calcMountedArcherR = 0
            var calcMountedArcherT = 0
            var calcHeavyCavalryA = 0
            var calcHeavyCavalryO = 0
            var calcHeavyCavalryI = 0
            var calcHeavyCavalryS = 0
            var calcHeavyCavalryR = 0
            var calcHeavyCavalryT = 0
            var calcRamA = 0
            var calcRamO = 0
            var calcRamI = 0
            var calcRamS = 0
            var calcRamR = 0
            var calcRamT = 0
            var calcCatapultA = 0
            var calcCatapultO = 0
            var calcCatapultI = 0
            var calcCatapultS = 0
            var calcCatapultR = 0
            var calcCatapultT = 0
            var calcTrebuchetA = 0
            var calcTrebuchetO = 0
            var calcTrebuchetI = 0
            var calcTrebuchetS = 0
            var calcTrebuchetR = 0
            var calcTrebuchetT = 0
            var calcBerserkerA = 0
            var calcBerserkerO = 0
            var calcBerserkerI = 0
            var calcBerserkerS = 0
            var calcBerserkerR = 0
            var calcBerserkerT = 0
            var calcSnobA = 0
            var calcSnobO = 0
            var calcSnobI = 0
            var calcSnobS = 0
            var calcSnobR = 0
            var calcSnobT = 0
            var calcKnightA = 0
            var calcKnightO = 0
            var calcKnightI = 0
            var calcKnightS = 0
            var calcKnightR = 0
            var calcKnightT = 0
            var calcSpearPlayers = 0
            var calcSwordPlayers = 0
            var calcAxePlayers = 0
            var calcArcherPlayers = 0
            var calcLightCavalryPlayers = 0
            var calcMountedArcherPlayers = 0
            var calcRamPlayers = 0
            var calcCatapultPlayers = 0
            var calcHeavyCavalryPlayers = 0
            var calcTrebuchetPlayers = 0
            var calcBerserkerPlayers = 0
            var calcSnobPlayers = 0
            var calcKnightPlayers = 0
            villages.forEach(function(village) {
                var unitInfo = village.unitInfo
                var units = unitInfo.units
                var spear = units.spear
                var sword = units.sword
                var axe = units.axe
                var archer = units.archer
                var light_cavalry = units.light_cavalry
                var mounted_archer = units.mounted_archer
                var heavy_cavalry = units.heavy_cavalry
                var ram = units.ram
                var catapult = units.catapult
                var trebuchet = units.trebuchet
                var doppelsoldner = units.doppelsoldner
                var snob = units.snob
                var knight = units.knight
                calcSpearA += spear.available
                calcSpearPlayers += spear.inside
                calcSpearO += spear.own
                calcSpearI += spear.in_town
                calcSpearS += spear.support
                calcSpearR += spear.recruiting
                calcSpearT += spear.total
                calcSwordA += sword.available
                calcSwordPlayers += sword.inside
                calcSwordO += sword.own
                calcSwordI += sword.in_town
                calcSwordS += sword.support
                calcSwordR += sword.recruiting
                calcSwordT += sword.total
                calcAxeA += axe.available
                calcAxePlayers += axe.inside
                calcAxeO += axe.own
                calcAxeI += axe.in_town
                calcAxeS += axe.support
                calcAxeR += axe.recruiting
                calcAxeT += axe.total
                calcArcherA += archer.available
                calcArcherPlayers += archer.inside
                calcArcherO += archer.own
                calcArcherI += archer.in_town
                calcArcherS += archer.support
                calcArcherR += archer.recruiting
                calcArcherT += archer.total
                calcLightCavalryA += light_cavalry.available
                calcLightCavalryPlayers += light_cavalry.inside
                calcLightCavalryO += light_cavalry.own
                calcLightCavalryI += light_cavalry.in_town
                calcLightCavalryS += light_cavalry.support
                calcLightCavalryR += light_cavalry.recruiting
                calcLightCavalryT += light_cavalry.total
                calcMountedArcherA += mounted_archer.available
                calcMountedArcherPlayers += mounted_archer.inside
                calcMountedArcherO += mounted_archer.own
                calcMountedArcherI += mounted_archer.in_town
                calcMountedArcherS += mounted_archer.support
                calcMountedArcherR += mounted_archer.recruiting
                calcMountedArcherT += mounted_archer.total
                calcHeavyCavalryA += heavy_cavalry.available
                calcHeavyCavalryPlayers += heavy_cavalry.inside
                calcHeavyCavalryO += heavy_cavalry.own
                calcHeavyCavalryI += heavy_cavalry.in_town
                calcHeavyCavalryS += heavy_cavalry.support
                calcHeavyCavalryR += heavy_cavalry.recruiting
                calcHeavyCavalryT += heavy_cavalry.total
                calcRamA += ram.available
                calcRamPlayers += ram.inside
                calcRamO += ram.own
                calcRamI += ram.in_town
                calcRamS += ram.support
                calcRamR += ram.recruiting
                calcRamT += ram.total
                calcCatapultA += catapult.available
                calcCatapultPlayers += catapult.inside
                calcCatapultO += catapult.own
                calcCatapultI += catapult.in_town
                calcCatapultS += catapult.support
                calcCatapultR += catapult.recruiting
                calcCatapultT += catapult.total
                calcTrebuchetA += trebuchet.available
                calcTrebuchetPlayers += trebuchet.inside
                calcTrebuchetO += trebuchet.own
                calcTrebuchetI += trebuchet.in_town
                calcTrebuchetS += trebuchet.support
                calcTrebuchetR += trebuchet.recruiting
                calcTrebuchetT += trebuchet.total
                calcBerserkerA += doppelsoldner.available
                calcBerserkerPlayers += doppelsoldner.inside
                calcBerserkerO += doppelsoldner.own
                calcBerserkerI += doppelsoldner.in_town
                calcBerserkerS += doppelsoldner.support
                calcBerserkerR += doppelsoldner.recruiting
                calcBerserkerT += doppelsoldner.total
                calcSnobA += snob.available
                calcSnobPlayers += snob.inside
                calcSnobO += snob.own
                calcSnobI += snob.in_town
                calcSnobS += snob.support
                calcSnobR += snob.recruiting
                calcSnobT += snob.total
                calcKnightA += knight.available
                calcKnightPlayers += knight.inside
                calcKnightO += knight.own
                calcKnightI += knight.in_town
                calcKnightS += knight.support
                calcKnightR += knight.recruiting
                calcKnightT += knight.total
            })
            SpearA = calcSpearA
            SpearO = calcSpearO
            SpearI = calcSpearPlayers
            SpearS = calcSpearS
            SpearR = calcSpearR
            SpearT = calcSpearT + calcSpearR
            SwordA = calcSwordA
            SwordO = calcSwordO
            SwordI = calcSwordPlayers
            SwordS = calcSwordS
            SwordR = calcSwordR
            SwordT = calcSwordT + calcSwordR
            AxeA = calcAxeA
            AxeO = calcAxeO
            AxeI = calcAxePlayers
            AxeS = calcAxeS
            AxeR = calcAxeR
            AxeT = calcAxeT + calcAxeR
            ArcherA = calcArcherA
            ArcherO = calcArcherO
            ArcherI = calcArcherPlayers
            ArcherS = calcArcherS
            ArcherR = calcArcherR
            ArcherT = calcArcherT + calcArcherR
            LightCavalryA = calcLightCavalryA
            LightCavalryO = calcLightCavalryO
            LightCavalryI = calcLightCavalryPlayers
            LightCavalryS = calcLightCavalryS
            LightCavalryR = calcLightCavalryR
            LightCavalryT = calcLightCavalryT + calcLightCavalryR
            MountedArcherA = calcMountedArcherA
            MountedArcherO = calcMountedArcherO
            MountedArcherI = calcMountedArcherPlayers
            MountedArcherS = calcMountedArcherS
            MountedArcherR = calcMountedArcherR
            MountedArcherT = calcMountedArcherT + calcMountedArcherR
            HeavyCavalryA = calcHeavyCavalryA
            HeavyCavalryO = calcHeavyCavalryO
            HeavyCavalryI = calcHeavyCavalryPlayers
            HeavyCavalryS = calcHeavyCavalryS
            HeavyCavalryR = calcHeavyCavalryR
            HeavyCavalryT = calcHeavyCavalryT + calcHeavyCavalryR
            RamA = calcRamA
            RamO = calcRamO
            RamI = calcRamPlayers
            RamS = calcRamS
            RamR = calcRamR
            RamT = calcRamT + calcRamR
            CatapultA = calcCatapultA
            CatapultO = calcCatapultO
            CatapultI = calcCatapultPlayers
            CatapultS = calcCatapultS
            CatapultR = calcCatapultR
            CatapultT = calcCatapultT + calcCatapultR
            TrebuchetA = calcTrebuchetA
            TrebuchetO = calcTrebuchetO
            TrebuchetI = calcTrebuchetPlayers
            TrebuchetS = calcTrebuchetS
            TrebuchetR = calcTrebuchetR
            TrebuchetT = calcTrebuchetT + calcTrebuchetR
            BerserkerA = calcBerserkerA
            BerserkerO = calcBerserkerO
            BerserkerI = calcBerserkerPlayers
            BerserkerS = calcBerserkerS
            BerserkerR = calcBerserkerR
            BerserkerT = calcBerserkerT + calcBerserkerR
            SnobA = calcSnobA
            SnobO = calcSnobO
            SnobI = calcSnobPlayers
            SnobS = calcSnobS
            SnobR = calcSnobR
            SnobT = calcSnobT + calcSnobR
            KnightA = calcKnightA
            KnightO = calcKnightO
            KnightI = calcKnightPlayers
            KnightS = calcKnightS
            KnightR = calcKnightR
            KnightT = calcKnightT + calcKnightR
            console.log(calcArcherI, calcAxeI, calcSpearI, calcSwordI, calcLightCavalryI, calcMountedArcherI, calcHeavyCavalryI, calcRamI, calcCatapultI, calcTrebuchetI, calcBerserkerI, calcKnightI, calcSnobI)
            addLog('', '', 'Zliczono armię', '')
        }
        checkArmy()
    }
    armyHelper.clearLogs = function() {
        logs = []
        Lockr.set(STORAGE_KEYS.LOGS, logs)
        eventQueue.trigger(eventTypeProvider.ARMY_HELPER_LOGS_UPDATED)
        return logs
    }
    armyHelper.getSpearTotal = function() {
        return SpearT
    }
    armyHelper.getSpearSupport = function() {
        return SpearS
    }
    armyHelper.getSpearOwn = function() {
        return SpearO
    }
    armyHelper.getSpearInTown = function() {
        return SpearI
    }
    armyHelper.getSpearRecruting = function() {
        return SpearR
    }
    armyHelper.getSpearAvailable = function() {
        return SpearA
    }
    armyHelper.getswordTotal = function() {
        return SwordT
    }
    armyHelper.getswordSupport = function() {
        return SwordS
    }
    armyHelper.getswordOwn = function() {
        return SwordO
    }
    armyHelper.getswordInTown = function() {
        return SwordI
    }
    armyHelper.getswordRecruting = function() {
        return SwordR
    }
    armyHelper.getswordAvailable = function() {
        return SwordA
    }
    armyHelper.getaxeTotal = function() {
        return AxeT
    }
    armyHelper.getaxeSupport = function() {
        return AxeS
    }
    armyHelper.getaxeOwn = function() {
        return AxeO
    }
    armyHelper.getaxeInTown = function() {
        return AxeI
    }
    armyHelper.getaxeRecruting = function() {
        return AxeR
    }
    armyHelper.getaxeAvailable = function() {
        return AxeA
    }
    armyHelper.getarcherTotal = function() {
        return ArcherT
    }
    armyHelper.getarcherSupport = function() {
        return ArcherS
    }
    armyHelper.getarcherOwn = function() {
        return ArcherO
    }
    armyHelper.getarcherInTown = function() {
        return ArcherI
    }
    armyHelper.getarcherRecruting = function() {
        return ArcherR
    }
    armyHelper.getarcherAvailable = function() {
        return ArcherA
    }
    armyHelper.getlcTotal = function() {
        return LightCavalryT
    }
    armyHelper.getlcSupport = function() {
        return LightCavalryS
    }
    armyHelper.getlcOwn = function() {
        return LightCavalryO
    }
    armyHelper.getlcInTown = function() {
        return LightCavalryI
    }
    armyHelper.getlcRecruting = function() {
        return LightCavalryR
    }
    armyHelper.getlcAvailable = function() {
        return LightCavalryA
    }
    armyHelper.getmaTotal = function() {
        return MountedArcherT
    }
    armyHelper.getmaSupport = function() {
        return MountedArcherS
    }
    armyHelper.getmaOwn = function() {
        return MountedArcherO
    }
    armyHelper.getmaInTown = function() {
        return MountedArcherI
    }
    armyHelper.getmaRecruting = function() {
        return MountedArcherR
    }
    armyHelper.getmaAvailable = function() {
        return MountedArcherA
    }
    armyHelper.gethcTotal = function() {
        return HeavyCavalryT
    }
    armyHelper.gethcSupport = function() {
        return HeavyCavalryS
    }
    armyHelper.gethcOwn = function() {
        return HeavyCavalryO
    }
    armyHelper.gethcInTown = function() {
        return HeavyCavalryI
    }
    armyHelper.gethcRecruting = function() {
        return HeavyCavalryR
    }
    armyHelper.gethcAvailable = function() {
        return HeavyCavalryA
    }
    armyHelper.getramTotal = function() {
        return RamT
    }
    armyHelper.getramSupport = function() {
        return RamS
    }
    armyHelper.getramOwn = function() {
        return RamO
    }
    armyHelper.getramInTown = function() {
        return RamI
    }
    armyHelper.getramRecruting = function() {
        return RamR
    }
    armyHelper.getramAvailable = function() {
        return RamA
    }
    armyHelper.getcatapultTotal = function() {
        return CatapultT
    }
    armyHelper.getcatapultSupport = function() {
        return CatapultS
    }
    armyHelper.getcatapultOwn = function() {
        return CatapultO
    }
    armyHelper.getcatapultInTown = function() {
        return CatapultI
    }
    armyHelper.getcatapultRecruting = function() {
        return CatapultR
    }
    armyHelper.getcatapultAvailable = function() {
        return CatapultA
    }
    armyHelper.getberserkerTotal = function() {
        return BerserkerT
    }
    armyHelper.getberserkerSupport = function() {
        return BerserkerS
    }
    armyHelper.getberserkerOwn = function() {
        return BerserkerO
    }
    armyHelper.getberserkerInTown = function() {
        return BerserkerI
    }
    armyHelper.getberserkerRecruting = function() {
        return BerserkerR
    }
    armyHelper.getberserkerAvailable = function() {
        return BerserkerA
    }
    armyHelper.gettrebuchetTotal = function() {
        return TrebuchetT
    }
    armyHelper.gettrebuchetSupport = function() {
        return TrebuchetS
    }
    armyHelper.gettrebuchetOwn = function() {
        return TrebuchetO
    }
    armyHelper.gettrebuchetInTown = function() {
        return TrebuchetI
    }
    armyHelper.gettrebuchetRecruting = function() {
        return TrebuchetR
    }
    armyHelper.gettrebuchetAvailable = function() {
        return TrebuchetA
    }
    armyHelper.getsnobTotal = function() {
        return SnobT
    }
    armyHelper.getsnobSupport = function() {
        return SnobS
    }
    armyHelper.getsnobOwn = function() {
        return SnobO
    }
    armyHelper.getsnobInTown = function() {
        return SnobI
    }
    armyHelper.getsnobRecruting = function() {
        return SnobR
    }
    armyHelper.getsnobAvailable = function() {
        return SnobA
    }
    armyHelper.getknightTotal = function() {
        return KnightT
    }
    armyHelper.getknightSupport = function() {
        return KnightS
    }
    armyHelper.getknightOwn = function() {
        return KnightO
    }
    armyHelper.getknightInTown = function() {
        return KnightI
    }
    armyHelper.getknightRecruting = function() {
        return KnightR
    }
    armyHelper.getknightAvailable = function() {
        return KnightA
    }
    return armyHelper
})
define('two/armyHelper/events', [], function () {
    angular.extend(eventTypeProvider, {
        ARMY_HELPER_START: 'army_helper_start',
        ARMY_HELPER_STOP: 'army_helper_stop',
        ARMY_HELPER_CLEAR_LOGS: 'army_helper_clear_logs'
    })
})
define('two/armyHelper/ui', [
    'two/ui',
    'two/armyHelper',
    'two/armyHelper/settings',
    'two/armyHelper/settings/map',
    'two/armyHelper/types/unit',
    'two/Settings',
    'queues/EventQueue',
    'two/EventScope',
    'struct/MapData',
    'two/utils'
], function (
    interfaceOverflow,
    armyHelper,
    SETTINGS,
    SETTINGS_MAP,
    B_UNIT,
    Settings,
    eventQueue,
    EventScope,
    mapData,
    utils
) {
    let $scope
    let settings
    let groupList = modelDataService.getGroupList()
    let $button
    let running = false
    let logsView = {}
    let villagesInfo = {}
    let villagesLabel = {}
    let armyVillage
    let mapSelectedVillage = false
    
    const TAB_TYPES = {
        ARMY: 'army',
        BALANCER: 'balancer',
        LOGS: 'logs'
    }

    const selectTab = function (tabType) {
        $scope.selectedTab = tabType
    }
    const checkArmy = function() {
        settings.setAll(settings.decode($scope.settings))
        armyHelper.checkArmy()
        $scope.spearTotal = armyHelper.getSpearTotal()
        $scope.spearSupport = armyHelper.getSpearSupport()
        $scope.spearOwn = armyHelper.getSpearOwn()
        $scope.spearInTown = armyHelper.getSpearInTown()
        $scope.spearRecruting = armyHelper.getSpearRecruting()
        $scope.spearAvailable = armyHelper.getSpearAvailable()
        $scope.swordTotal = armyHelper.getswordTotal()
        $scope.swordSupport = armyHelper.getswordSupport()
        $scope.swordOwn = armyHelper.getswordOwn()
        $scope.swordInTown = armyHelper.getswordInTown()
        $scope.swordRecruting = armyHelper.getswordRecruting()
        $scope.swordAvailable = armyHelper.getswordAvailable()
        $scope.axeTotal = armyHelper.getaxeTotal()
        $scope.axeSupport = armyHelper.getaxeSupport()
        $scope.axeOwn = armyHelper.getaxeOwn()
        $scope.axeInTown = armyHelper.getaxeInTown()
        $scope.axeRecruting = armyHelper.getaxeRecruting()
        $scope.axeAvailable = armyHelper.getaxeAvailable()
        $scope.archerTotal = armyHelper.getarcherTotal()
        $scope.archerSupport = armyHelper.getarcherSupport()
        $scope.archerOwn = armyHelper.getarcherOwn()
        $scope.archerInTown = armyHelper.getarcherInTown()
        $scope.archerRecruting = armyHelper.getarcherRecruting()
        $scope.archerAvailable = armyHelper.getarcherAvailable()
        $scope.lcTotal = armyHelper.getlcTotal()
        $scope.lcSupport = armyHelper.getlcSupport()
        $scope.lcOwn = armyHelper.getlcOwn()
        $scope.lcInTown = armyHelper.getlcInTown()
        $scope.lcRecruting = armyHelper.getlcRecruting()
        $scope.lcAvailable = armyHelper.getlcAvailable()
        $scope.maTotal = armyHelper.getmaTotal()
        $scope.maSupport = armyHelper.getmaSupport()
        $scope.maOwn = armyHelper.getmaOwn()
        $scope.maInTown = armyHelper.getmaInTown()
        $scope.maRecruting = armyHelper.getmaRecruting()
        $scope.maAvailable = armyHelper.getmaAvailable()
        $scope.hcTotal = armyHelper.gethcTotal()
        $scope.hcSupport = armyHelper.gethcSupport()
        $scope.hcOwn = armyHelper.gethcOwn()
        $scope.hcInTown = armyHelper.gethcInTown()
        $scope.hcRecruting = armyHelper.gethcRecruting()
        $scope.hcAvailable = armyHelper.gethcAvailable()
        $scope.ramTotal = armyHelper.getramTotal()
        $scope.ramSupport = armyHelper.getramSupport()
        $scope.ramOwn = armyHelper.getramOwn()
        $scope.ramInTown = armyHelper.getramInTown()
        $scope.ramRecruting = armyHelper.getramRecruting()
        $scope.ramAvailable = armyHelper.getramAvailable()
        $scope.catapultTotal = armyHelper.getcatapultTotal()
        $scope.catapultSupport = armyHelper.getcatapultSupport()
        $scope.catapultOwn = armyHelper.getcatapultOwn()
        $scope.catapultInTown = armyHelper.getcatapultInTown()
        $scope.catapultRecruting = armyHelper.getcatapultRecruting()
        $scope.catapultAvailable = armyHelper.getcatapultAvailable()
        $scope.berserkerTotal = armyHelper.getberserkerTotal()
        $scope.berserkerSupport = armyHelper.getberserkerSupport()
        $scope.berserkerOwn = armyHelper.getberserkerOwn()
        $scope.berserkerInTown = armyHelper.getberserkerInTown()
        $scope.berserkerRecruting = armyHelper.getberserkerRecruting()
        $scope.berserkerAvailable = armyHelper.getberserkerAvailable()
        $scope.trebuchetTotal = armyHelper.gettrebuchetTotal()
        $scope.trebuchetSupport = armyHelper.gettrebuchetSupport()
        $scope.trebuchetOwn = armyHelper.gettrebuchetOwn()
        $scope.trebuchetInTown = armyHelper.gettrebuchetInTown()
        $scope.trebuchetRecruting = armyHelper.gettrebuchetRecruting()
        $scope.trebuchetAvailable = armyHelper.gettrebuchetAvailable()
        $scope.snobTotal = armyHelper.getsnobTotal()
        $scope.snobSupport = armyHelper.getsnobSupport()
        $scope.snobOwn = armyHelper.getsnobOwn()
        $scope.snobInTown = armyHelper.getsnobInTown()
        $scope.snobRecruting = armyHelper.getsnobRecruting()
        $scope.snobAvailable = armyHelper.getsnobAvailable()
        $scope.knightTotal = armyHelper.getknightTotal()
        $scope.knightSupport = armyHelper.getknightSupport()
        $scope.knightOwn = armyHelper.getknightOwn()
        $scope.knightInTown = armyHelper.getknightInTown()
        $scope.knightRecruting = armyHelper.getknightRecruting()
        $scope.knightAvailable = armyHelper.getknightAvailable()
    }

    const clear = function() {
        $scope.settings[SETTINGS.GROUP3] = false
        $scope.settings[SETTINGS.GROUP4] = false
        $scope.settings[SETTINGS.UNIT_TYPE2] = false
        $scope.settings[SETTINGS.UNIT_TYPE1] = false
        settings.setAll(settings.decode($scope.settings))
    }
    const balanceAll = function () {
        if (armyHelper.isRunning()) {
            armyHelper.stop()
            running = false
        } else {
            armyHelper.start()
            settings.setAll(settings.decode($scope.settings))
            armyHelper.balanceAll()
        }
    }
    const balanceUnit = function () {
        if (armyHelper.isRunning()) {
            armyHelper.stop()
            running = false
        } else {
            armyHelper.start()
            settings.setAll(settings.decode($scope.settings))
            armyHelper.balanceUnit()
        }
    }
    const balanceGroup = function () {
        if (armyHelper.isRunning()) {
            armyHelper.stop()
            running = false
        } else {
            armyHelper.start()
            settings.setAll(settings.decode($scope.settings))
            armyHelper.balanceGroup()
        }
    }
    const balanceUnitAndGroup = function () {
        if (armyHelper.isRunning()) {
            armyHelper.stop()
            running = false
        } else {
            armyHelper.start()
            settings.setAll(settings.decode($scope.settings))
            armyHelper.balanceUnitAndGroup()
        }
    }
    const setMapSelectedVillage = function(event, menu) {
        mapSelectedVillage = menu.data
    }
    const unsetMapSelectedVillage = function() {
        mapSelectedVillage = false
    }
    const addMapSelected = function() {
        if (!mapSelectedVillage) {
            return utils.notif('error', $filter('i18n')('error_no_map_selected_village', $rootScope.loc.ale, 'army_helper'))
        }
        mapData.loadTownDataAsync(mapSelectedVillage.x, mapSelectedVillage.y, 1, 1, function(data) {
            armyVillage.origin = data
        })
    }
    const loadVillageInfo = function(villageId) {
        if (villagesInfo[villageId]) {
            return villagesInfo[villageId]
        }
        villagesInfo[villageId] = true
        villagesLabel[villageId] = 'ŁADOWANIE...'
        socketService.emit(routeProvider.MAP_GET_VILLAGE_DETAILS, {
            my_village_id: modelDataService.getSelectedVillage().getId(),
            village_id: villageId,
            num_reports: 1
        }, function(data) {
            villagesInfo[villageId] = {
                x: data.village_x,
                y: data.village_y,
                name: data.village_name,
                last_report: data.last_reports[0]
            }
            villagesLabel[villageId] = `${data.village_name} (${data.village_x}|${data.village_y})`
        })
    }
    logsView.updateVisibleLogs = function() {
        const offset = $scope.pagination.logs.offset
        const limit = $scope.pagination.logs.limit
        logsView.visibleLogs = logsView.logs.slice(offset, offset + limit)
        $scope.pagination.logs.count = logsView.logs.length
        logsView.visibleLogs.forEach(function(log) {
            if (log.villageId) {
                loadVillageInfo(log.villageId)
            }
        })
    }
    logsView.clearLogs = function() {
        armyHelper.clearLogs()
    }

    const eventHandlers = {
        updateGroups: function () {
            $scope.groups = Settings.encodeList(groupList.getGroups(), {
                disabled: false,
                type: 'groups'
            })
        },
        autoCompleteSelected: function(event, id, data, type) {
            if (id !== 'armyhelper_village_search') {
                return false
            }
            armyVillage[type] = {
                id: data.raw.id,
                x: data.raw.x,
                y: data.raw.y,
                name: data.raw.name
            }
            $scope.searchQuery[type] = ''
        },
        onAutoCompleteVillage: function(data) {
            armyVillage.origin = {
                id: data.id,
                x: data.x,
                y: data.y,
                name: data.name
            }
            $scope.settings[SETTINGS.VILLAGE_ID] = data.id
            settings.setAll(settings.decode($scope.settings))
        },
        start: function () {
            $scope.running = true

        },
        stop: function () {
            $scope.running = false

        },
        updateLogs: function() {
            $scope.logs = armyHelper.getLogs()
            logsView.updateVisibleLogs()
            if (!$scope.logs.length) {
                utils.notif('success', $filter('i18n')('reseted_logs', $rootScope.loc.ale, 'army_helper'))
            }
        },
        clearLogs: function() {
            utils.notif('success', $filter('i18n')('logs_cleared', $rootScope.loc.ale, 'army_helper'))
            eventHandlers.updateLogs()
        }
    }

    const init = function () {
        settings = armyHelper.getSettings()
        armyVillage = {
            origin: false
        }
        $button = interfaceOverflow.addMenuButton('Hetman', 90, $filter('i18n')('description', $rootScope.loc.ale, 'army_helper'))
        $button.addEventListener('click', buildWindow)
        eventQueue.register(eventTypeProvider.ARMY_HELPER_START, function() {
            running = true
            $button.classList.remove('btn-orange')
            $button.classList.add('btn-red')
            utils.notif('success', $filter('i18n')('general.stopped', $rootScope.loc.ale, 'army_helper'))
        })
        eventQueue.register(eventTypeProvider.ARMY_HELPER_STOP, function() {
            running = false
            $button.classList.remove('btn-red')
            $button.classList.add('btn-orange')
            utils.notif('success', $filter('i18n')('general.stopped', $rootScope.loc.ale, 'army_helper'))
        })
        $rootScope.$on(eventTypeProvider.SHOW_CONTEXT_MENU, setMapSelectedVillage)
        $rootScope.$on(eventTypeProvider.DESTROY_CONTEXT_MENU, unsetMapSelectedVillage)
        interfaceOverflow.addTemplate('twoverflow_army_helper_window', `___army_helper_html_main`)
        interfaceOverflow.addStyle('___army_helper_css_style')
    }

    const buildWindow = function () {
        $scope = $rootScope.$new()
        $scope.SETTINGS = SETTINGS
        $scope.TAB_TYPES = TAB_TYPES
        $scope.running = running
        $scope.pagination = {}
        $scope.selectedTab = TAB_TYPES.ARMY
        $scope.villagesLabel = villagesLabel
        $scope.villagesInfo = villagesInfo
        $scope.logsView = logsView
        $scope.logsView.logs = armyHelper.getLogs()
        $scope.visibleLogs = []
        $scope.settingsMap = SETTINGS_MAP
        $scope.unit = Settings.encodeList(B_UNIT, {
            textObject: 'army_helper',
            disabled: true
        })
        $scope.autoCompleteProvince = {
            type: ['village'],
            placeholder: $filter('i18n')('balance.add_village_search', $rootScope.loc.ale, 'army_helper'),
            onEnter: eventHandlers.onAutoCompleteVillage,
            tooltip: $filter('i18n')('balance.add_origin', $rootScope.loc.ale, 'army_helper'),
            dropDown: true
        }
        $scope.openVillageInfo = windowDisplayService.openVillageInfo
        $scope.pagination.logs = {
            count: logsView.logs.length,
            offset: 0,
            loader: logsView.updateVisibleLogs,
            limit: storageService.getPaginationLimit()
        }
        settings.injectScope($scope)
        eventHandlers.updateGroups()
        logsView.updateVisibleLogs()
        $scope.selectTab = selectTab
        $scope.armyVillage = armyVillage
        $scope.check = checkArmy
        $scope.balanceAll = balanceAll
        $scope.balanceGroup = balanceGroup
        $scope.balanceUnit = balanceUnit
        $scope.balanceUnitAndGroup = balanceUnitAndGroup
        $scope.clear = clear
        $scope.jumpToVillage = mapService.jumpToVillage
        $scope.addMapSelected = addMapSelected

        let eventScope = new EventScope('twoverflow_army_helper_window', function onDestroy () {
            console.log('armyHelper window closed')
        })
        eventScope.register(eventTypeProvider.SELECT_SELECTED, eventHandlers.autoCompleteSelected, true)
        eventScope.register(eventTypeProvider.GROUPS_CREATED, eventHandlers.updateGroups, true)
        eventScope.register(eventTypeProvider.GROUPS_DESTROYED, eventHandlers.updateGroups, true)
        eventScope.register(eventTypeProvider.GROUPS_UPDATED, eventHandlers.updateGroups, true)
        eventScope.register(eventTypeProvider.ARMY_HELPER_START, eventHandlers.start)
        eventScope.register(eventTypeProvider.ARMY_HELPER_CLEAR_LOGS, eventHandlers.clearLogs)
        eventScope.register(eventTypeProvider.ARMY_HELPER_STOP, eventHandlers.stop)
        eventScope.register(eventTypeProvider.ARMY_HELPER_LOGS_UPDATED, eventHandlers.updateLogs)
        
        windowManagerService.getScreenWithInjectedScope('!twoverflow_army_helper_window', $scope)
    }

    return init
})

define('two/armyHelper/settings', [], function () {
    return {
        VILLAGE_ID: 'village_id',
        GROUP3: 'group3',
        GROUP4: 'group4',
        UNIT_TYPE1: 'unit_type1',
        UNIT_TYPE2: 'unit_type2'
    }
})

define('two/armyHelper/settings/updates', function () {
    return {
        GROUPS: 'groups'
    }
})

define('two/armyHelper/settings/map', [
    'two/armyHelper/settings',
    'two/armyHelper/settings/updates'
], function (
    SETTINGS,
    UPDATES
) {
    return {
        [SETTINGS.GROUP3]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            multiSelect: false,
            type: 'groups'
        },
        [SETTINGS.GROUP4]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            multiSelect: false,
            type: 'groups'
        },
        [SETTINGS.UNIT_TYPE1]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT_TYPE2]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.VILLAGE_ID]: {
            default: 0,
            inputType: 'number'
        }
    }
})

define('two/armyHelper/types/unit', [], function () {
    return {
        SPEAR: 'spear',
        SWORD: 'sword',
        AXE: 'axe',
        ARCHER: 'archer',
        LIGHT_CAVALRY: 'light_cavalry',
        MOUNTED_ARCHER: 'mounted_archer',
        HEAVY_CAVALRY: 'heavy_cavalry',
        RAM: 'ram',
        CATAPULT: 'catapult',
        TREBUCHET: 'trebuchet',
        DOPPELSOLDNER: 'doppelsoldner',
        SNOB: 'snob',
        KNIGHT: 'knight'
    }
})
require([
    'two/ready',
    'two/armyHelper',
    'two/armyHelper/ui',
    'two/armyHelper/events'
], function (
    ready,
    armyHelper,
    armyHelperInterface
) {
    if (armyHelper.isInitialized()) {
        return false
    }

    ready(function () {
        armyHelper.init()
        armyHelperInterface()
    }, ['map'])
})

define('two/attackView', [
    'two/ready',
    'two/utils',
    'two/attackView/types/columns',
    'two/attackView/types/commands',
    'two/attackView/types/filters',
    'two/attackView/unitSpeedOrder',
    'conf/unitTypes',
    'conf/buildingTypes',
    'Lockr',
    'helper/math',
    'helper/mapconvert',
    'struct/MapData',
    'queues/EventQueue'
], function(
    ready,
    utils,
    COLUMN_TYPES,
    COMMAND_TYPES,
    FILTER_TYPES,
    UNIT_SPEED_ORDER,
    UNIT_TYPES,
    BUILDING_TYPES,
    Lockr,
    math,
    convert,
    mapData,
    eventQueue
) {
    let initialized = false
    let overviewService = injector.get('overviewService')
    let globalInfoModel
    let commands = []
    let interval = 2000
    let commandQueue = false
    let filters = {}
    let filterParams = {}
    let sorting = {
        reverse: false,
        column: COLUMN_TYPES.TIME_COMPLETED
    }
    let COMMAND_QUEUE_DATE_TYPES
    const STORAGE_KEYS = {
        FILTERS: 'attack_view_filters'
    }
    const INCOMING_UNITS_FILTER = {}
    const COMMAND_TYPES_FILTER = {}
    const formatFilters = function() {
        const toArray = [FILTER_TYPES.COMMAND_TYPES]
        const currentVillageId = modelDataService.getSelectedVillage().getId()
        let arrays = {}
        // format filters for backend
        for (let i = 0; i < toArray.length; i++) {
            for (let j in filters[toArray[i]]) {
                if (!arrays[toArray[i]]) {
                    arrays[toArray[i]] = []
                }
                if (filters[toArray[i]][j]) {
                    switch (toArray[i]) {
                        case FILTER_TYPES.COMMAND_TYPES: {
                            if (j === COMMAND_TYPES.ATTACK) {
                                arrays[toArray[i]].push(COMMAND_TYPES.ATTACK)
                            } else if (j === COMMAND_TYPES.SUPPORT) {
                                arrays[toArray[i]].push(COMMAND_TYPES.SUPPORT)
                            } else if (j === COMMAND_TYPES.RELOCATE) {
                                arrays[toArray[i]].push(COMMAND_TYPES.RELOCATE)
                            }
                            break
                        }
                    }
                }
            }
        }
        filterParams = arrays
        filterParams.village = filters[FILTER_TYPES.VILLAGE] ? [currentVillageId] : []
    }
    /**
     * Command was sent.
     */
    const onCommandIncomming = function() {
        // we can never know if the command is currently visible (because of filters, sorting and stuff) -> reload
        attackView.loadCommands()
    }
    /**
     * Command was cancelled.
     *
     * @param {Object} event unused
     * @param {Object} data The backend-data
     */
    const onCommandCancelled = function(event, data) {
        eventQueue.trigger(eventTypeProvider.ATTACK_VIEW_COMMAND_CANCELLED, [data.id || data.command_id])
    }
    /**
     * Command ignored.
     *
     * @param {Object} event unused
     * @param {Object} data The backend-data
     */
    const onCommandIgnored = function(event, data) {
        for (let i = 0; i < commands.length; i++) {
            if (commands[i].command_id === data.command_id) {
                commands.splice(i, 1)
            }
        }
        eventQueue.trigger(eventTypeProvider.ATTACK_VIEW_COMMAND_IGNORED, [data.command_id])
    }
    /**
     * Village name changed.
     *
     * @param {Object} event unused
     * @param {Object} data The backend-data
     */
    const onVillageNameChanged = function(event, data) {
        for (let i = 0; i < commands.length; i++) {
            if (commands[i].target_village_id === data.village_id) {
                commands[i].target_village_name = data.name
                commands[i].targetVillage.name = data.name
            } else if (commands[i].origin_village_id === data.village_id) {
                commands[i].origin_village_name = data.name
                commands[i].originVillage.name = data.name
            }
        }
        eventQueue.trigger(eventTypeProvider.ATTACK_VIEW_VILLAGE_RENAMED, [data])
    }
    const onVillageSwitched = function(e, newVillageId) {
        if (filterParams[FILTER_TYPES.VILLAGE].length) {
            filterParams[FILTER_TYPES.VILLAGE] = [newVillageId]
            attackView.loadCommands()
        }
    }
    /**
     * @param {CommandModel} command
     * @return {String} Slowest unit
     */
    const getSlowestUnit = function(command) {
        const origin = {
            x: command.origin_x,
            y: command.origin_y
        }
        const target = {
            x: command.target_x,
            y: command.target_y
        }
        const unitDurationDiff = UNIT_SPEED_ORDER.map(function(unit) {
            const travelTime = utils.getTravelTime(origin, target, {
                [unit]: 1
            }, command.command_type, {}, false)
            const durationDiff = Math.abs(travelTime - command.model.duration)
            return {
                unit: unit,
                diff: durationDiff
            }
        }).sort(function(a, b) {
            return a.diff - b.diff
        })
        return unitDurationDiff[0].unit
    }
    /**
     * Sort a set of villages by distance from a specified village.
     *
     * @param {Array[{x: Number, y: Number}]} villages List of village that will be sorted.
     * @param {VillageModel} origin
     * @return {Array} Sorted villages
     */
    const sortByDistance = function(villages, origin) {
        return villages.sort(function(villageA, villageB) {
            let distA = math.actualDistance(origin, villageA)
            let distB = math.actualDistance(origin, villageB)
            return distA - distB
        })
    }
    const sortByDistanceTarget = function(villages, target) {
        return villages.sort(function(villageA, villageB) {
            var distA = math.actualDistance(target, villageA)
            var distB = math.actualDistance(target, villageB)
            return distA - distB
        }).reverse()
    }
    /**
     * Order:
     * - Barbarian villages.
     * - Own villages.
     * - Tribe villages.
     *
     * @param {VillageModel} origin
     * @param {Function} callback
     */
    const closestNonHostileVillage = function(origin, callback) {
        const size = 25
        let loadBlockIndex = 0
        if (mapData.hasTownDataInChunk(origin.x, origin.y)) {
            const sectors = mapData.loadTownData(origin.x, origin.y, size, size, size)
            const tribeId = modelDataService.getSelectedCharacter().getTribeId()
            const playerId = modelDataService.getSelectedCharacter().getId()
            let targets = []
            let closestTargets
            sectors.forEach(function(sector) {
                for (let x in sector.data) {
                    for (let y in sector.data[x]) {
                        targets.push(sector.data[x][y])
                    }
                }
            })
            const barbs = targets.filter(function(target) {
                return target.character_id === null && target.id > 0
            })
            const own = targets.filter(function(target) {
                return target.character_id === playerId && origin.id !== target.id
            })
            if (barbs.length) {
                closestTargets = sortByDistance(barbs, origin)
            } else if (own.length) {
                closestTargets = sortByDistance(own, origin)
            } else if (tribeId) {
                const tribe = targets.filter(function(target) {
                    return target.tribe_id === tribeId
                })
                if (tribe.length) {
                    closestTargets = sortByDistance(tribe, origin)
                } else {
                    return callback(false)
                }
            } else {
                return callback(false)
            }
            return callback(closestTargets[0])
        }
        const loads = convert.scaledGridCoordinates(origin.x, origin.y, size, size, size)
        mapData.loadTownDataAsync(origin.x, origin.y, size, size, function() {
            if (++loadBlockIndex === loads.length) {
                closestNonHostileVillage(origin, callback)
            }
        })
    }
    const closestOwnVillageBunker = function(target, callback) {
        var size = 40
        if (mapData.hasTownDataInChunk(target.x, target.y)) {
            var sectors = mapData.loadTownData(target.x, target.y, size, size, size)
            var origins = []
            var closestOrigins
            var own = []
            var playerId = modelDataService.getSelectedCharacter().getId()
            sectors.forEach(function(sector) {
                for (let x in sector.data) {
                    for (let y in sector.data[x]) {
                        origins.push(sector.data[x][y])
                    }
                }
            })
            own = origins.filter(function(origin) {
                return origin.character_id === playerId && target.id !== origin.id
            })
            if (own.length) {
                closestOrigins = sortByDistanceTarget(own, target)
            } else {
                return callback(false)
            }
            return callback(closestOrigins)
        }
        var loads = convert.scaledGridCoordinates(target.x, target.y, size, size, size)
        var index = 0
        mapData.loadTownDataAsync(target.x, target.y, size, size, function() {
            if (++index === loads.length) {
                closestOwnVillageBunker(target, callback)
            }
        })
    }
    /**
     * @param {Object} data The data-object from the backend
     */
    const onOverviewIncomming = function(data) {
        commands = data.commands
        for (let i = 0; i < commands.length; i++) {
            overviewService.formatCommand(commands[i])
            commands[i].slowestUnit = getSlowestUnit(commands[i])
        }
        commands = commands.filter(function(command) {
            return filters[FILTER_TYPES.INCOMING_UNITS][command.slowestUnit]
        })
        eventQueue.trigger(eventTypeProvider.ATTACK_VIEW_COMMANDS_LOADED, [commands])
    }
    let attackView = {}
    attackView.loadCommands = function() {
        const incomingCommands = globalInfoModel.getCommandListModel().getIncomingCommands().length
        const count = incomingCommands > 25 ? incomingCommands : 25
        socketService.emit(routeProvider.OVERVIEW_GET_INCOMING, {
            'count': count,
            'offset': 0,
            'sorting': sorting.column,
            'reverse': sorting.reverse ? 1 : 0,
            'groups': [],
            'command_types': filterParams[FILTER_TYPES.COMMAND_TYPES],
            'villages': filterParams[FILTER_TYPES.VILLAGE]
        }, onOverviewIncomming)
    }
    attackView.getCommands = function() {
        return commands
    }
    attackView.getFilters = function() {
        return filters
    }
    attackView.getSortings = function() {
        return sorting
    }
    /**
     * Toggles the given filter.
     *
     * @param {string} type The category of the filter (see FILTER_TYPES)
     * @param {string} opt_filter The filter to be toggled.
     */
    attackView.toggleFilter = function(type, opt_filter) {
        if (!opt_filter) {
            filters[type] = !filters[type]
        } else {
            filters[type][opt_filter] = !filters[type][opt_filter]
        }
        // format filters for the backend
        formatFilters()
        Lockr.set(STORAGE_KEYS.FILTERS, filters)
        attackView.loadCommands()
    }
    attackView.toggleSorting = function(newColumn) {
        if (newColumn === sorting.column) {
            sorting.reverse = !sorting.reverse
        } else {
            sorting.column = newColumn
            sorting.reverse = false
        }
        attackView.loadCommands()
    }
    /**
     * Set an automatic command with all units from the village
     * and start the CommandQueue module if it's disabled.
     *
     * @param {Object} command Data of the command like origin, target.
     * @param {String} date Date that the command has to leave.
     */
    attackView.setCommander = function(command, date) {
        closestNonHostileVillage(command.targetVillage, function(closestVillage) {
            const origin = command.targetVillage
            const target = closestVillage
            const commandType = target.character_id ? COMMAND_TYPES.SUPPORT : COMMAND_TYPES.ATTACK
            let units = {}
            utils.each(UNIT_TYPES, function(unit) {
                units[unit] = '*'
            })
            console.log(units)
            commandQueue.addCommand(origin, target, date, COMMAND_QUEUE_DATE_TYPES.OUT, units, {}, commandType, BUILDING_TYPES.WALL)
            if (!commandQueue.isRunning()) {
                commandQueue.start()
            }
        })
    }
    attackView.setQueueBunkerCommand = function(command, date) {
        closestOwnVillageBunker(command.targetVillage, function(closestVillage) {
            var origin = closestVillage
            var target = command.targetVillage
            var Archer = 0
            var HC = 0
            var Spear = 0
            var Sword = 0
            var Trebuchet = 0
            const commandType = COMMAND_TYPES.SUPPORT
            let units = {}
            console.log(origin, target)

            function unitInfo() {
                origin.forEach(function(village, index) {
                    setTimeout(function() {
                        socketService.emit(routeProvider.VILLAGE_UNIT_INFO, {
                            village_id: village.id
                        }, function(data) {
                            Archer = data.available_units.archer.total
                            HC = data.available_units.heavy_cavalry.total
                            Spear = data.available_units.spear.total
                            Sword = data.available_units.sword.total
                            Trebuchet = data.available_units.trebuchet.total
                        })
                        if (HC >= 38) {
                            units = {
                                heavy_cavalry: '-38'
                            }
                            commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                            if (!commandQueue.isRunning()) {
                                commandQueue.start()
                            }
                        }
                        if (Spear >= 500 && Archer >= 500) {
                            units = {
                                archer: '-500',
                                spear: '-500'
                            }
                            commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                            if (!commandQueue.isRunning()) {
                                commandQueue.start()
                            }
                        } else if (Spear >= 500 && Archer < 500) {
                            units = {
                                archer: '*',
                                spear: '-500'
                            }
                            commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                            if (!commandQueue.isRunning()) {
                                commandQueue.start()
                            }
                        } else if (Spear < 500 && Archer >= 500) {
                            units = {
                                archer: '-500',
                                spear: '*'
                            }
                            commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                            if (!commandQueue.isRunning()) {
                                commandQueue.start()
                            }
                        } else if (Spear == 0 && Archer >= 500) {
                            units = {
                                archer: '-500'
                            }
                            commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                            if (!commandQueue.isRunning()) {
                                commandQueue.start()
                            }
                        } else if (Spear >= 500 && Archer == 0) {
                            units = {
                                spear: '-500'
                            }
                            commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                            if (!commandQueue.isRunning()) {
                                commandQueue.start()
                            }
                        }
                        if (Sword >= 500) {
                            units = {
                                sword: '-500'
                            }
                            commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                            if (!commandQueue.isRunning()) {
                                commandQueue.start()
                            }
                        }
                        if (Trebuchet >= 100) {
                            units = {
                                trebuchet: '*'
                            }
                            commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                            if (!commandQueue.isRunning()) {
                                commandQueue.start()
                            }
                        }
                    }, index * interval)
                })
            }
            unitInfo()
        })
    }
    attackView.setQueueSupportCommand = function(command, date) {
        closestOwnVillageBunker(command.targetVillage, function(closestVillage) {
            var origin = closestVillage
            var target = command.targetVillage
            var Archer = 0
            var HC = 0
            var Spear = 0
            var Sword = 0
            var totalSpear = 0
            var totalSword = 0
            var totalArcher = 0
            var totalHC = 0
            const commandType = COMMAND_TYPES.SUPPORT
            let units = {}

            function unitInfo() {
                origin.forEach(function(village, index) {
                    setTimeout(function() {
                        socketService.emit(routeProvider.VILLAGE_UNIT_INFO, {
                            village_id: village.id
                        }, function(data) {
                            Archer = data.available_units.archer.total
                            HC = data.available_units.heavy_cavalry.total
                            Spear = data.available_units.spear.total
                            Sword = data.available_units.sword.total
                        })
                        if (HC >= 30 || Spear >= 100 || Sword >= 100 || Archer >= 100) {
                            var availableHc = HC / 30
                            var doHc = 0
                            var availableSpear = Spear / 100
                            var doSpear = 0
                            var availableSword = Sword / 100
                            var doSword = 0
                            var availableArcher = Archer / 100
                            var doArcher = 0
                            var maks = 10
                            if (availableSpear >= maks) {
                                doSpear = maks
                            } else {
                                doSpear = Math.floor(availableSpear)
                            }
                            if (availableSword >= maks) {
                                doSword = maks
                            } else {
                                doSword = Math.floor(availableSword)
                            }
                            if (availableArcher >= maks) {
                                doArcher = maks
                            } else {
                                doArcher = Math.floor(availableArcher)
                            }
                            if (availableHc >= maks) {
                                doHc = maks
                            } else {
                                doHc = Math.floor(availableHc)
                            }
                            if (doHc > 0) {
                                for (let step = 0; step < doHc; step++) {
                                    units = {
                                        heavy_cavalry: '30'
                                    }
                                    if (totalHC < 1800) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalHC += 30
                                    }
                                }
                            }
                            if (doSpear > 0) {
                                for (let step = 0; step < doSpear; step++) {
                                    units = {
                                        spear: '100'
                                    }
                                    if (totalSpear < 6000) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalSpear += 100
                                    }
                                }
                            }
                            if (doSword > 0) {
                                for (let step = 0; step < doSword; step++) {
                                    units = {
                                        sword: '100'
                                    }
                                    if (totalSword < 6000) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalSword += 100
                                    }
                                }
                            }
                            if (doArcher > 0) {
                                for (let step = 0; step < doArcher; step++) {
                                    units = {
                                        archer: '100'
                                    }
                                    if (totalArcher < 6000) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalArcher += 100
                                    }
                                }
                            }
                        }
                        if (!commandQueue.isRunning()) {
                            commandQueue.start()
                        }
                    }, index * interval)
                })
            }
            unitInfo()
        })
    }
    attackView.setQueueBunkerCommand5 = function(command, date) {
        closestOwnVillageBunker(command.targetVillage, function(closestVillage) {
            var origin = closestVillage
            var target = command.targetVillage
            var Archer = 0
            var HC = 0
            var Spear = 0
            var Sword = 0
            var totalSpear = 0
            var totalSword = 0
            var totalArcher = 0
            var totalHC = 0
            const commandType = COMMAND_TYPES.SUPPORT
            let units = {}

            function unitInfo() {
                origin.forEach(function(village, index) {
                    setTimeout(function() {
                        socketService.emit(routeProvider.VILLAGE_UNIT_INFO, {
                            village_id: village.id
                        }, function(data) {
                            Archer = data.available_units.archer.total
                            HC = data.available_units.heavy_cavalry.total
                            Spear = data.available_units.spear.total
                            Sword = data.available_units.sword.total
                        })
                        if (HC >= 300 || Spear >= 1000 || Sword >= 1000 || Archer >= 1000) {
                            var availableHc = HC / 300
                            var doHc = 0
                            var availableSpear = Spear / 1000
                            var doSpear = 0
                            var availableSword = Sword / 1000
                            var doSword = 0
                            var availableArcher = Archer / 1000
                            var doArcher = 0
                            var maks = 10
                            if (availableSpear >= maks) {
                                doSpear = maks
                            } else {
                                doSpear = Math.floor(availableSpear)
                            }
                            if (availableSword >= maks) {
                                doSword = maks
                            } else {
                                doSword = Math.floor(availableSword)
                            }
                            if (availableArcher >= maks) {
                                doArcher = maks
                            } else {
                                doArcher = Math.floor(availableArcher)
                            }
                            if (availableHc >= maks) {
                                doHc = maks
                            } else {
                                doHc = Math.floor(availableHc)
                            }
                            if (doHc > 0) {
                                for (let step = 0; step < doHc; step++) {
                                    units = {
                                        heavy_cavalry: '300'
                                    }
                                    if (totalHC < 1500) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalHC += 300
                                    }
                                }
                            }
                            if (doSpear > 0) {
                                for (let step = 0; step < doSpear; step++) {
                                    units = {
                                        spear: '1000'
                                    }
                                    if (totalSpear < 5000) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalSpear += 1000
                                    }
                                }
                            }
                            if (doSword > 0) {
                                for (let step = 0; step < doSword; step++) {
                                    units = {
                                        sword: '1000'
                                    }
                                    if (totalSword < 5000) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalSword += 1000
                                    }
                                }
                            }
                            if (doArcher > 0) {
                                for (let step = 0; step < doArcher; step++) {
                                    units = {
                                        archer: '1000'
                                    }
                                    if (totalArcher < 5000) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalArcher += 1000
                                    }
                                }
                            }
                        }
                        if (!commandQueue.isRunning()) {
                            commandQueue.start()
                        }
                    }, index * interval)
                })
            }
            unitInfo()
        })
    }
    attackView.setQueueBunkerCommand10 = function(command, date) {
        closestOwnVillageBunker(command.targetVillage, function(closestVillage) {
            var origin = closestVillage
            var target = command.targetVillage
            var Archer = 0
            var HC = 0
            var Spear = 0
            var Sword = 0
            var totalSpear = 0
            var totalSword = 0
            var totalArcher = 0
            var totalHC = 0
            const commandType = COMMAND_TYPES.SUPPORT
            let units = {}

            function unitInfo() {
                origin.forEach(function(village, index) {
                    setTimeout(function() {
                        socketService.emit(routeProvider.VILLAGE_UNIT_INFO, {
                            village_id: village.id
                        }, function(data) {
                            Archer = data.available_units.archer.total
                            HC = data.available_units.heavy_cavalry.total
                            Spear = data.available_units.spear.total
                            Sword = data.available_units.sword.total
                        })
                        if (HC >= 300 || Spear >= 1000 || Sword >= 1000 || Archer >= 1000) {
                            var availableHc = HC / 300
                            var doHc = 0
                            var availableSpear = Spear / 1000
                            var doSpear = 0
                            var availableSword = Sword / 1000
                            var doSword = 0
                            var availableArcher = Archer / 1000
                            var doArcher = 0
                            var maks = 10
                            if (availableSpear >= maks) {
                                doSpear = maks
                            } else {
                                doSpear = Math.floor(availableSpear)
                            }
                            if (availableSword >= maks) {
                                doSword = maks
                            } else {
                                doSword = Math.floor(availableSword)
                            }
                            if (availableArcher >= maks) {
                                doArcher = maks
                            } else {
                                doArcher = Math.floor(availableArcher)
                            }
                            if (availableHc >= maks) {
                                doHc = maks
                            } else {
                                doHc = Math.floor(availableHc)
                            }
                            if (doHc > 0) {
                                for (let step = 0; step < doHc; step++) {
                                    units = {
                                        heavy_cavalry: '300'
                                    }
                                    if (totalHC < 3000) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalHC += 300
                                    }
                                }
                            }
                            if (doSpear > 0) {
                                for (let step = 0; step < doSpear; step++) {
                                    units = {
                                        spear: '1000'
                                    }
                                    if (totalSpear < 10000) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalSpear += 1000
                                    }
                                }
                            }
                            if (doSword > 0) {
                                for (let step = 0; step < doSword; step++) {
                                    units = {
                                        sword: '1000'
                                    }
                                    if (totalSword < 10000) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalSword += 1000
                                    }
                                }
                            }
                            if (doArcher > 0) {
                                for (let step = 0; step < doArcher; step++) {
                                    units = {
                                        archer: '1000'
                                    }
                                    if (totalArcher < 10000) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalArcher += 1000
                                    }
                                }
                            }
                        }
                        if (!commandQueue.isRunning()) {
                            commandQueue.start()
                        }
                    }, index * interval)
                })
            }
            unitInfo()
        })
    }
    attackView.setQueueBunkerCommand20 = function(command, date) {
        closestOwnVillageBunker(command.targetVillage, function(closestVillage) {
            var origin = closestVillage
            var target = command.targetVillage
            var Archer = 0
            var HC = 0
            var Spear = 0
            var Sword = 0
            var totalSpear = 0
            var totalSword = 0
            var totalArcher = 0
            var totalHC = 0
            const commandType = COMMAND_TYPES.SUPPORT
            let units = {}

            function unitInfo() {
                origin.forEach(function(village, index) {
                    setTimeout(function() {
                        socketService.emit(routeProvider.VILLAGE_UNIT_INFO, {
                            village_id: village.id
                        }, function(data) {
                            Archer = data.available_units.archer.total
                            HC = data.available_units.heavy_cavalry.total
                            Spear = data.available_units.spear.total
                            Sword = data.available_units.sword.total
                        })
                        if (HC >= 300 || Spear >= 1000 || Sword >= 1000 || Archer >= 1000) {
                            var availableHc = HC / 300
                            var doHc = 0
                            var availableSpear = Spear / 1000
                            var doSpear = 0
                            var availableSword = Sword / 1000
                            var doSword = 0
                            var availableArcher = Archer / 1000
                            var doArcher = 0
                            var maks = 10
                            if (availableSpear >= maks) {
                                doSpear = maks
                            } else {
                                doSpear = Math.floor(availableSpear)
                            }
                            if (availableSword >= maks) {
                                doSword = maks
                            } else {
                                doSword = Math.floor(availableSword)
                            }
                            if (availableArcher >= maks) {
                                doArcher = maks
                            } else {
                                doArcher = Math.floor(availableArcher)
                            }
                            if (availableHc >= maks) {
                                doHc = maks
                            } else {
                                doHc = Math.floor(availableHc)
                            }
                            if (doHc > 0) {
                                for (let step = 0; step < doHc; step++) {
                                    units = {
                                        heavy_cavalry: '300'
                                    }
                                    if (totalHC < 6000) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalHC += 300
                                    }
                                }
                            }
                            if (doSpear > 0) {
                                for (let step = 0; step < doSpear; step++) {
                                    units = {
                                        spear: '1000'
                                    }
                                    if (totalSpear < 20000) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalSpear += 1000
                                    }
                                }
                            }
                            if (doSword > 0) {
                                for (let step = 0; step < doSword; step++) {
                                    units = {
                                        sword: '1000'
                                    }
                                    if (totalSword < 20000) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalSword += 1000
                                    }
                                }
                            }
                            if (doArcher > 0) {
                                for (let step = 0; step < doArcher; step++) {
                                    units = {
                                        archer: '1000'
                                    }
                                    if (totalArcher < 20000) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalArcher += 1000
                                    }
                                }
                            }
                        }
                        if (!commandQueue.isRunning()) {
                            commandQueue.start()
                        }
                    }, index * interval)
                })
            }
            unitInfo()
        })
    }
    attackView.setQueueSupportBigCommand = function(command, date) {
        closestOwnVillageBunker(command.targetVillage, function(closestVillage) {
            var origin = closestVillage
            var target = command.targetVillage
            var Archer = 0
            var HC = 0
            var Spear = 0
            var Sword = 0
            var totalSpear = 0
            var totalSword = 0
            var totalArcher = 0
            var totalHC = 0
            const commandType = COMMAND_TYPES.SUPPORT
            let units = {}

            function unitInfo() {
                origin.forEach(function(village, index) {
                    setTimeout(function() {
                        socketService.emit(routeProvider.VILLAGE_UNIT_INFO, {
                            village_id: village.id
                        }, function(data) {
                            Archer = data.available_units.archer.total
                            HC = data.available_units.heavy_cavalry.total
                            Spear = data.available_units.spear.total
                            Sword = data.available_units.sword.total
                        })
                        if (HC >= 150 || Spear >= 500 || Sword >= 500 || Archer >= 500) {
                            var availableHc = HC / 150
                            var doHc = 0
                            var availableSpear = Spear / 500
                            var doSpear = 0
                            var availableSword = Sword / 500
                            var doSword = 0
                            var availableArcher = Archer / 500
                            var doArcher = 0
                            var maks = 10
                            if (availableSpear >= maks) {
                                doSpear = maks
                            } else {
                                doSpear = Math.floor(availableSpear)
                            }
                            if (availableSword >= maks) {
                                doSword = maks
                            } else {
                                doSword = Math.floor(availableSword)
                            }
                            if (availableArcher >= maks) {
                                doArcher = maks
                            } else {
                                doArcher = Math.floor(availableArcher)
                            }
                            if (availableHc >= maks) {
                                doHc = maks
                            } else {
                                doHc = Math.floor(availableHc)
                            }
                            if (doHc > 0) {
                                for (let step = 0; step < doHc; step++) {
                                    units = {
                                        heavy_cavalry: '150'
                                    }
                                    if (totalHC < 9000) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalHC += 150
                                    }
                                }
                            }
                            if (doSpear > 0) {
                                for (let step = 0; step < doSpear; step++) {
                                    units = {
                                        spear: '500'
                                    }
                                    if (totalSpear < 30000) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalSpear += 500
                                    }
                                }
                            }
                            if (doSword > 0) {
                                for (let step = 0; step < doSword; step++) {
                                    units = {
                                        sword: '500'
                                    }
                                    if (totalSword < 30000) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalSword += 500
                                    }
                                }
                            }
                            if (doArcher > 0) {
                                for (let step = 0; step < doArcher; step++) {
                                    units = {
                                        archer: '500'
                                    }
                                    if (totalArcher < 30000) {
                                        commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                        totalArcher += 500
                                    }
                                }
                            }
                        }
                        if (!commandQueue.isRunning()) {
                            commandQueue.start()
                        }
                    }, index * interval)
                })
            }
            unitInfo()
        })
    }
    attackView.setQueueConquerBack = function(command, date) {
        closestOwnVillageBunker(command.targetVillage, function(closestVillage) {
            var origin = closestVillage
            var target = command.targetVillage
            var LC = 0
            var Snob = 0
            var MA = 0
            var HC = 0
            var Archer = 0
            var Axe = 0
            var Spear = 0
            var Sword = 0
            var Berserker = 0
            var sent = 0
            const commandType = COMMAND_TYPES.ATTACK
            let units = {}

            function unitInfo() {
                origin.forEach(function(village, index) {
                    setTimeout(function() {
                        socketService.emit(routeProvider.VILLAGE_UNIT_INFO, {
                            village_id: village.id
                        }, function(data) {
                            Archer = data.available_units.archer.total
                            Snob = data.available_units.snob.total
                            HC = data.available_units.heavy_cavalry.total
                            Spear = data.available_units.spear.total
                            Sword = data.available_units.sword.total
                            Axe = data.available_units.axe.total
                            LC = data.available_units.light_cavalry.total
                            MA = data.available_units.mounted_archer.total
                            Berserker = data.available_units.doppelsoldner.total
                        })
                        if (Snob > 0 && (Spear >= 500 || Sword >= 300 || Axe >= 100 || Archer >= 300 || LC >= 50 || MA >= 50 || HC >= 50 || Berserker >= 30)) {
                            units = {
                                archer: '*',
                                axe: '*',
                                doppelsoldner: '*',
                                heavy_cavalry: '*',
                                light_cavalry: '*',
                                mounted_archer: '*',
                                snob: '1',
                                spear: '*',
                                sword: '*'
                            }
                            if (sent < 3) {
                                if (Snob >= 2 && sent == 0) {
                                    commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                    commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                    sent += 2
                                } else {
                                    commandQueue.addCommand(origin[index], target, date, COMMAND_QUEUE_DATE_TYPES.ARRIVE, units, {}, commandType, false)
                                    sent += 1
                                }
                            }
                        }
                        if (!commandQueue.isRunning()) {
                            commandQueue.start()
                        }
                    }, index * interval)
                })
            }
            unitInfo()
        })
    }
    attackView.commandQueueEnabled = function() {
        return !!commandQueue
    }
    attackView.isInitialized = function() {
        return initialized
    }
    attackView.init = function() {
        for (let i = 0; i < UNIT_SPEED_ORDER.length; i++) {
            INCOMING_UNITS_FILTER[UNIT_SPEED_ORDER[i]] = true
        }
        for (let i in COMMAND_TYPES) {
            COMMAND_TYPES_FILTER[COMMAND_TYPES[i]] = true
        }
        try {
            commandQueue = require('two/commandQueue')
            COMMAND_QUEUE_DATE_TYPES = require('two/commandQueue/types/dates')
        } catch (e) {}
        const defaultFilters = {
            [FILTER_TYPES.COMMAND_TYPES]: angular.copy(COMMAND_TYPES_FILTER),
            [FILTER_TYPES.INCOMING_UNITS]: angular.copy(INCOMING_UNITS_FILTER),
            [FILTER_TYPES.VILLAGE]: false
        }
        initialized = true
        globalInfoModel = modelDataService.getSelectedCharacter().getGlobalInfo()
        filters = Lockr.get(STORAGE_KEYS.FILTERS, defaultFilters, true)
        ready(function() {
            formatFilters()
            $rootScope.$on(eventTypeProvider.COMMAND_INCOMING, onCommandIncomming)
            $rootScope.$on(eventTypeProvider.COMMAND_CANCELLED, onCommandCancelled)
            $rootScope.$on(eventTypeProvider.MAP_SELECTED_VILLAGE, onVillageSwitched)
            $rootScope.$on(eventTypeProvider.VILLAGE_NAME_CHANGED, onVillageNameChanged)
            $rootScope.$on(eventTypeProvider.COMMAND_IGNORED, onCommandIgnored)
            attackView.loadCommands()
        }, ['initial_village'])
    }
    return attackView
})
define('two/attackView/events', [], function () {
    angular.extend(eventTypeProvider, {
        ATTACK_VIEW_FILTERS_CHANGED: 'attack_view_filters_changed',
        ATTACK_VIEW_SORTING_CHANGED: 'attack_view_sorting_changed',
        ATTACK_VIEW_COMMAND_CANCELLED: 'attack_view_command_cancelled',
        ATTACK_VIEW_COMMAND_IGNORED: 'attack_view_command_ignored',
        ATTACK_VIEW_VILLAGE_RENAMED: 'attack_view_village_renamed',
        ATTACK_VIEW_COMMANDS_LOADED: 'attack_view_commands_loaded'
    })
})

define('two/attackView/ui', [
    'two/ui',
    'two/attackView',
    'two/EventScope',
    'two/utils',
    'two/attackView/types/columns',
    'two/attackView/types/commands',
    'two/attackView/types/filters',
    'two/attackView/unitSpeedOrder',
    'conf/unitTypes',
    'queues/EventQueue',
    'helper/time',
    'battlecat'
], function(
    interfaceOverflow,
    attackView,
    EventScope,
    utils,
    COLUMN_TYPES,
    COMMAND_TYPES,
    FILTER_TYPES,
    UNIT_SPEED_ORDER,
    UNIT_TYPES,
    eventQueue,
    timeHelper,
    $
) {
    let $scope
    let $button
    const nowSeconds = function() {
        return Date.now() / 1000
    }
    const copyTimeModal = function(time) {
        let modalScope = $rootScope.$new()
        modalScope.text = $filter('readableDateFilter')(time * 1000, $rootScope.loc.ale, $rootScope.GAME_TIMEZONE, $rootScope.GAME_TIME_OFFSET, 'HH:mm:ss:sss dd/MM/yyyy')
        modalScope.title = $filter('i18n')('copy', $rootScope.loc.ale, 'attack_view')
        windowManagerService.getModal('!twoverflow_attack_view_show_text_modal', modalScope)
    }
    const removeTroops = function(command) {
        const formatedDate = $filter('readableDateFilter')((command.time_completed - 10) * 1000, $rootScope.loc.ale, $rootScope.GAME_TIMEZONE, $rootScope.GAME_TIME_OFFSET, 'HH:mm:ss:sss dd/MM/yyyy')
        console.log(formatedDate)
        attackView.setCommander(command, formatedDate)
    }
    const killNobleman = function(command) {
        const formatedDate = $filter('readableDateFilter')((command.time_completed - 1) * 1000, $rootScope.loc.ale, $rootScope.GAME_TIMEZONE, $rootScope.GAME_TIME_OFFSET, 'HH:mm:ss:sss dd/MM/yyyy')
        console.log(formatedDate)
        attackView.setQueueSupportCommand(command, formatedDate)
    }
    const killNoblemanBig = function(command) {
        const formatedDate = $filter('readableDateFilter')((command.time_completed - 1) * 1000, $rootScope.loc.ale, $rootScope.GAME_TIMEZONE, $rootScope.GAME_TIME_OFFSET, 'HH:mm:ss:sss dd/MM/yyyy')
        console.log(formatedDate)
        attackView.setQueueSupportBigCommand(command, formatedDate)
    }
    const bunkerVillage = function(command) {
        const formatedDate = $filter('readableDateFilter')((command.time_completed - 20) * 1000, $rootScope.loc.ale, $rootScope.GAME_TIMEZONE, $rootScope.GAME_TIME_OFFSET, 'HH:mm:ss:sss dd/MM/yyyy')
        console.log(formatedDate)
        attackView.setQueueBunkerCommand(command, formatedDate)
    }
    const bunkerVillage5 = function(command) {
        const formatedDate = $filter('readableDateFilter')((command.time_completed - 20) * 1000, $rootScope.loc.ale, $rootScope.GAME_TIMEZONE, $rootScope.GAME_TIME_OFFSET, 'HH:mm:ss:sss dd/MM/yyyy')
        console.log(formatedDate)
        attackView.setQueueBunkerCommand5(command, formatedDate)
    }
    const bunkerVillage10 = function(command) {
        const formatedDate = $filter('readableDateFilter')((command.time_completed - 20) * 1000, $rootScope.loc.ale, $rootScope.GAME_TIMEZONE, $rootScope.GAME_TIME_OFFSET, 'HH:mm:ss:sss dd/MM/yyyy')
        console.log(formatedDate)
        attackView.setQueueBunkerCommand10(command, formatedDate)
    }
    const bunkerVillage20 = function(command) {
        const formatedDate = $filter('readableDateFilter')((command.time_completed - 20) * 1000, $rootScope.loc.ale, $rootScope.GAME_TIMEZONE, $rootScope.GAME_TIME_OFFSET, 'HH:mm:ss:sss dd/MM/yyyy')
        console.log(formatedDate)
        attackView.setQueueBunkerCommand20(command, formatedDate)
    }
    const conquerBack = function(command) {
        const formatedDate = $filter('readableDateFilter')((command.time_completed + 2) * 1000, $rootScope.loc.ale, $rootScope.GAME_TIMEZONE, $rootScope.GAME_TIME_OFFSET, 'HH:mm:ss:sss dd/MM/yyyy')
        console.log(formatedDate)
        attackView.setQueueConquerBack(command, formatedDate)
    }
    const spyVillage = function(command) {
        var villageId = command.originVillage.id
        var villageName = command.originVillage.name
        var player = modelDataService.getSelectedCharacter()
        var villages = player.getVillageList()
        var interval = 5000
        var interval1 = 7000
        var Liczba = 0
        villages.forEach(function(village, index) {
            var scoutingInfo = village.scoutingInfo
            var spies = scoutingInfo.spies
            setTimeout(function() {
                spies.forEach(function(available, index) {
                    if (available.type == 1) {
                        Liczba = Liczba + 1
                        if (Liczba <= 7) {
                            setTimeout(function() {
                                socketService.emit(routeProvider.SCOUTING_SEND_COMMAND, {
                                    startVillage: village.getId(),
                                    targetVillage: villageId,
                                    spys: 1,
                                    type: 'units'
                                })
                            }, index * interval * Math.random())
                            utils.emitNotif('success', 'Szpieg nr ' + Liczba + ' wysłany na ' + villageName)
                        }
                    }
                })
            }, index * interval1 * Math.random())
        })
    }
    const withdrawArmy = function(command) {
        const formatedDate = $filter('readableDateFilter')((command.time_completed - 10) * 1000, $rootScope.loc.ale, $rootScope.GAME_TIMEZONE, $rootScope.GAME_TIME_OFFSET, 'HH:mm:ss:sss dd/MM/yyyy')
        console.log(formatedDate)
        attackView.withdrawArmy(command, formatedDate)
    }
    const switchWindowSize = function() {
        let $window = $('#two-attack-view').parent()
        let $wrapper = $('#wrapper')
        $window.toggleClass('fullsize')
        $wrapper.toggleClass('window-fullsize')
    }
    const updateVisibileCommands = function() {
        const offset = $scope.pagination.offset
        const limit = $scope.pagination.limit
        $scope.visibleCommands = $scope.commands.slice(offset, offset + limit)
        $scope.pagination.count = $scope.commands.length
    }
    const checkCommands = function() {
        const now = Date.now()
        for (let i = 0; i < $scope.commands.length; i++) {
            if ($scope.commands[i].model.percent(now) === 100) {
                $scope.commands.splice(i, 1)
            }
        }
        updateVisibileCommands()
    }
    // scope functions
    const toggleFilter = function(type, _filter) {
        attackView.toggleFilter(type, _filter)
        $scope.filters = attackView.getFilters()
    }
    const toggleSorting = function(column) {
        attackView.toggleSorting(column)
        $scope.sorting = attackView.getSortings()
    }
    const eventHandlers = {
        updateCommands: function() {
            $scope.commands = attackView.getCommands()
        },
        onVillageSwitched: function() {
            $scope.selectedVillageId = modelDataService.getSelectedVillage().getId()
        }
    }
    const init = function() {
        $button = interfaceOverflow.addMenuButton('Strażnik', 30, $filter('i18n')('description', $rootScope.loc.ale, 'attack_view'))
        $button.addEventListener('click', buildWindow)
        interfaceOverflow.addTemplate('twoverflow_attack_view_main', `___attack_view_html_main`)
        interfaceOverflow.addTemplate('twoverflow_attack_view_show_text_modal', `___attack_view_html_modal-show-text`)
        interfaceOverflow.addStyle('___attack_view_css_style')
    }
    const buildWindow = function() {
        $scope = $rootScope.$new()
        $scope.commandQueueEnabled = attackView.commandQueueEnabled()
        $scope.commands = attackView.getCommands()
        $scope.selectedVillageId = modelDataService.getSelectedVillage().getId()
        $scope.filters = attackView.getFilters()
        $scope.sorting = attackView.getSortings()
        $scope.UNIT_TYPES = UNIT_TYPES
        $scope.FILTER_TYPES = FILTER_TYPES
        $scope.COMMAND_TYPES = COMMAND_TYPES
        $scope.UNIT_SPEED_ORDER = UNIT_SPEED_ORDER
        $scope.COLUMN_TYPES = COLUMN_TYPES
        $scope.pagination = {
            count: $scope.commands.length,
            offset: 0,
            loader: updateVisibileCommands,
            limit: storageService.getPaginationLimit()
        }
        // functions
        $scope.openCharacterProfile = windowDisplayService.openCharacterProfile
        $scope.openVillageInfo = windowDisplayService.openVillageInfo
        $scope.jumpToVillage = mapService.jumpToVillage
        $scope.now = nowSeconds
        $scope.copyTimeModal = copyTimeModal
        $scope.removeTroops = removeTroops
        $scope.conquerBack = conquerBack
        $scope.killNobleman = killNobleman
        $scope.killNoblemanBig = killNoblemanBig
        $scope.bunkerVillage = bunkerVillage
        $scope.bunkerVillage5k = bunkerVillage5
        $scope.bunkerVillage10k = bunkerVillage10
        $scope.bunkerVillage20k = bunkerVillage20
        $scope.withdrawArmy = withdrawArmy
        $scope.spyVillage = spyVillage
        $scope.switchWindowSize = switchWindowSize
        $scope.toggleFilter = toggleFilter
        $scope.toggleSorting = toggleSorting
        updateVisibileCommands()
        let eventScope = new EventScope('twoverflow_queue_window', function onWindowClose() {
            timeHelper.timer.remove(checkCommands)
        })
        eventScope.register(eventTypeProvider.MAP_SELECTED_VILLAGE, eventHandlers.onVillageSwitched, true)
        eventScope.register(eventTypeProvider.ATTACK_VIEW_COMMANDS_LOADED, eventHandlers.updateCommands)
        eventScope.register(eventTypeProvider.ATTACK_VIEW_COMMAND_CANCELLED, eventHandlers.updateCommands)
        eventScope.register(eventTypeProvider.ATTACK_VIEW_COMMAND_IGNORED, eventHandlers.updateCommands)
        eventScope.register(eventTypeProvider.ATTACK_VIEW_VILLAGE_RENAMED, eventHandlers.updateCommands)
        windowManagerService.getScreenWithInjectedScope('!twoverflow_attack_view_main', $scope)
        timeHelper.timer.add(checkCommands)
    }
    return init
})
define('two/attackView/types/columns', [], function () {
    return {
        'ORIGIN_VILLAGE': 'origin_village_name',
        'COMMAND_TYPE': 'command_type',
        'TARGET_VILLAGE': 'target_village_name',
        'TIME_COMPLETED': 'time_completed',
        'ORIGIN_CHARACTER': 'origin_character_name'
    }
})

define('two/attackView/types/commands', [], function () {
    return {
        'ATTACK': 'attack',
        'SUPPORT': 'support',
        'RELOCATE': 'relocate'
    }
})

define('two/attackView/types/filters', [], function () {
    return {
        'COMMAND_TYPES' : 'command_types',
        'VILLAGE' : 'village',
        'INCOMING_UNITS' : 'incoming_units'
    }
})

define('two/attackView/unitSpeedOrder', [
    'conf/unitTypes'
], function (
    UNIT_TYPES
) {
    return [
        UNIT_TYPES.LIGHT_CAVALRY,
        UNIT_TYPES.HEAVY_CAVALRY,
        UNIT_TYPES.AXE,
        UNIT_TYPES.SWORD,
        UNIT_TYPES.RAM,
        UNIT_TYPES.SNOB,
        UNIT_TYPES.TREBUCHET
    ]
})

require([
    'two/ready',
    'two/attackView',
    'two/attackView/ui',
    'two/attackView/events'
], function (
    ready,
    attackView,
    attackViewInterface
) {
    if (attackView.isInitialized()) {
        return false
    }

    ready(function () {
        attackView.init()
        attackViewInterface()
    })
})

define('two/autoCollector', [
    'queues/EventQueue'
], function(
    eventQueue
) {
    let initialized = false
    let running = false
    let recall = true
    let nextUpdateId = 0
    const startJob = function(job) {
        socketService.emit(routeProvider.RESOURCE_DEPOSIT_START_JOB, {
            job_id: job.id
        })
    }
    const finalizeJob = function(job) {
        socketService.emit(routeProvider.RESOURCE_DEPOSIT_COLLECT, {
            job_id: job.id,
            village_id: modelDataService.getSelectedVillage().getId()
        })
    }
    const updateDepositInfo = function() {
        socketService.emit(routeProvider.RESOURCE_DEPOSIT_GET_INFO, {})
    }
    const analyse = function() {
        if (!running) {
            return false
        }
        let data = modelDataService.getSelectedCharacter().getResourceDeposit()
        if (!data) {
            return false
        }
        if (data.getCurrentJob()) {
            return false
        }
        let collectible = data.getCollectibleJobs()
        if (collectible) {
            return finalizeJob(collectible.shift())
        }
        let ready = data.getReadyJobs()
        if (ready) {
            return startJob(getFastestJob(ready))
        }
    }
    const getFastestJob = function(jobs) {
        const sorted = jobs.sort(function(a, b) {
            return a.duration - b.duration
        })
        return sorted[0]
    }
    const rerollUpdater = function(data) {
        const timeLeft = data.time_next_reset * 1000 - Date.now() + 1000
        clearTimeout(nextUpdateId)
        nextUpdateId = setTimeout(updateDepositInfo, timeLeft)
    }
    let autoCollector = {}
    autoCollector.init = function() {
        initialized = true
        $rootScope.$on(eventTypeProvider.RESOURCE_DEPOSIT_JOB_COLLECTIBLE, function() {
            if (!recall || !running) {
                return false
            }
            recall = false
            setTimeout(function() {
                recall = true
                analyse()
            }, 1500)
        })
        $rootScope.$on(eventTypeProvider.RESOURCE_DEPOSIT_JOBS_REROLLED, analyse)
        $rootScope.$on(eventTypeProvider.RESOURCE_DEPOSIT_JOB_COLLECTED, analyse)
        $rootScope.$on(eventTypeProvider.RESOURCE_DEPOSIT_INFO, function(event, data) {
            analyse()
            rerollUpdater(data)
        })
    }
    autoCollector.start = function() {
        eventQueue.trigger(eventTypeProvider.AUTO_COLLECTOR_STARTED)
        running = true
        analyse()
    }
    autoCollector.stop = function() {
        eventQueue.trigger(eventTypeProvider.AUTO_COLLECTOR_STOPPED)
        running = false
    }
    autoCollector.isRunning = function() {
        return running
    }
    autoCollector.isInitialized = function() {
        return initialized
    }
    return autoCollector
})
define('two/autoCollector/events', [], function () {
    angular.extend(eventTypeProvider, {
        AUTO_COLLECTOR_STARTED: 'auto_collector_started',
        AUTO_COLLECTOR_STOPPED: 'auto_collector_stopped',
        AUTO_COLLECTOR_SECONDVILLAGE_STARTED: 'auto_collector_secondvillage_started',
        AUTO_COLLECTOR_SECONDVILLAGE_STOPPED: 'auto_collector_secondvillage_stopped'
    })
})
define('two/autoCollector/ui', [
    'two/ui',
    'two/autoCollector',
    'two/utils',
    'queues/EventQueue'
], function(
    interfaceOverflow,
    autoCollector,
    utils,
    eventQueue
) {
    let $button
    const init = function() {
        $button = interfaceOverflow.addMenuButton2('Kolekcjoner', 40, $filter('i18n')('description', $rootScope.loc.ale, 'auto_collector'))
        $button.addEventListener('click', function() {
            if (autoCollector.isRunning()) {
                autoCollector.stop()
                autoCollector.secondVillage.stop()
                utils.notif('success', $filter('i18n')('deactivated', $rootScope.loc.ale, 'auto_collector'))
            } else {
                autoCollector.start()
                autoCollector.secondVillage.start()
                utils.notif('success', $filter('i18n')('activated', $rootScope.loc.ale, 'auto_collector'))
            }
        })
        eventQueue.register(eventTypeProvider.AUTO_COLLECTOR_STARTED, function() {
            $button.classList.remove('btn-orange')
            $button.classList.add('btn-red')
        })
        eventQueue.register(eventTypeProvider.AUTO_COLLECTOR_STOPPED, function() {
            $button.classList.remove('btn-red')
            $button.classList.add('btn-orange')
        })
        if (autoCollector.isRunning()) {
            eventQueue.trigger(eventTypeProvider.AUTO_COLLECTOR_STARTED)
        }
        return opener
    }
    return init
})
define('two/autoCollector/secondVillage', [
    'two/autoCollector',
    'two/utils',
    'queues/EventQueue',
    'helper/time',
    'models/SecondVillageModel'
], function(
    autoCollector,
    utils,
    eventQueue,
    $timeHelper,
    SecondVillageModel
) {
    let initialized = false
    let running = false
    let allFinished = false
    let secondVillageService = injector.get('secondVillageService')
    const getRunningJob = function(jobs) {
        const now = Date.now()
        for (let id in jobs) {
            if (jobs[id].time_started && jobs[id].time_completed) {
                if (now < $timeHelper.server2ClientTime(jobs[id].time_completed)) {
                    return jobs[id]
                }
            }
        }
        return false
    }
    const getCollectibleJob = function(jobs) {
        const now = Date.now()
        for (let id in jobs) {
            if (jobs[id].time_started && jobs[id].time_completed) {
                if ((now >= $timeHelper.server2ClientTime(jobs[id].time_completed)) && !jobs[id].collected) {
                    return id
                }
            }
        }
        return false
    }
    const finalizeJob = function(jobId) {
        socketService.emit(routeProvider.SECOND_VILLAGE_COLLECT_JOB_REWARD, {
            village_id: modelDataService.getSelectedVillage().getId(),
            job_id: jobId
        })
    }
    const startJob = function(job, callback) {
        socketService.emit(routeProvider.SECOND_VILLAGE_START_JOB, {
            village_id: modelDataService.getSelectedVillage().getId(),
            job_id: job.id
        }, callback)
    }
    const getFirstJob = function(jobs) {
        let jobId = false
        utils.each(jobs, function(id) {
            jobId = id
            return false
        })
        return jobId
    }
    const updateSecondVillageInfo = function(callback) {
        socketService.emit(routeProvider.SECOND_VILLAGE_GET_INFO, {}, function(data) {
            if (secondVillageService.hasFinishedLastJob(data.jobs)) {
                allFinished = true
                socketService.emit(routeProvider.SECOND_VILLAGE_FINISH_VILLAGE)
                secondVillageCollector.stop()
            } else {
                let model = new SecondVillageModel(data)
                modelDataService.getSelectedCharacter().setSecondVillage(model)
                callback()
            }
        })
    }
    const updateAndAnalyse = function() {
        updateSecondVillageInfo(analyse)
    }
    const analyse = function() {
        let secondVillage = modelDataService.getSelectedCharacter().getSecondVillage()
        if (!running || !secondVillage || !secondVillage.isAvailable()) {
            return false
        }
        const current = getRunningJob(secondVillage.data.jobs)
        if (current) {
            const completed = $timeHelper.server2ClientTime(current.time_completed)
            const nextRun = completed - Date.now() + 1000
            setTimeout(updateAndAnalyse, nextRun)
            return false
        }
        const collectible = getCollectibleJob(secondVillage.data.jobs)
        if (collectible) {
            return finalizeJob(collectible)
        }
        const currentDayJobs = secondVillageService.getCurrentDayJobs(secondVillage.data.jobs, secondVillage.data.day)
        const collectedJobs = secondVillageService.getCollectedJobs(secondVillage.data.jobs)
        const resources = modelDataService.getSelectedVillage().getResources().getResources()
        const availableJobs = secondVillageService.getAvailableJobs(currentDayJobs, collectedJobs, resources, [])
        if (availableJobs) {
            const firstJob = getFirstJob(availableJobs)
            startJob(firstJob, function() {
                const job = availableJobs[firstJob]
                if (job) {
                    setTimeout(updateAndAnalyse, (job.duration * 1000) + 1000)
                } else {
                    setTimeout(updateAndAnalyse, 60 * 1000)
                }
            })
        }
    }
    let secondVillageCollector = {}
    secondVillageCollector.start = function() {
        if (!initialized || allFinished) {
            return false
        }
        eventQueue.trigger(eventTypeProvider.AUTO_COLLECTOR_SECONDVILLAGE_STARTED)
        running = true
        updateAndAnalyse()
    }
    secondVillageCollector.stop = function() {
        if (!initialized) {
            return false
        }
        eventQueue.trigger(eventTypeProvider.AUTO_COLLECTOR_SECONDVILLAGE_STOPPED)
        running = false
    }
    secondVillageCollector.isRunning = function() {
        return running
    }
    secondVillageCollector.isInitialized = function() {
        return initialized
    }
    secondVillageCollector.init = function() {
        if (!secondVillageService.isFeatureActive()) {
            return false
        }
        initialized = true
        socketService.emit(routeProvider.SECOND_VILLAGE_GET_INFO, {}, function(data) {
            if (secondVillageService.hasFinishedLastJob(data.jobs)) {
                allFinished = true
                socketService.emit(routeProvider.SECOND_VILLAGE_FINISH_VILLAGE)
            } else {
                $rootScope.$on(eventTypeProvider.SECOND_VILLAGE_VILLAGE_CREATED, updateAndAnalyse)
                $rootScope.$on(eventTypeProvider.SECOND_VILLAGE_JOB_COLLECTED, updateAndAnalyse)
            }
        })
    }
    autoCollector.secondVillage = secondVillageCollector
})
require([
    'two/ready',
    'two/autoCollector',
    'two/autoCollector/ui',
    'Lockr',
    'queues/EventQueue',
    'two/autoCollector/secondVillage',
    'two/autoCollector/events'
], function(
    ready,
    autoCollector,
    autoCollectorInterface,
    Lockr,
    eventQueue
) {
    const STORAGE_KEYS = {
        ACTIVE: 'auto_collector_active'
    }
    if (autoCollector.isInitialized()) {
        return false
    }
    ready(function() {
        autoCollector.init()
        autoCollector.secondVillage.init()
        autoCollectorInterface()
        ready(function() {
            if (Lockr.get(STORAGE_KEYS.ACTIVE, false, true)) {
                autoCollector.start()
                autoCollector.secondVillage.start()
            }
            eventQueue.register(eventTypeProvider.AUTO_COLLECTOR_STARTED, function() {
                Lockr.set(STORAGE_KEYS.ACTIVE, true)
            })
            eventQueue.register(eventTypeProvider.AUTO_COLLECTOR_STOPPED, function() {
                Lockr.set(STORAGE_KEYS.ACTIVE, false)
            })
        }, ['initial_village'])
    })
})
define('two/autoFoundator', [
    'two/utils',
    'queues/EventQueue'
], function(
    utils,
    eventQueue
) {
    let initialized = false
    let running = false
    let interval = 3000
    const donateTribe = function() {
        if (running == true) {
            let player = modelDataService.getSelectedCharacter()
            let villages = player.getVillageList()
            villages.forEach(function(village, index) {
                var resources = village.getResources()
                var computed = resources.getComputed()
                var wood = computed.wood
                var clay = computed.clay
                var iron = computed.iron
                var villageWood = wood.currentStock
                var villageClay = clay.currentStock
                var villageIron = iron.currentStock
                var woodCalculated = Math.round(villageWood * 0.02) + 1
                var ironCalculated = Math.round(villageIron * 0.02) + 1
                var clayCalculated = Math.round(villageClay * 0.02) + 1
                setTimeout(function() {
                    socketService.emit(routeProvider.TRIBE_SKILL_DONATE, {
                        village_id: village.getId(),
                        crowns: 0,
                        resources: {
                            wood: woodCalculated,
                            clay: clayCalculated,
                            iron: ironCalculated
                        }
                    })
                }, index * Math.random() * interval)
                console.log('Wykonano darowizne na plemię: ' + village.getName() + ' drewno: ' + woodCalculated + ', glina: ' + clayCalculated + ', żelazo: ' + ironCalculated)
            })
        }
    }
    let autoFoundator = {}
    autoFoundator.init = function() {
        initialized = true
    }
    autoFoundator.start = function() {
        eventQueue.trigger(eventTypeProvider.AUTO_FOUNDATOR_STARTED)
        running = true
        donateTribe()
        setInterval(function() {
            donateTribe()
        }, 6000)
    }
    autoFoundator.stop = function() {
        eventQueue.trigger(eventTypeProvider.AUTO_FOUNDATOR_STOPPED)
        running = false
    }
    autoFoundator.isRunning = function() {
        return running
    }
    autoFoundator.isInitialized = function() {
        return initialized
    }
    return autoFoundator
})
define('two/autoFoundator/events', [], function () {
    angular.extend(eventTypeProvider, {
        AUTO_FOUNDATOR_STARTED: 'auto_foundator_started',
        AUTO_FOUNDATOR_STOPPED: 'auto_foundator_stopped'
    })
})

define('two/autoFoundator/ui', [
    'two/ui',
    'two/autoFoundator',
    'two/utils',
    'queues/EventQueue'
], function (
    interfaceOverflow,
    autoFoundator,
    utils,
    eventQueue
) {
    let $button

    const init = function () {
        interfaceOverflow.addDivisor3(71)
        $button = interfaceOverflow.addMenuButton3('Fundator', 70, $filter('i18n')('description', $rootScope.loc.ale, 'auto_foundator'))

        $button.addEventListener('click', function () {
            if (autoFoundator.isRunning()) {
                autoFoundator.stop()
                utils.notif('success', $filter('i18n')('deactivated', $rootScope.loc.ale, 'auto_foundator'))
            } else {
                autoFoundator.start()
                utils.notif('success', $filter('i18n')('activated', $rootScope.loc.ale, 'auto_foundator'))
            }
        })

        eventQueue.register(eventTypeProvider.AUTO_FOUNDATOR_STARTED, function () {
            $button.classList.remove('btn-orange')
            $button.classList.add('btn-red')
        })

        eventQueue.register(eventTypeProvider.AUTO_FOUNDATOR_STOPPED, function () {
            $button.classList.remove('btn-red')
            $button.classList.add('btn-orange')
        })

        if (autoFoundator.isRunning()) {
            eventQueue.trigger(eventTypeProvider.AUTO_FOUNDATOR_STARTED)
        }

        return opener
    }

    return init
})
require([
    'two/ready',
    'two/autoFoundator',
    'two/autoFoundator/ui',
    'Lockr',
    'queues/EventQueue',
    'two/autoFoundator/events'
], function(
    ready,
    autoFoundator,
    autoFoundatorInterface,
    Lockr,
    eventQueue
) {
    const STORAGE_KEYS = {
        ACTIVE: 'auto_foundator_active'
    }
	
    if (autoFoundator.isInitialized()) {
        return false
    }
    ready(function() {
        autoFoundator.init()
        autoFoundatorInterface()

        ready(function() {
            if (Lockr.get(STORAGE_KEYS.ACTIVE, false, true)) {
                autoFoundator.start()
            }

            eventQueue.register(eventTypeProvider.AUTO_FOUNDATOR_STARTED, function() {
                Lockr.set(STORAGE_KEYS.ACTIVE, true)
            })

            eventQueue.register(eventTypeProvider.AUTO_FOUNDATOR_STOPPED, function() {
                Lockr.set(STORAGE_KEYS.ACTIVE, false)
            })
        }, ['initial_village'])
    })
})
define('two/autoHealer', [
    'two/utils',
    'queues/EventQueue'
], function(
    utils,
    eventQueue
) {
    let initialized = false
    let running = false
    let interval = 5000
    let interval1 = 3000
    const heal = function() {
        if (running == true) {
            console.log('Medyk uruchomiony')
            let player = modelDataService.getSelectedCharacter()
            let villages = player.getVillageList()
            villages.forEach(function(village, index) {
                let hospital = village.hospital
                let patients = hospital.patients
                let healed = patients.healed
                if (healed.length == 0) {
                    console.log('W wiosce ' + village.getName() + ' brak jednostek do wyleczenia')
                } else {
                    setTimeout(function() {
                        healed.forEach(function(heal, index) {
                            setTimeout(function() {
                                socketService.emit(routeProvider.HOSPITAL_RELEASE_PATIENT, {
                                    village_id: village.getId(),
                                    patient_id: heal.id
                                })
                            }, index * interval1)
                            console.log('W wiosce: ' + village.getName() + ' wyleczono: ' + healed.units)
                        })
                    }, index * interval)
                }
            })
        }
    }
    let autoHealer = {}
    autoHealer.init = function() {
        initialized = true
    }
    autoHealer.start = function() {
        eventQueue.trigger(eventTypeProvider.AUTO_HEALER_STARTED)
        running = true
        heal()
        setInterval(function() {
            heal()
        }, 3600000)
    }
    autoHealer.stop = function() {
        eventQueue.trigger(eventTypeProvider.AUTO_HEALER_STOPPED)
        running = false
    }
    autoHealer.isRunning = function() {
        return running
    }
    autoHealer.isInitialized = function() {
        return initialized
    }
    return autoHealer
})
define('two/autoHealer/events', [], function () {
    angular.extend(eventTypeProvider, {
        AUTO_HEALER_STARTED: 'auto_healer_started',
        AUTO_HEALER_STOPPED: 'auto_healer_stopped'
    })
})
define('two/autoHealer/ui', [
    'two/ui',
    'two/autoHealer',
    'two/utils',
    'queues/EventQueue'
], function(
    interfaceOverflow,
    autoHealer,
    utils,
    eventQueue
) {
    let $button
    const init = function() {
        $button = interfaceOverflow.addMenuButton('Medyk', 120, $filter('i18n')('description', $rootScope.loc.ale, 'auto_healer'))
        $button.addEventListener('click', function() {
            if (autoHealer.isRunning()) {
                autoHealer.stop()
                utils.notif('success', $filter('i18n')('deactivated', $rootScope.loc.ale, 'auto_healer'))
            } else {
                autoHealer.start()
                utils.notif('success', $filter('i18n')('activated', $rootScope.loc.ale, 'auto_healer'))
            }
        })
        eventQueue.register(eventTypeProvider.AUTO_HEALER_STARTED, function() {
            $button.classList.remove('btn-orange')
            $button.classList.add('btn-red')
        })
        eventQueue.register(eventTypeProvider.AUTO_HEALER_STOPPED, function() {
            $button.classList.remove('btn-red')
            $button.classList.add('btn-orange')
        })
        if (autoHealer.isRunning()) {
            eventQueue.trigger(eventTypeProvider.AUTO_HEALER_STARTED)
        }
        return opener
    }
    return init
})
require([
    'two/ready',
    'two/autoHealer',
    'two/autoHealer/ui',
    'Lockr',
    'queues/EventQueue',
    'two/autoHealer/events'
], function(
    ready,
    autoHealer,
    autoHealerInterface,
    Lockr,
    eventQueue
) {
    const STORAGE_KEYS = {
        ACTIVE: 'auto_healer_active'
    }
    if (autoHealer.isInitialized()) {
        return false
    }
    ready(function() {
        autoHealer.init()
        autoHealerInterface()
        ready(function() {
            if (Lockr.get(STORAGE_KEYS.ACTIVE, false, true)) {
                autoHealer.start()
            }
            eventQueue.register(eventTypeProvider.AUTO_HEALER_STARTED, function() {
                Lockr.set(STORAGE_KEYS.ACTIVE, true)
            })
            eventQueue.register(eventTypeProvider.AUTO_HEALER_STOPPED, function() {
                Lockr.set(STORAGE_KEYS.ACTIVE, false)
            })
        }, ['initial_village'])
    })
})
define('two/battleCalculator', [
    'two/Settings',
    'two/battleCalculator/settings',
    'two/battleCalculator/settings/map',
    'two/battleCalculator/settings/updates',
    'two/battleCalculator/types/item',
    'two/battleCalculator/types/level',
    'two/battleCalculator/types/catapult-target',
    'two/battleCalculator/types/order',
    'two/battleCalculator/types/wall',
    'two/battleCalculator/types/church',
    'two/battleCalculator/types/weapon-master',
    'two/battleCalculator/types/iron-walls',
    'two/battleCalculator/types/clinique',
    'two/battleCalculator/types/hospital',
    'two/battleCalculator/types/training',
    'two/ready',
    'queues/EventQueue'
], function(
    Settings,
    SETTINGS,
    SETTINGS_MAP,
    UPDATES,
    B_ITEMS,
    B_ITEMS_LEVELS,
    B_CAT_TARGET,
    T_ORDER_TYPE,
    B_WALLS,
    B_CHURCHES,
    B_SKILL_WEAPON_MASTER_LEVEL,
    B_SKILL_IRON_WALLS_LEVEL,
    B_SKILL_CLINIQUE_LEVEL,
    B_HOSPITAL_LEVEL,
    T_TRAINING_LEVEL,
    ready,
    eventQueue
) {
    let initialized = false
    let running = false
    let settings
    let battleCalculatorSettings
    let presetSelecteds = []
    let presetSelected = null
    // Bashpoints
    let pointsatt = null
    let pointsdef = null
    // Troops
    let woodAmount = null
    let clayAmount = null
    let ironAmount = null
    let foodAmount = null
    let loadAmount = null
    let attInf = null
    let attCav = null
    let attArc = null
    let defInf = null
    let defCav = null
    let defArch = null
    let attackPower = null
    let disciplinePercent = null
    let travelTime = null
    let finalTime = null
    // Battle		
    let spearD = null
    let swordD = null
    let axeD = null
    let archerD = null
    let snobD = null
    let knightD = null
    let ramD = null
    let catapultD = null
    let trebuchetD = null
    let lcD = null
    let maD = null
    let hcD = null
    let berserkerD = null
    let spearD_losses = null
    let swordD_losses = null
    let axeD_losses = null
    let archerD_losses = null
    let snobD_losses = null
    let knightD_losses = null
    let ramD_losses = null
    let catapultD_losses = null
    let trebuchetD_losses = null
    let lcD_losses = null
    let maD_losses = null
    let hcD_losses = null
    let berserkerD_losses = null
    let spearDrevived = null
    let swordDrevived = null
    let axeDrevived = null
    let archerDrevived = null
    let lcDrevived = null
    let maDrevived = null
    let hcDrevived = null
    let spearD_survivorsRound3 = null
    let swordD_survivorsRound3 = null
    let axeD_survivorsRound3 = null
    let archerD_survivorsRound3 = null
    let snobD_survivorsRound3 = null
    let knightD_survivorsRound3 = null
    let ramD_survivorsRound3 = null
    let catapultD_survivorsRound3 = null
    let trebuchetD_survivorsRound3 = null
    let lcD_survivorsRound3 = null
    let maD_survivorsRound3 = null
    let hcD_survivorsRound3 = null
    let berserkerD_survivorsRound3 = null
    let spearA = null
    let swordA = null
    let axeA = null
    let archerA = null
    let snobA = null
    let knightA = null
    let ramA = null
    let catapultA = null
    let trebuchetA = null
    let lcA = null
    let maA = null
    let hcA = null
    let berserkerA = null
    let spearA_losses = null
    let swordA_losses = null
    let axeA_losses = null
    let archerA_losses = null
    let snobA_losses = null
    let knightA_losses = null
    let ramA_losses = null
    let catapultA_losses = null
    let trebuchetA_losses = null
    let lcA_losses = null
    let maA_losses = null
    let hcA_losses = null
    let berserkerA_losses = null
    let spearArevived = null
    let swordArevived = null
    let axeArevived = null
    let archerArevived = null
    let snobArevived = null
    let knightArevived = null
    let ramArevived = null
    let catapultArevived = null
    let trebuchetArevived = null
    let lcArevived = null
    let maArevived = null
    let hcArevived = null
    let berserkerArevived = null
    let spearA_survivorsRound3 = null
    let swordA_survivorsRound3 = null
    let axeA_survivorsRound3 = null
    let archerA_survivorsRound3 = null
    let snobA_survivorsRound3 = null
    let knightA_survivorsRound3 = null
    let ramA_survivorsRound3 = null
    let catapultA_survivorsRound3 = null
    let trebuchetA_survivorsRound3 = null
    let lcA_survivorsRound3 = null
    let maA_survivorsRound3 = null
    let hcA_survivorsRound3 = null
    let berserkerA_survivorsRound3 = null
    let catTarget = null
    let catapulttargetlevel = null
    let afterBattleTargetLevel = null
    let wallAfterPreround = null
    let afterRamAttackPastBattle = null
    let wall = null
    let overalModifierDef = null
    let defenderprovision = null
    let strengthDefenderRound1 = null
    let bashpointsDefender = null
    let lossesprovisionD = null
    let showD = null
    let killratioDefender = null
    let survivedProvisionD = null
    let beds = null
    let overalModifierOff = null
    let attackerprovision = null
    let strengthAttackerRound1 = null
    let bashpointsAttacker = null
    let lossesprovisionA = null
    let showA = null
    let killratioAttacker = null
    let survivedProvisionA = null
    let doubleStrengthBonus = null
    let presetSPEAR = null
    let presetSWORD = null
    let presetAXE = null
    let presetARCHER = null
    let presetLC = null
    let presetMA = null
    let presetHC = null
    let presetRAM = null
    let presetCATAPULT = null
    let presetSNOB = null
    let presetKNIGHT = null
    let presetTREBUCHET = null
    let presetBERSERKER = null
    let villageArcher = null
    let villageAxe = null
    let villageCatapult = null
    let villageBerserker = null
    let villageHC = null
    let villageKnight = null
    let villageLC = null
    let villageMA = null
    let villageRam = null
    let villageSnob = null
    let villageSpear = null
    let villageSword = null
    let villageTrebuchet = null
    let villageUnits = null
    let i = null
    const STORAGE_KEYS = {
        SETTINGS: 'battle_calculator_settings'
    }
    const BATTLE_ITEMS_LEVELS = {
        [B_ITEMS_LEVELS.LEVEL_1]: 'level_1',
        [B_ITEMS_LEVELS.LEVEL_2]: 'level_2',
        [B_ITEMS_LEVELS.LEVEL_3]: 'level_3'
    }
    const BATTLE_ITEMS = {
        [B_ITEMS.HALBERD_OF_GUAN_YU]: 'battle.halberd',
        [B_ITEMS.PARACELSUS_LONGSWORD]: 'battle.longsword',
        [B_ITEMS.THORGARDS_BATTLE_AXE]: 'battle.battleax',
        [B_ITEMS.NIMRODS_LONGBOW]: 'battle.longbow',
        [B_ITEMS.MIESZKOS_LANCE]: 'battle.lance',
        [B_ITEMS.NIMRODS_COMPOSITE_BOW]: 'battle.compositebow',
        [B_ITEMS.BAPTISTES_BANNER]: 'battle.banner',
        [B_ITEMS.CAROLS_MORNING_STAR]: 'battle.star',
        [B_ITEMS.ALETHEIAS_BONFIRE]: 'battle.bonfire',
        [B_ITEMS.VASCOS_SCEPTER]: 'battle.scepter'
    }
    const BATTLE_CAT_TARGET = {
        [B_CAT_TARGET.HEADQUARTER]: 'headquarter',
        [B_CAT_TARGET.WAREHOUSE]: 'warehouse',
        [B_CAT_TARGET.FARM]: 'farm',
        [B_CAT_TARGET.RALLY_POINT]: 'rally_point',
        [B_CAT_TARGET.STATUE]: 'statue',
        [B_CAT_TARGET.WALL]: 'wall',
        [B_CAT_TARGET.TAVERN]: 'tavern',
        [B_CAT_TARGET.BARRACKS]: 'barracks',
        [B_CAT_TARGET.PRECEPTORY]: 'preceptory',
        [B_CAT_TARGET.HOSPITAL]: 'hospital',
        [B_CAT_TARGET.CLAY_PIT]: 'clay_pit',
        [B_CAT_TARGET.IRON_MINE]: 'iron_mine',
        [B_CAT_TARGET.TIMBER_CAMP]: 'timber_camp',
        [B_CAT_TARGET.CHAPEL]: 'chapel',
        [B_CAT_TARGET.CHURCH]: 'church',
        [B_CAT_TARGET.MARKET]: 'market',
        [B_CAT_TARGET.ACADEMY]: 'academy'
    }
    const BATTLE_CHURCHES = {
        [B_CHURCHES.NO_CHURCH]: 'without',
        [B_CHURCHES.LEVEL_1]: 'level_1',
        [B_CHURCHES.LEVEL_2]: 'level_2',
        [B_CHURCHES.LEVEL_3]: 'level_3'
    }
    const BATTLE_WALLS = {
        [B_WALLS.NO_WALL]: 'without',
        [B_WALLS.LEVEL_1]: 'level_1',
        [B_WALLS.LEVEL_2]: 'level_2',
        [B_WALLS.LEVEL_3]: 'level_3',
        [B_WALLS.LEVEL_4]: 'level_4',
        [B_WALLS.LEVEL_5]: 'level_5',
        [B_WALLS.LEVEL_6]: 'level_6',
        [B_WALLS.LEVEL_7]: 'level_7',
        [B_WALLS.LEVEL_8]: 'level_8',
        [B_WALLS.LEVEL_9]: 'level_9',
        [B_WALLS.LEVEL_10]: 'level_10',
        [B_WALLS.LEVEL_11]: 'level_11',
        [B_WALLS.LEVEL_12]: 'level_12',
        [B_WALLS.LEVEL_13]: 'level_13',
        [B_WALLS.LEVEL_14]: 'level_14',
        [B_WALLS.LEVEL_15]: 'level_15',
        [B_WALLS.LEVEL_16]: 'level_16',
        [B_WALLS.LEVEL_17]: 'level_17',
        [B_WALLS.LEVEL_18]: 'level_18',
        [B_WALLS.LEVEL_19]: 'level_19',
        [B_WALLS.LEVEL_20]: 'level_20'
    }
    const BATTLE_SKILL_WEAPON_MASTER_LEVEL = {
        [B_SKILL_WEAPON_MASTER_LEVEL.LEVEL_1]: 'level_1',
        [B_SKILL_WEAPON_MASTER_LEVEL.LEVEL_2]: 'level_2',
        [B_SKILL_WEAPON_MASTER_LEVEL.LEVEL_3]: 'level_3',
        [B_SKILL_WEAPON_MASTER_LEVEL.LEVEL_4]: 'level_4',
        [B_SKILL_WEAPON_MASTER_LEVEL.LEVEL_5]: 'level_5'
    }
    const BATTLE_SKILL_IRON_WALLS_LEVEL = {
        [B_SKILL_IRON_WALLS_LEVEL.LEVEL_1]: 'level_1',
        [B_SKILL_IRON_WALLS_LEVEL.LEVEL_2]: 'level_2',
        [B_SKILL_IRON_WALLS_LEVEL.LEVEL_3]: 'level_3',
        [B_SKILL_IRON_WALLS_LEVEL.LEVEL_4]: 'level_4',
        [B_SKILL_IRON_WALLS_LEVEL.LEVEL_5]: 'level_5'
    }
    const BATTLE_SKILL_CLINIQUE_LEVEL = {
        [B_SKILL_CLINIQUE_LEVEL.LEVEL_1]: 'level_1',
        [B_SKILL_CLINIQUE_LEVEL.LEVEL_2]: 'level_2',
        [B_SKILL_CLINIQUE_LEVEL.LEVEL_3]: 'level_3',
        [B_SKILL_CLINIQUE_LEVEL.LEVEL_4]: 'level_4',
        [B_SKILL_CLINIQUE_LEVEL.LEVEL_5]: 'level_5',
        [B_SKILL_CLINIQUE_LEVEL.LEVEL_6]: 'level_6',
        [B_SKILL_CLINIQUE_LEVEL.LEVEL_7]: 'level_7',
        [B_SKILL_CLINIQUE_LEVEL.LEVEL_8]: 'level_8',
        [B_SKILL_CLINIQUE_LEVEL.LEVEL_9]: 'level_9',
        [B_SKILL_CLINIQUE_LEVEL.LEVEL_10]: 'level_10'
    }
    const BATTLE_HOSPITAL_LEVEL = {
        [B_HOSPITAL_LEVEL.LEVEL_1]: 'level_1',
        [B_HOSPITAL_LEVEL.LEVEL_2]: 'level_2',
        [B_HOSPITAL_LEVEL.LEVEL_3]: 'level_3',
        [B_HOSPITAL_LEVEL.LEVEL_4]: 'level_4',
        [B_HOSPITAL_LEVEL.LEVEL_5]: 'level_5',
        [B_HOSPITAL_LEVEL.LEVEL_6]: 'level_6',
        [B_HOSPITAL_LEVEL.LEVEL_7]: 'level_7',
        [B_HOSPITAL_LEVEL.LEVEL_8]: 'level_8',
        [B_HOSPITAL_LEVEL.LEVEL_9]: 'level_9',
        [B_HOSPITAL_LEVEL.LEVEL_10]: 'level_10'
    }
    console.log(BATTLE_HOSPITAL_LEVEL, BATTLE_SKILL_CLINIQUE_LEVEL, BATTLE_SKILL_IRON_WALLS_LEVEL, BATTLE_SKILL_WEAPON_MASTER_LEVEL, BATTLE_WALLS, BATTLE_CHURCHES, BATTLE_ITEMS_LEVELS, BATTLE_ITEMS, BATTLE_CAT_TARGET)
    const updatePresets = function() {
        presetSelecteds = []
        const allPresets = modelDataService.getPresetList().getPresets()
        const presetsSelectedByTheUser = battleCalculatorSettings[SETTINGS.PRESET]
        presetSelecteds.push(allPresets[presetsSelectedByTheUser])
    }
    const battleCalculator = {}
    battleCalculator.init = function() {
        initialized = true
        settings = new Settings({
            settingsMap: SETTINGS_MAP,
            storageKey: STORAGE_KEYS.SETTINGS
        })
        settings.onChange(function(changes, updates) {
            battleCalculatorSettings = settings.getAll()
            if (updates[UPDATES.PRESETS]) {
                updatePresets()
            }
        })
        battleCalculatorSettings = settings.getAll()
        console.log('battleCalculator settings', battleCalculatorSettings)
        ready(function() {
            updatePresets()
        }, 'presets')
        $rootScope.$on(eventTypeProvider.ARMY_PRESET_UPDATE, updatePresets)
        $rootScope.$on(eventTypeProvider.ARMY_PRESET_DELETED, updatePresets)
    }
    battleCalculator.getPresetUnits = function() {
        presetSelected = battleCalculatorSettings[SETTINGS.PRESET]
        socketService.emit(routeProvider.GET_PRESETS, {}, function(data) {
            for (i = 0; i < data.presets.length; i++) {
                if (data.presets[i].id == presetSelected) {
                    presetSPEAR = data.presets[i].units.spear
                    presetSWORD = data.presets[i].units.sword
                    presetAXE = data.presets[i].units.axe
                    presetARCHER = data.presets[i].units.archer
                    presetLC = data.presets[i].units.light_cavalry
                    presetMA = data.presets[i].units.mounted_archer
                    presetHC = data.presets[i].units.heavy_cavalry
                    presetRAM = data.presets[i].units.ram
                    presetCATAPULT = data.presets[i].units.catapult
                    presetSNOB = data.presets[i].units.snob
                    presetKNIGHT = data.presets[i].units.knight
                    presetTREBUCHET = data.presets[i].units.trebuchet
                    presetBERSERKER = data.presets[i].units.doppelsoldner
                }
            }
        })
    }
    battleCalculator.getVillageUnits = function() {
        villageUnits = battleCalculatorSettings[SETTINGS.BATTLE_VILLAGE_ID]
        socketService.emit(routeProvider.VILLAGE_UNIT_INFO, {
            village_id: villageUnits
        }, function(data) {
            villageAxe = data.available_units.axe.total
            villageArcher = data.available_units.archer.total
            villageCatapult = data.available_units.catapult.total
            villageBerserker = data.available_units.doppelsoldner.total
            villageHC = data.available_units.heavy_cavalry.total
            villageKnight = data.available_units.knight.total
            villageLC = data.available_units.light_cavalry.total
            villageMA = data.available_units.mounted_archer.total
            villageRam = data.available_units.ram.total
            villageSnob = data.available_units.snob.total
            villageSpear = data.available_units.spear.total
            villageSword = data.available_units.sword.total
            villageTrebuchet = data.available_units.trebuchet.total
        })
    }
    battleCalculator.calculateB = function() {
        const spear = battleCalculatorSettings[SETTINGS.BASHPOINTS_SPEAR]
        const sword = battleCalculatorSettings[SETTINGS.BASHPOINTS_SWORD]
        const axe = battleCalculatorSettings[SETTINGS.BASHPOINTS_AXE]
        const archer = battleCalculatorSettings[SETTINGS.BASHPOINTS_ARCHER]
        const lc = battleCalculatorSettings[SETTINGS.BASHPOINTS_LC]
        const ma = battleCalculatorSettings[SETTINGS.BASHPOINTS_MA]
        const hc = battleCalculatorSettings[SETTINGS.BASHPOINTS_HC]
        const ram = battleCalculatorSettings[SETTINGS.BASHPOINTS_RAM]
        const catapult = battleCalculatorSettings[SETTINGS.BASHPOINTS_CATAPULT]
        const berserker = battleCalculatorSettings[SETTINGS.BASHPOINTS_DOPPELSOLDNER]
        const trebuchet = battleCalculatorSettings[SETTINGS.BASHPOINTS_TREBUCHET]
        const snob = battleCalculatorSettings[SETTINGS.BASHPOINTS_SNOB]
        const knight = battleCalculatorSettings[SETTINGS.BASHPOINTS_KNIGHT]
        var pointsAttack = [1, 2, 4, 2, 13, 12, 15, 8, 10, 20, 200, 0, 25]
        var pointsDeff = [4, 5, 1, 5, 5, 6, 23, 4, 12, 40, 200, 25, 10]
        pointsatt = spear * pointsAttack[0] + sword * pointsAttack[1] + axe * pointsAttack[2] + archer * pointsAttack[3] + lc * pointsAttack[4] + ma * pointsAttack[5] + hc * pointsAttack[6] + ram * pointsAttack[7] + catapult * pointsAttack[8] + knight * pointsAttack[9] + snob * pointsAttack[10] + trebuchet * pointsAttack[11] + berserker * pointsAttack[12]
        pointsdef = spear * pointsDeff[0] + sword * pointsDeff[1] + axe * pointsDeff[2] + archer * pointsDeff[3] + lc * pointsDeff[4] + ma * pointsDeff[5] + hc * pointsDeff[6] + ram * pointsDeff[7] + catapult * pointsDeff[8] + knight * pointsDeff[9] + snob * pointsDeff[10] + trebuchet * pointsDeff[11] + berserker * pointsDeff[12]
    }
    battleCalculator.simulate = function() {
        var pointsAttack = [1, 2, 4, 2, 13, 12, 15, 8, 10, 20, 200, 0, 25]
        var pointsDeff = [4, 5, 1, 5, 5, 6, 23, 4, 12, 40, 200, 25, 10]
        var def_inf = [25, 55, 10, 10, 30, 40, 200, 20, 100, 250, 100, 200, 100]
        var def_kav = [45, 5, 5, 30, 40, 30, 160, 50, 50, 400, 50, 250, 100]
        var def_arc = [10, 30, 10, 60, 30, 50, 180, 20, 100, 150, 100, 200, 50]
        var attack = [10, 25, 45, 25, 130, 150, 150, 2, 100, 150, 30, 30, 300]
        var food = [1, 1, 1, 1, 4, 5, 6, 5, 8, 1, 100, 10, 6]
        var faithAttacker = 0
        var faithDefender = 0
        var nightBonusModifier = 0
        var leaderBonusModifier = 0
        var medicBonusModifier = 0
        var medicSkillModifier = 0
        var skillAttackModifier = 0
        var wallModifier = 0
        var skillWallsModifier = 0
        var skillCliniqueModifier = 0
        var hospitalBedsAvailable = 0
        var catapultTarget = 0
        var itemDeff1 = 0
        var itemDeff2 = 0
        var itemDeff3 = 0
        var itemOff = 0
        var levelDeff1 = 0
        var levelDeff2 = 0
        var levelDeff3 = 0
        var levelOff = 0
        var morale = 0
        var luck = 0
        var archerA_lossesRound1 = 0
        var archerA_lossesRound2 = 0
        var archerA_lossesRound3 = 0
        var archerA_survivorsRound1 = 0
        var archerA_survivorsRound2 = 0
        var archerD_lossesRound1 = 0
        var archerD_lossesRound2 = 0
        var archerD_lossesRound3 = 0
        var archerD_survivorsRound1 = 0
        var archerD_survivorsRound1ModifiedArc = 0
        var archerD_survivorsRound1ModifiedCav = 0
        var archerD_survivorsRound1ModifiedInf = 0
        var archerD_survivorsRound2 = 0
        var archerD_survivorsRound2ModifiedArc = 0
        var archerD_survivorsRound2ModifiedCav = 0
        var archerD_survivorsRound2ModifiedInf = 0
        var archerD_survivorsRound3ModifiedArc = 0
        var archerD_survivorsRound3ModifiedCav = 0
        var archerD_survivorsRound3ModifiedInf = 0
        var armyLossesPercentEachRound = 0
        var axeA_lossesRound1 = 0
        var axeA_lossesRound2 = 0
        var axeA_lossesRound3 = 0
        var axeA_survivorsRound1 = 0
        var axeA_survivorsRound2 = 0
        var axeD_lossesRound1 = 0
        var axeD_lossesRound2 = 0
        var axeD_lossesRound3 = 0
        var axeD_survivorsRound1 = 0
        var axeD_survivorsRound1ModifiedArc = 0
        var axeD_survivorsRound1ModifiedCav = 0
        var axeD_survivorsRound1ModifiedInf = 0
        var axeD_survivorsRound2 = 0
        var axeD_survivorsRound2ModifiedArc = 0
        var axeD_survivorsRound2ModifiedCav = 0
        var axeD_survivorsRound2ModifiedInf = 0
        var axeD_survivorsRound3ModifiedArc = 0
        var axeD_survivorsRound3ModifiedCav = 0
        var axeD_survivorsRound3ModifiedInf = 0
        var baseDefenseModifier = 0
        var battleBonusDef = 0
        var battleBonusOff = 0
        var berserkerA_lossesRound1 = 0
        var berserkerA_lossesRound2 = 0
        var berserkerA_lossesRound3 = 0
        var berserkerA_survivorsRound1 = 0
        var berserkerA_survivorsRound2 = 0
        var berserkerD_lossesRound1 = 0
        var berserkerD_lossesRound2 = 0
        var berserkerD_lossesRound3 = 0
        var berserkerD_survivorsRound1 = 0
        var berserkerD_survivorsRound1ModifiedArc = 0
        var berserkerD_survivorsRound1ModifiedCav = 0
        var berserkerD_survivorsRound1ModifiedInf = 0
        var berserkerD_survivorsRound2 = 0
        var berserkerD_survivorsRound2ModifiedArc = 0
        var berserkerD_survivorsRound2ModifiedCav = 0
        var berserkerD_survivorsRound2ModifiedInf = 0
        var berserkerD_survivorsRound3ModifiedArc = 0
        var berserkerD_survivorsRound3ModifiedCav = 0
        var berserkerD_survivorsRound3ModifiedInf = 0
        var catapultA_lossesRound1 = 0
        var catapultA_lossesRound2 = 0
        var catapultA_lossesRound3 = 0
        var catapultA_survivorsRound1 = 0
        var catapultA_survivorsRound2 = 0
        var catapultAfterTrebuchet = 0
        var catapultD_lossesRound1 = 0
        var catapultD_lossesRound2 = 0
        var catapultD_lossesRound3 = 0
        var catapultD_survivorsRound1 = 0
        var catapultD_survivorsRound1ModifiedArc = 0
        var catapultD_survivorsRound1ModifiedCav = 0
        var catapultD_survivorsRound1ModifiedInf = 0
        var catapultD_survivorsRound2 = 0
        var catapultD_survivorsRound2ModifiedArc = 0
        var catapultD_survivorsRound2ModifiedCav = 0
        var catapultD_survivorsRound2ModifiedInf = 0
        var catapultD_survivorsRound3ModifiedArc = 0
        var catapultD_survivorsRound3ModifiedCav = 0
        var catapultD_survivorsRound3ModifiedInf = 0
        var catapultDamageHitpoint = 0
        var catapultDemolition = 0
        var catapultPowerFinal = 0
        var catapultPreRound = 0
        var deffprovision = 0
        var DknightItemBonusArcher = [1, 1]
        var DknightItemBonusArcher1 = [1, 1]
        var DknightItemBonusArcher2 = [1, 1]
        var DknightItemBonusArcher3 = [1, 1]
        var DknightItemBonusAxe = [1, 1]
        var DknightItemBonusAxe1 = [1, 1]
        var DknightItemBonusAxe2 = [1, 1]
        var DknightItemBonusAxe3 = [1, 1]
        var DknightItemBonusCatapult = [1, 1]
        var DknightItemBonusCatapult1 = [1, 1]
        var DknightItemBonusCatapult2 = [1, 1]
        var DknightItemBonusCatapult3 = [1, 1]
        var DknightItemBonusHc = [1, 1]
        var DknightItemBonusHc1 = [1, 1]
        var DknightItemBonusHc2 = [1, 1]
        var DknightItemBonusHc3 = [1, 1]
        var DknightItemBonusLc = [1, 1]
        var DknightItemBonusLc1 = [1, 1]
        var DknightItemBonusLc2 = [1, 1]
        var DknightItemBonusLc3 = [1, 1]
        var DknightItemBonusMa = [1, 1]
        var DknightItemBonusMa1 = [1, 1]
        var DknightItemBonusMa2 = [1, 1]
        var DknightItemBonusMa3 = [1, 1]
        var DknightItemBonusRam = [1, 1]
        var DknightItemBonusRam1 = [1, 1]
        var DknightItemBonusRam2 = [1, 1]
        var DknightItemBonusRam3 = [1, 1]
        var DknightItemBonusSpear = [1, 1]
        var DknightItemBonusSpear1 = [1, 1]
        var DknightItemBonusSpear2 = [1, 1]
        var DknightItemBonusSpear3 = [1, 1]
        var DknightItemBonusSword = [1, 1]
        var DknightItemBonusSword1 = [1, 1]
        var DknightItemBonusSword2 = [1, 1]
        var DknightItemBonusSword3 = [1, 1]
        var finalTargetLevel = 0
        var finalWalls = 0
        var hcA_lossesRound1 = 0
        var hcA_lossesRound2 = 0
        var hcA_lossesRound3 = 0
        var hcA_survivorsRound1 = 0
        var hcA_survivorsRound2 = 0
        var hcD_lossesRound1 = 0
        var hcD_lossesRound2 = 0
        var hcD_lossesRound3 = 0
        var hcD_survivorsRound1 = 0
        var hcD_survivorsRound1ModifiedArc = 0
        var hcD_survivorsRound1ModifiedCav = 0
        var hcD_survivorsRound1ModifiedInf = 0
        var hcD_survivorsRound2 = 0
        var hcD_survivorsRound2ModifiedArc = 0
        var hcD_survivorsRound2ModifiedCav = 0
        var hcD_survivorsRound2ModifiedInf = 0
        var hcD_survivorsRound3ModifiedArc = 0
        var hcD_survivorsRound3ModifiedCav = 0
        var hcD_survivorsRound3ModifiedInf = 0
        var hitpointslevelTargetfinal = 0
        var hitpointslevelwalls = 0
        var hitpointslevelwallsfinal = 0
        var hospitalBeds = 0
        var itemramsoffeffect = [1, 1]
        var killRateRound1attackerArc = 0
        var killRateRound1attackerCav = 0
        var killRateRound1attackerInf = 0
        var killRateRound1defenderArc = 0
        var killRateRound1defenderCav = 0
        var killRateRound1defenderInf = 0
        var killRateRound2attackerArc = 0
        var killRateRound2attackerCav = 0
        var killRateRound2attackerInf = 0
        var killRateRound2defenderArc = 0
        var killRateRound2defenderCav = 0
        var killRateRound2defenderInf = 0
        var killRateRound3attackerArc = 0
        var killRateRound3attackerCav = 0
        var killRateRound3attackerInf = 0
        var killRateRound3defenderArc = 0
        var killRateRound3defenderCav = 0
        var killRateRound3defenderInf = 0
        var knightA_lossesRound1 = 0
        var knightA_lossesRound2 = 0
        var knightA_lossesRound3 = 0
        var knightA_survivorsRound1 = 0
        var knightA_survivorsRound2 = 0
        var knightD_lossesRound1 = 0
        var knightD_lossesRound2 = 0
        var knightD_lossesRound3 = 0
        var knightD_survivorsRound1 = 0
        var knightD_survivorsRound1ModifiedArc = 0
        var knightD_survivorsRound1ModifiedCav = 0
        var knightD_survivorsRound1ModifiedInf = 0
        var knightD_survivorsRound2 = 0
        var knightD_survivorsRound2ModifiedArc = 0
        var knightD_survivorsRound2ModifiedCav = 0
        var knightD_survivorsRound2ModifiedInf = 0
        var knightD_survivorsRound3ModifiedArc = 0
        var knightD_survivorsRound3ModifiedCav = 0
        var knightD_survivorsRound3ModifiedInf = 0
        var knightItemBonusArcher = [1, 1]
        var knightItemBonusAxe = [1, 1]
        var knightItemBonusCatapult = [1, 1]
        var knightItemBonusHc = [1, 1]
        var knightItemBonusLc = [1, 1]
        var knightItemBonusMa = [1, 1]
        var knightItemBonusRam = [1, 1]
        var knightItemBonusSpear = [1, 1]
        var knightItemBonusSword = [1, 1]
        var kilrateAttackArcherBaseRound3 = 0
        var kilrateAttackArcherBaseRound1 = 0
        var kilrateAttackArcherBaseRound2 = 0
        var kilrateAttackCavalryBaseRound3 = 0
        var kilrateAttackCavalryBaseRound1 = 0
        var kilrateAttackCavalryBaseRound2 = 0
        var kilrateAttackInfantryBaseRound3 = 0
        var kilrateAttackInfantryBaseRound1 = 0
        var kilrateAttackInfantryBaseRound2 = 0
        var kilrateDefendArcherBaseRound3 = 0
        var kilrateDefendArcherBaseRound1 = 0
        var kilrateDefendArcherBaseRound2 = 0
        var kilrateDefendCavalryBaseRound3 = 0
        var kilrateDefendCavalryBaseRound1 = 0
        var kilrateDefendCavalryBaseRound2 = 0
        var kilrateDefendInfantryBaseRound3 = 0
        var kilrateDefendInfantryBaseRound1 = 0
        var kilrateDefendInfantryBaseRound2 = 0
        var largestGroup = 0
        var lcA_lossesRound1 = 0
        var lcA_lossesRound2 = 0
        var lcA_lossesRound3 = 0
        var lcA_survivorsRound1 = 0
        var lcA_survivorsRound2 = 0
        var lcD_lossesRound1 = 0
        var lcD_lossesRound2 = 0
        var lcD_lossesRound3 = 0
        var lcD_survivorsRound1 = 0
        var lcD_survivorsRound1ModifiedArc = 0
        var lcD_survivorsRound1ModifiedCav = 0
        var lcD_survivorsRound1ModifiedInf = 0
        var lcD_survivorsRound2 = 0
        var lcD_survivorsRound2ModifiedArc = 0
        var lcD_survivorsRound2ModifiedCav = 0
        var lcD_survivorsRound2ModifiedInf = 0
        var lcD_survivorsRound3ModifiedArc = 0
        var lcD_survivorsRound3ModifiedCav = 0
        var lcD_survivorsRound3ModifiedInf = 0
        var leaderBonus = 0
        var lossesAttackerRound1Total = 0
        var lossesAttackerRound2Total = 0
        var lossesAttackerRound3Total = 0
        var lossesDefenderRound1Total = 0
        var lossesDefenderRound2Total = 0
        var lossesDefenderRound3Total = 0
        var lossesPercentRound1Arc = 0
        var lossesPercentRound1Cav = 0
        var lossesPercentRound1Inf = 0
        var lossesPercentRound2Arc = 0
        var lossesPercentRound2Cav = 0
        var lossesPercentRound2Inf = 0
        var lossesPercentRound3Arc = 0
        var lossesPercentRound3Cav = 0
        var lossesPercentRound3Inf = 0
        var lucky = 0
        var maA_lossesRound1 = 0
        var maA_lossesRound2 = 0
        var maA_lossesRound3 = 0
        var maA_survivorsRound1 = 0
        var maA_survivorsRound2 = 0
        var maD_lossesRound1 = 0
        var maD_lossesRound2 = 0
        var maD_lossesRound3 = 0
        var maD_survivorsRound1 = 0
        var maD_survivorsRound1ModifiedArc = 0
        var maD_survivorsRound1ModifiedCav = 0
        var maD_survivorsRound1ModifiedInf = 0
        var maD_survivorsRound2 = 0
        var maD_survivorsRound2ModifiedArc = 0
        var maD_survivorsRound2ModifiedCav = 0
        var maD_survivorsRound2ModifiedInf = 0
        var maD_survivorsRound3ModifiedArc = 0
        var maD_survivorsRound3ModifiedCav = 0
        var maD_survivorsRound3ModifiedInf = 0
        var medicBonus = 0
        var modifiedDefenderProvision = 0
        var moral = 0
        var nightBonus = 1
        var offprovision = 0
        var preBaseDefenseModifier = 0
        var provisionAttackerArcRound1 = 0
        var provisionAttackerArcRound2 = 0
        var provisionAttackerArcRound3 = 0
        var provisionAttackerCavRound1 = 0
        var provisionAttackerCavRound2 = 0
        var provisionAttackerCavRound3 = 0
        var provisionAttackerInfRound1 = 0
        var provisionAttackerInfRound2 = 0
        var provisionAttackerInfRound3 = 0
        var provisionAttackerRound1Total = 0
        var provisionAttackerRound2Total = 0
        var provisionAttackerRound3Total = 0
        var provisionDefenderArcRound1 = 0
        var provisionDefenderArcRound2 = 0
        var provisionDefenderArcRound3 = 0
        var provisionDefenderCavRound1 = 0
        var provisionDefenderCavRound2 = 0
        var provisionDefenderCavRound3 = 0
        var provisionDefenderInfRound1 = 0
        var provisionDefenderInfRound2 = 0
        var provisionDefenderInfRound3 = 0
        var provisionDefenderRound1Total = 0
        var provisionDefenderRound2Total = 0
        var provisionDefenderRound3Total = 0
        var provisionmodifier = 0
        var ramA_lossesRound1 = 0
        var ramA_lossesRound2 = 0
        var ramA_lossesRound3 = 0
        var ramA_survivorsRound1 = 0
        var ramA_survivorsRound2 = 0
        var ramAfterTrebuchet = 0
        var ramD_lossesRound1 = 0
        var ramD_lossesRound2 = 0
        var ramD_lossesRound3 = 0
        var ramD_survivorsRound1 = 0
        var ramD_survivorsRound1ModifiedArc = 0
        var ramD_survivorsRound1ModifiedCav = 0
        var ramD_survivorsRound1ModifiedInf = 0
        var ramD_survivorsRound2 = 0
        var ramD_survivorsRound2ModifiedArc = 0
        var ramD_survivorsRound2ModifiedCav = 0
        var ramD_survivorsRound2ModifiedInf = 0
        var ramD_survivorsRound3ModifiedArc = 0
        var ramD_survivorsRound3ModifiedCav = 0
        var ramD_survivorsRound3ModifiedInf = 0
        var ramDamageHitpoint = 0
        var ramDemolition = 0
        var rampower = 0
        var ramPowerFinal = 0
        var ramPreroundProvision = 0
        var ramsPreRound = 0
        var siegeProvision = 0
        var siegeProvisionRound1 = 0
        var siegeProvisionRound2 = 0
        var siegeStrength = 0
        var siegeStrengthRound1 = 0
        var siegeStrengthRound2 = 0
        var skillAttack = 0
        var skillClinique = 0
        var skillMedic = 0
        var skillWalls = 0
        var snobA_lossesRound1 = 0
        var snobA_lossesRound2 = 0
        var snobA_lossesRound3 = 0
        var snobA_survivorsRound1 = 0
        var snobA_survivorsRound2 = 0
        var snobD_lossesRound1 = 0
        var snobD_lossesRound2 = 0
        var snobD_lossesRound3 = 0
        var snobD_survivorsRound1 = 0
        var snobD_survivorsRound1ModifiedArc = 0
        var snobD_survivorsRound1ModifiedCav = 0
        var snobD_survivorsRound1ModifiedInf = 0
        var snobD_survivorsRound2 = 0
        var snobD_survivorsRound2ModifiedArc = 0
        var snobD_survivorsRound2ModifiedCav = 0
        var snobD_survivorsRound2ModifiedInf = 0
        var snobD_survivorsRound3ModifiedArc = 0
        var snobD_survivorsRound3ModifiedCav = 0
        var snobD_survivorsRound3ModifiedInf = 0
        var spearA_lossesRound1 = 0
        var spearA_lossesRound2 = 0
        var spearA_lossesRound3 = 0
        var spearA_survivorsRound1 = 0
        var spearA_survivorsRound2 = 0
        var spearD_lossesRound1 = 0
        var spearD_lossesRound2 = 0
        var spearD_lossesRound3 = 0
        var spearD_survivorsRound1 = 0
        var spearD_survivorsRound1ModifiedArc = 0
        var spearD_survivorsRound1ModifiedCav = 0
        var spearD_survivorsRound1ModifiedInf = 0
        var spearD_survivorsRound2 = 0
        var spearD_survivorsRound2ModifiedArc = 0
        var spearD_survivorsRound2ModifiedCav = 0
        var spearD_survivorsRound2ModifiedInf = 0
        var spearD_survivorsRound3ModifiedArc = 0
        var spearD_survivorsRound3ModifiedCav = 0
        var spearD_survivorsRound3ModifiedInf = 0
        var strengthAttackerArcRound1 = 0
        var strengthAttackerArcRound2 = 0
        var strengthAttackerArcRound3 = 0
        var strengthAttackerCavRound1 = 0
        var strengthAttackerCavRound2 = 0
        var strengthAttackerCavRound3 = 0
        var strengthAttackerInfRound1 = 0
        var strengthAttackerInfRound2 = 0
        var strengthAttackerInfRound3 = 0
        var strengthAttackerRound2 = 0
        var strengthAttackerRound3 = 0
        var strengthBaseAttackerArcRound1 = 0
        var strengthBaseAttackerArcRound2 = 0
        var strengthBaseAttackerArcRound3 = 0
        var strengthBaseAttackerCavRound1 = 0
        var strengthBaseAttackerCavRound2 = 0
        var strengthBaseAttackerCavRound3 = 0
        var strengthBaseAttackerInfRound1 = 0
        var strengthBaseAttackerInfRound2 = 0
        var strengthBaseAttackerInfRound3 = 0
        var strengthBaseDefenderArcRound1 = 0
        var strengthBaseDefenderArcRound2 = 0
        var strengthBaseDefenderArcRound3 = 0
        var strengthBaseDefenderCavRound1 = 0
        var strengthBaseDefenderCavRound2 = 0
        var strengthBaseDefenderCavRound3 = 0
        var strengthBaseDefenderInfRound1 = 0
        var strengthBaseDefenderInfRound2 = 0
        var strengthBaseDefenderInfRound3 = 0
        var strengthDefenderArcRound1 = 0
        var strengthDefenderArcRound2 = 0
        var strengthDefenderArcRound3 = 0
        var strengthDefenderCavRound1 = 0
        var strengthDefenderCavRound2 = 0
        var strengthDefenderCavRound3 = 0
        var strengthDefenderInfRound1 = 0
        var strengthDefenderInfRound2 = 0
        var strengthDefenderInfRound3 = 0
        var strengthDefenderRound2 = 0
        var strengthDefenderRound3 = 0
        var survivorsAttackerRound1Total = 0
        var survivorsAttackerRound2Total = 0
        var survivorsAttackerRound3Total = 0
        var survivorsDefenderRound1Total = 0
        var survivorsDefenderRound2Total = 0
        var survivorsDefenderRound3Total = 0
        var swordA_lossesRound1 = 0
        var swordA_lossesRound2 = 0
        var swordA_lossesRound3 = 0
        var swordA_survivorsRound1 = 0
        var swordA_survivorsRound2 = 0
        var swordD_lossesRound1 = 0
        var swordD_lossesRound2 = 0
        var swordD_lossesRound3 = 0
        var swordD_survivorsRound1 = 0
        var swordD_survivorsRound1ModifiedArc = 0
        var swordD_survivorsRound1ModifiedCav = 0
        var swordD_survivorsRound1ModifiedInf = 0
        var swordD_survivorsRound2 = 0
        var swordD_survivorsRound2ModifiedArc = 0
        var swordD_survivorsRound2ModifiedCav = 0
        var swordD_survivorsRound2ModifiedInf = 0
        var swordD_survivorsRound3ModifiedArc = 0
        var swordD_survivorsRound3ModifiedCav = 0
        var swordD_survivorsRound3ModifiedInf = 0
        var trebuchetA_lossesRound1 = 0
        var trebuchetA_lossesRound2 = 0
        var trebuchetA_lossesRound3 = 0
        var trebuchetA_survivorsRound1 = 0
        var trebuchetA_survivorsRound2 = 0
        var trebuchetCModifier = 0
        var trebuchetD_lossesRound1 = 0
        var trebuchetD_lossesRound2 = 0
        var trebuchetD_lossesRound3 = 0
        var trebuchetD_survivorsRound1 = 0
        var trebuchetD_survivorsRound1ModifiedArc = 0
        var trebuchetD_survivorsRound1ModifiedCav = 0
        var trebuchetD_survivorsRound1ModifiedInf = 0
        var trebuchetD_survivorsRound2 = 0
        var trebuchetD_survivorsRound2ModifiedArc = 0
        var trebuchetD_survivorsRound2ModifiedCav = 0
        var trebuchetD_survivorsRound2ModifiedInf = 0
        var trebuchetD_survivorsRound3ModifiedArc = 0
        var trebuchetD_survivorsRound3ModifiedCav = 0
        var trebuchetD_survivorsRound3ModifiedInf = 0
        var trebuchetModifier = 0
        var walladamagepreround = 0
        var wallpower = 0
        var wallpreround = 0
        var sumSiege = 0
        var catapultPercent = 0
        var ramPercent = 0
        var largestGroupD = 0
        var attFaithBonus = 0
        var defFaithBonus = 0

        function getDataBattle() {
            faithAttacker = battleCalculatorSettings[SETTINGS.BATTLE_CHURCH_A]
            faithDefender = battleCalculatorSettings[SETTINGS.BATTLE_CHURCH_D]
            nightBonusModifier = battleCalculatorSettings[SETTINGS.BATTLE_NIGHT_BONUS]
            leaderBonusModifier = battleCalculatorSettings[SETTINGS.BATTLE_OFFICER_LEADER]
            medicBonusModifier = battleCalculatorSettings[SETTINGS.BATTLE_OFFICER_MEDIC]
            medicSkillModifier = battleCalculatorSettings[SETTINGS.BATTLE_SKILL_MEDIC]
            skillAttackModifier = battleCalculatorSettings[SETTINGS.BATTLE_SKILL_WEAPON_MASTER]
            wallModifier = battleCalculatorSettings[SETTINGS.BATTLE_WALL]
            skillWallsModifier = battleCalculatorSettings[SETTINGS.BATTLE_SKILL_IRON_WALLS]
            skillCliniqueModifier = battleCalculatorSettings[SETTINGS.BATTLE_SKILL_CLINIQUE]
            hospitalBedsAvailable = battleCalculatorSettings[SETTINGS.BATTLE_HOSPITAL]
            catTarget = battleCalculatorSettings[SETTINGS.BATTLE_CATAPULT_TARGET]
            catapultTarget = battleCalculatorSettings[SETTINGS.BATTLE_CATAPULT_TARGET]
            itemDeff1 = battleCalculatorSettings[SETTINGS.BATTLE_KNIGHT_ITEM_D1]
            itemDeff2 = battleCalculatorSettings[SETTINGS.BATTLE_KNIGHT_ITEM_D2]
            itemDeff3 = battleCalculatorSettings[SETTINGS.BATTLE_KNIGHT_ITEM_D3]
            itemOff = battleCalculatorSettings[SETTINGS.BATTLE_KNIGHT_ITEM_A]
            levelDeff1 = battleCalculatorSettings[SETTINGS.BATTLE_ITEM_LEVEL_D1]
            levelDeff2 = battleCalculatorSettings[SETTINGS.BATTLE_ITEM_LEVEL_D2]
            levelDeff3 = battleCalculatorSettings[SETTINGS.BATTLE_ITEM_LEVEL_D3]
            levelOff = battleCalculatorSettings[SETTINGS.BATTLE_ITEM_LEVEL_A]
            archerA = battleCalculatorSettings[SETTINGS.BATTLE_ARCHER_A]
            archerD = battleCalculatorSettings[SETTINGS.BATTLE_ARCHER_D]
            axeA = battleCalculatorSettings[SETTINGS.BATTLE_AXE_A]
            axeD = battleCalculatorSettings[SETTINGS.BATTLE_AXE_D]
            berserkerA = battleCalculatorSettings[SETTINGS.BATTLE_DOPPELSOLDNER_A]
            berserkerD = battleCalculatorSettings[SETTINGS.BATTLE_DOPPELSOLDNER_D]
            catapultA = battleCalculatorSettings[SETTINGS.BATTLE_CATAPULT_A]
            catapultD = battleCalculatorSettings[SETTINGS.BATTLE_CATAPULT_D]
            hcA = battleCalculatorSettings[SETTINGS.BATTLE_HC_A]
            hcD = battleCalculatorSettings[SETTINGS.BATTLE_HC_D]
            knightA = battleCalculatorSettings[SETTINGS.BATTLE_KNIGHT_A]
            knightD = battleCalculatorSettings[SETTINGS.BATTLE_KNIGHT_D]
            lcA = battleCalculatorSettings[SETTINGS.BATTLE_LC_A]
            lcD = battleCalculatorSettings[SETTINGS.BATTLE_LC_D]
            maA = battleCalculatorSettings[SETTINGS.BATTLE_MA_A]
            maD = battleCalculatorSettings[SETTINGS.BATTLE_MA_D]
            ramA = battleCalculatorSettings[SETTINGS.BATTLE_RAM_A]
            ramD = battleCalculatorSettings[SETTINGS.BATTLE_RAM_D]
            snobA = battleCalculatorSettings[SETTINGS.BATTLE_SNOB_A]
            snobD = battleCalculatorSettings[SETTINGS.BATTLE_SNOB_D]
            spearA = battleCalculatorSettings[SETTINGS.BATTLE_SPEAR_A]
            spearD = battleCalculatorSettings[SETTINGS.BATTLE_SPEAR_D]
            swordA = battleCalculatorSettings[SETTINGS.BATTLE_SWORD_A]
            swordD = battleCalculatorSettings[SETTINGS.BATTLE_SWORD_D]
            trebuchetA = battleCalculatorSettings[SETTINGS.BATTLE_TREBUCHET_A]
            trebuchetD = battleCalculatorSettings[SETTINGS.BATTLE_TREBUCHET_D]
            morale = battleCalculatorSettings[SETTINGS.BATTLE_MORALE]
            luck = battleCalculatorSettings[SETTINGS.BATTLE_LUCK]
            console.log(catTarget)
            checkAttackerFaith()
        }

        function checkAttackerFaith() {
            if (faithAttacker == 'level_1') {
                attFaithBonus = 100
            } else if (faithAttacker == 'level_2') {
                attFaithBonus = 105
            } else if (faithAttacker == 'level_3') {
                attFaithBonus = 110
            } else {
                attFaithBonus = 50
            }
            console.log(attFaithBonus)
            checkDefenderFaith()
        }

        function checkDefenderFaith() {
            if (faithDefender == 'level_1') {
                defFaithBonus = 100
            } else if (faithDefender == 'level_2') {
                defFaithBonus = 105
            } else if (faithDefender == 'level_3') {
                defFaithBonus = 110
            } else {
                defFaithBonus = 50
            }
            console.log(defFaithBonus)
            checkNightBonus()
        }

        function checkNightBonus() {
            if (nightBonusModifier) {
                nightBonus = 2
            } else {
                nightBonus = 1
            }
            console.log(nightBonus)
            checkLeaderBonus()
        }

        function checkLeaderBonus() {
            if (leaderBonusModifier) {
                leaderBonus = 0.10
            } else {
                leaderBonus = 0.00
            }
            console.log(leaderBonus)
            checkMedicBonus()
        }

        function checkMedicBonus() {
            if (medicBonusModifier) {
                medicBonus = 0.10
            } else {
                medicBonus = 0.00
            }
            console.log(medicBonus)
            checkSkillMedic()
        }

        function checkSkillMedic() {
            if (medicSkillModifier) {
                skillMedic = 0.10
            } else {
                skillMedic = 0.00
            }
            console.log(skillMedic)
            checkSkillAttack()
        }

        function checkSkillAttack() {
            if (skillAttackModifier == 'level_1') {
                skillAttack = 2
            } else if (skillAttackModifier == 'level_2') {
                skillAttack = 4
            } else if (skillAttackModifier == 'level_3') {
                skillAttack = 6
            } else if (skillAttackModifier == 'level_4') {
                skillAttack = 8
            } else if (skillAttackModifier == 'level_5') {
                skillAttack = 10
            } else {
                skillAttack = 0
            }
            console.log(skillAttack)
            checkSkillWalls()
        }

        function checkSkillWalls() {
            if (skillWallsModifier == 'level_1') {
                skillWalls = 1
            } else if (skillWallsModifier == 'level_2') {
                skillWalls = 2
            } else if (skillWallsModifier == 'level_3') {
                skillWalls = 3
            } else if (skillWallsModifier == 'level_4') {
                skillWalls = 4
            } else if (skillWallsModifier == 'level_5') {
                skillWalls = 5
            } else {
                skillWalls = 0
            }
            console.log(skillWalls)
            checkClinique()
        }

        function checkClinique() {
            if (skillCliniqueModifier == 'level_1') {
                skillClinique = 100
            } else if (skillCliniqueModifier == 'level_2') {
                skillClinique = 200
            } else if (skillCliniqueModifier == 'level_3') {
                skillClinique = 300
            } else if (skillCliniqueModifier == 'level_4') {
                skillClinique = 400
            } else if (skillCliniqueModifier == 'level_5') {
                skillClinique = 500
            } else if (skillCliniqueModifier == 'level_6') {
                skillClinique = 600
            } else if (skillCliniqueModifier == 'level_7') {
                skillClinique = 700
            } else if (skillCliniqueModifier == 'level_8') {
                skillClinique = 800
            } else if (skillCliniqueModifier == 'level_9') {
                skillClinique = 900
            } else if (skillCliniqueModifier == 'level_10') {
                skillClinique = 1000
            } else {
                skillClinique = 0
            }
            console.log(skillClinique)
            checkHospital()
        }

        function checkHospital() {
            if (hospitalBedsAvailable == 'level_1') {
                hospitalBeds = 100
            } else if (hospitalBedsAvailable == 'level_2') {
                hospitalBeds = 129
            } else if (hospitalBedsAvailable == 'level_3') {
                hospitalBeds = 167
            } else if (hospitalBedsAvailable == 'level_4') {
                hospitalBeds = 215
            } else if (hospitalBedsAvailable == 'level_5') {
                hospitalBeds = 278
            } else if (hospitalBedsAvailable == 'level_6') {
                hospitalBeds = 359
            } else if (hospitalBedsAvailable == 'level_7') {
                hospitalBeds = 464
            } else if (hospitalBedsAvailable == 'level_8') {
                hospitalBeds = 599
            } else if (hospitalBedsAvailable == 'level_9') {
                hospitalBeds = 774
            } else if (hospitalBedsAvailable == 'level_10') {
                hospitalBeds = 1000
            } else {
                hospitalBeds = 0
            }
            console.log(hospitalBeds)
            checkWall()
        }

        function checkWall() {
            if (wallModifier == 'level_1') {
                wall = 1
            } else if (wallModifier == 'level_2') {
                wall = 2
            } else if (wallModifier == 'level_3') {
                wall = 3
            } else if (wallModifier == 'level_4') {
                wall = 4
            } else if (wallModifier == 'level_5') {
                wall = 5
            } else if (wallModifier == 'level_6') {
                wall = 6
            } else if (wallModifier == 'level_7') {
                wall = 7
            } else if (wallModifier == 'level_8') {
                wall = 8
            } else if (wallModifier == 'level_9') {
                wall = 9
            } else if (wallModifier == 'level_10') {
                wall = 10
            } else if (wallModifier == 'level_11') {
                wall = 11
            } else if (wallModifier == 'level_12') {
                wall = 12
            } else if (wallModifier == 'level_13') {
                wall = 13
            } else if (wallModifier == 'level_14') {
                wall = 14
            } else if (wallModifier == 'level_15') {
                wall = 15
            } else if (wallModifier == 'level_16') {
                wall = 16
            } else if (wallModifier == 'level_17') {
                wall = 17
            } else if (wallModifier == 'level_18') {
                wall = 18
            } else if (wallModifier == 'level_19') {
                wall = 19
            } else if (wallModifier == 'level_20') {
                wall = 20
            } else {
                wall = 0
            }
            console.log(wall)
            DItemBonusLc1()
        }

        function DItemBonusLc1() {
            if (itemDeff1 == 'battle.lance' & levelDeff1 == 'level_1') {
                DknightItemBonusLc1 = [1.05, 1.10]
            } else if (itemDeff1 == 'battle.lance' & levelDeff1 == 'level_2') {
                DknightItemBonusLc1 = [1.10, 1.20]
            } else if (itemDeff1 == 'battle.lance' & levelDeff1 == 'level_3') {
                DknightItemBonusLc1 = [1.20, 1.30]
            } else {
                DknightItemBonusLc1 = [1, 1]
            }
            console.log(DknightItemBonusLc1)
            DItemBonusAxe1()
        }

        function DItemBonusAxe1() {
            if (itemDeff1 == 'battle.battleaxe' & levelDeff1 == 'level_1') {
                DknightItemBonusAxe1 = [1.05, 1.10]
            } else if (itemDeff1 == 'battle.battleaxe' & levelDeff1 == 'level_2') {
                DknightItemBonusAxe1 = [1.10, 1.20]
            } else if (itemDeff1 == 'battle.battleaxe' & levelDeff1 == 'level_3') {
                DknightItemBonusAxe1 = [1.20, 1.30]
            } else {
                DknightItemBonusAxe1 = [1, 1]
            }
            console.log(DknightItemBonusAxe1)
            DItemBonusMa1()
        }

        function DItemBonusMa1() {
            if (itemDeff1 == 'battle.compositebow' & levelDeff1 == 'level_1') {
                DknightItemBonusMa1 = [1.05, 1.10]
            } else if (itemDeff1 == 'battle.compositebow' & levelDeff1 == 'level_2') {
                DknightItemBonusMa1 = [1.10, 1.20]
            } else if (itemDeff1 == 'battle.compositebow' & levelDeff1 == 'level_3') {
                DknightItemBonusMa1 = [1.20, 1.30]
            } else {
                DknightItemBonusMa1 = [1, 1]
            }
            console.log(DknightItemBonusMa1)
            DItemBonusSpear1()
        }

        function DItemBonusSpear1() {
            if (itemDeff1 == 'battle.halberd' & levelDeff1 == 'level_1') {
                DknightItemBonusSpear1 = [1.10, 1.05]
            } else if (itemDeff1 == 'battle.halberd' & levelDeff1 == 'level_2') {
                DknightItemBonusSpear1 = [1.20, 1.10]
            } else if (itemDeff1 == 'battle.halberd' & levelDeff1 == 'level_3') {
                DknightItemBonusSpear1 = [1.30, 1.20]
            } else {
                DknightItemBonusSpear1 = [1, 1]
            }
            console.log(DknightItemBonusSpear1)
            DItemBonusSword1()
        }

        function DItemBonusSword1() {
            if (itemDeff1 == 'battle.longsword' & levelDeff1 == 'level_1') {
                DknightItemBonusSword1 = [1.10, 1.05]
            } else if (itemDeff1 == 'battle.longsword' & levelDeff1 == 'level_2') {
                DknightItemBonusSword1 = [1.20, 1.10]
            } else if (itemDeff1 == 'battle.longsword' & levelDeff1 == 'level_3') {
                DknightItemBonusSword1 = [1.30, 1.20]
            } else {
                DknightItemBonusSword1 = [1, 1]
            }
            DItemBonusArcher1()
        }

        function DItemBonusArcher1() {
            if (itemDeff1 == 'battle.longbow' & levelDeff1 == 'level_1') {
                DknightItemBonusArcher1 = [1.10, 1.05]
            } else if (itemDeff1 == 'battle.longbow' & levelDeff1 == 'level_2') {
                DknightItemBonusArcher1 = [1.20, 1.10]
            } else if (itemDeff1 == 'battle.longbow' & levelDeff1 == 'level_3') {
                DknightItemBonusArcher1 = [1.30, 1.20]
            } else {
                DknightItemBonusArcher1 = [1, 1]
            }
            DItemBonusHc1()
        }

        function DItemBonusHc1() {
            if (itemDeff1 == 'battle.banner' & levelDeff1 == 'level_1') {
                DknightItemBonusHc1 = [1.10, 1.10]
            } else if (itemDeff1 == 'battle.banner' & levelDeff1 == 'level_2') {
                DknightItemBonusHc1 = [1.20, 1.20]
            } else if (itemDeff1 == 'battle.banner' & levelDeff1 == 'level_3') {
                DknightItemBonusHc1 = [1.30, 1.30]
            } else {
                DknightItemBonusHc1 = [1, 1]
            }
            DItemBonusRam1()
        }

        function DItemBonusRam1() {
            if (itemDeff1 == 'battle.star' & levelDeff1 == 'level_1') {
                DknightItemBonusRam1 = [1.05, 1.25]
            } else if (itemDeff1 == 'battle.star' & levelDeff1 == 'level_2') {
                DknightItemBonusRam1 = [1.10, 1.50]
            } else if (itemDeff1 == 'battle.star' & levelDeff1 == 'level_3') {
                DknightItemBonusRam1 = [1.20, 2.00]
            } else {
                DknightItemBonusRam1 = [1, 1]
            }
            DItemBonusCatapult1()
        }

        function DItemBonusCatapult1() {
            if (itemDeff1 == 'battle.bonfire' & levelDeff1 == 'level_1') {
                DknightItemBonusCatapult1 = [1.05, 1.25]
            } else if (itemDeff1 == 'battle.bonfire' & levelDeff1 == 'level_2') {
                DknightItemBonusCatapult1 = [1.10, 1.50]
            } else if (itemDeff1 == 'battle.bonfire' & levelDeff1 == 'level_3') {
                DknightItemBonusCatapult1 = [1.20, 2.00]
            } else {
                DknightItemBonusCatapult1 = [1, 1]
            }
            DItemBonusLc2()
        }

        function DItemBonusLc2() {
            if (itemDeff2 == 'battle.lance' & levelDeff2 == 'level_1') {
                DknightItemBonusLc2 = [1.05, 1.10]
            } else if (itemDeff2 == 'battle.lance' & levelDeff2 == 'level_2') {
                DknightItemBonusLc2 = [1.10, 1.20]
            } else if (itemDeff2 == 'battle.lance' & levelDeff2 == 'level_3') {
                DknightItemBonusLc2 = [1.20, 1.30]
            } else {
                DknightItemBonusLc2 = [1, 1]
            }
            DItemBonusAxe2()
        }

        function DItemBonusAxe2() {
            if (itemDeff2 == 'battle.battleaxe' & levelDeff2 == 'level_1') {
                DknightItemBonusAxe2 = [1.05, 1.10]
            } else if (itemDeff2 == 'battle.battleaxe' & levelDeff2 == 'level_2') {
                DknightItemBonusAxe2 = [1.10, 1.20]
            } else if (itemDeff2 == 'battle.battleaxe' & levelDeff2 == 'level_3') {
                DknightItemBonusAxe2 = [1.20, 1.30]
            } else {
                DknightItemBonusAxe2 = [1, 1]
            }
            DItemBonusMa2()
        }

        function DItemBonusMa2() {
            if (itemDeff2 == 'battle.compositebow' & levelDeff2 == 'level_1') {
                DknightItemBonusMa2 = [1.05, 1.10]
            } else if (itemDeff2 == 'battle.compositebow' & levelDeff2 == 'level_2') {
                DknightItemBonusMa2 = [1.10, 1.20]
            } else if (itemDeff2 == 'battle.compositebow' & levelDeff2 == 'level_3') {
                DknightItemBonusMa2 = [1.20, 1.30]
            } else {
                DknightItemBonusMa2 = [1, 1]
            }
            DItemBonusSpear2()
        }

        function DItemBonusSpear2() {
            if (itemDeff2 == 'battle.halberd' & levelDeff2 == 'level_1') {
                DknightItemBonusSpear2 = [1.10, 1.05]
            } else if (itemDeff2 == 'battle.halberd' & levelDeff2 == 'level_2') {
                DknightItemBonusSpear2 = [1.20, 1.10]
            } else if (itemDeff2 == 'battle.halberd' & levelDeff2 == 'level_3') {
                DknightItemBonusSpear2 = [1.30, 1.20]
            } else {
                DknightItemBonusSpear2 = [1, 1]
            }
            DItemBonusSword2()
        }

        function DItemBonusSword2() {
            if (itemDeff2 == 'battle.longsword' & levelDeff2 == 'level_1') {
                DknightItemBonusSword2 = [1.10, 1.05]
            } else if (itemDeff2 == 'battle.longsword' & levelDeff2 == 'level_2') {
                DknightItemBonusSword2 = [1.20, 1.10]
            } else if (itemDeff2 == 'battle.longsword' & levelDeff2 == 'level_3') {
                DknightItemBonusSword2 = [1.30, 1.20]
            } else {
                DknightItemBonusSword2 = [1, 1]
            }
            DItemBonusArcher2()
        }

        function DItemBonusArcher2() {
            if (itemDeff2 == 'battle.longbow' & levelDeff2 == 'level_1') {
                DknightItemBonusArcher2 = [1.10, 1.05]
            } else if (itemDeff2 == 'battle.longbow' & levelDeff2 == 'level_2') {
                DknightItemBonusArcher2 = [1.20, 1.10]
            } else if (itemDeff2 == 'battle.longbow' & levelDeff2 == 'level_3') {
                DknightItemBonusArcher2 = [1.30, 1.20]
            } else {
                DknightItemBonusArcher2 = [1, 1]
            }
            DItemBonusHc2()
        }

        function DItemBonusHc2() {
            if (itemDeff2 == 'battle.banner' & levelDeff2 == 'level_1') {
                DknightItemBonusHc2 = [1.10, 1.10]
            } else if (itemDeff2 == 'battle.banner' & levelDeff2 == 'level_2') {
                DknightItemBonusHc2 = [1.20, 1.20]
            } else if (itemDeff2 == 'battle.banner' & levelDeff2 == 'level_3') {
                DknightItemBonusHc2 = [1.30, 1.30]
            } else {
                DknightItemBonusHc2 = [1, 1]
            }
            DItemBonusRam2()
        }

        function DItemBonusRam2() {
            if (itemDeff2 == 'battle.star' & levelDeff2 == 'level_1') {
                DknightItemBonusRam2 = [1.05, 1.25]
            } else if (itemDeff2 == 'battle.star' & levelDeff2 == 'level_2') {
                DknightItemBonusRam2 = [1.10, 1.50]
            } else if (itemDeff2 == 'battle.star' & levelDeff2 == 'level_3') {
                DknightItemBonusRam2 = [1.20, 2.00]
            } else {
                DknightItemBonusRam2 = [1, 1]
            }
            DItemBonusCatapult2()
        }

        function DItemBonusCatapult2() {
            if (itemDeff2 == 'battle.bonfire' & levelDeff2 == 'level_1') {
                DknightItemBonusCatapult2 = [1.05, 1.25]
            } else if (itemDeff2 == 'battle.bonfire' & levelDeff2 == 'level_2') {
                DknightItemBonusCatapult2 = [1.10, 1.50]
            } else if (itemDeff2 == 'battle.bonfire' & levelDeff2 == 'level_3') {
                DknightItemBonusCatapult2 = [1.20, 2.00]
            } else {
                DknightItemBonusCatapult2 = [1, 1]
            }
            DItemBonusLc3()
        }

        function DItemBonusLc3() {
            if (itemDeff3 == 'battle.lance' & levelDeff3 == 'level_1') {
                DknightItemBonusLc3 = [1.05, 1.10]
            } else if (itemDeff3 == 'battle.lance' & levelDeff3 == 'level_2') {
                DknightItemBonusLc3 = [1.10, 1.20]
            } else if (itemDeff3 == 'battle.lance' & levelDeff3 == 'level_3') {
                DknightItemBonusLc3 = [1.20, 1.30]
            } else {
                DknightItemBonusLc3 = [1, 1]
            }
            DItemBonusAxe3()
        }

        function DItemBonusAxe3() {
            if (itemDeff3 == 'battle.battleaxe' & levelDeff3 == 'level_1') {
                DknightItemBonusAxe3 = [1.05, 1.10]
            } else if (itemDeff3 == 'battle.battleaxe' & levelDeff3 == 'level_2') {
                DknightItemBonusAxe3 = [1.10, 1.20]
            } else if (itemDeff3 == 'battle.battleaxe' & levelDeff3 == 'level_3') {
                DknightItemBonusAxe3 = [1.20, 1.30]
            } else {
                DknightItemBonusAxe3 = [1, 1]
            }
            DItemBonusMa3()
        }

        function DItemBonusMa3() {
            if (itemDeff3 == 'battle.compositebow' & levelDeff3 == 'level_1') {
                DknightItemBonusMa3 = [1.05, 1.10]
            } else if (itemDeff3 == 'battle.compositebow' & levelDeff3 == 'level_2') {
                DknightItemBonusMa3 = [1.10, 1.20]
            } else if (itemDeff3 == 'battle.compositebow' & levelDeff3 == 'level_3') {
                DknightItemBonusMa3 = [1.20, 1.30]
            } else {
                DknightItemBonusMa3 = [1, 1]
            }
            DItemBonusSpear3()
        }

        function DItemBonusSpear3() {
            if (itemDeff3 == 'battle.halberd' & levelDeff3 == 'level_1') {
                DknightItemBonusSpear3 = [1.10, 1.05]
            } else if (itemDeff3 == 'battle.halberd' & levelDeff3 == 'level_2') {
                DknightItemBonusSpear3 = [1.20, 1.10]
            } else if (itemDeff3 == 'battle.halberd' & levelDeff3 == 'level_3') {
                DknightItemBonusSpear3 = [1.30, 1.20]
            } else {
                DknightItemBonusSpear3 = [1, 1]
            }
            DItemBonusSword3()
        }

        function DItemBonusSword3() {
            if (itemDeff3 == 'battle.longsword' & levelDeff3 == 'level_1') {
                DknightItemBonusSword3 = [1.10, 1.05]
            } else if (itemDeff3 == 'battle.longsword' & levelDeff3 == 'level_2') {
                DknightItemBonusSword3 = [1.20, 1.10]
            } else if (itemDeff3 == 'battle.longsword' & levelDeff3 == 'level_3') {
                DknightItemBonusSword3 = [1.30, 1.20]
            } else {
                DknightItemBonusSword3 = [1, 1]
            }
            DItemBonusArcher3()
        }

        function DItemBonusArcher3() {
            if (itemDeff3 == 'battle.longbow' & levelDeff3 == 'level_1') {
                DknightItemBonusArcher3 = [1.10, 1.05]
            } else if (itemDeff3 == 'battle.longbow' & levelDeff3 == 'level_2') {
                DknightItemBonusArcher3 = [1.20, 1.10]
            } else if (itemDeff3 == 'battle.longbow' & levelDeff3 == 'level_3') {
                DknightItemBonusArcher3 = [1.30, 1.20]
            } else {
                DknightItemBonusArcher3 = [1, 1]
            }
            DItemBonusHc3()
        }

        function DItemBonusHc3() {
            if (itemDeff3 == 'battle.banner' & levelDeff3 == 'level_1') {
                DknightItemBonusHc3 = [1.10, 1.10]
            } else if (itemDeff3 == 'battle.banner' & levelDeff3 == 'level_2') {
                DknightItemBonusHc3 = [1.20, 1.20]
            } else if (itemDeff3 == 'battle.banner' & levelDeff3 == 'level_3') {
                DknightItemBonusHc3 = [1.30, 1.30]
            } else {
                DknightItemBonusHc3 = [1, 1]
            }
            DItemBonusRam3()
        }

        function DItemBonusRam3() {
            if (itemDeff3 == 'battle.star' & levelDeff3 == 'level_1') {
                DknightItemBonusRam3 = [1.05, 1.25]
            } else if (itemDeff3 == 'battle.star' & levelDeff3 == 'level_2') {
                DknightItemBonusRam3 = [1.10, 1.50]
            } else if (itemDeff3 == 'battle.star' & levelDeff3 == 'level_3') {
                DknightItemBonusRam3 = [1.20, 2.00]
            } else {
                DknightItemBonusRam3 = [1, 1]
            }
            DItemBonusCatapult3()
        }

        function DItemBonusCatapult3() {
            if (itemDeff3 == 'battle.bonfire' & levelDeff3 == 'level_1') {
                DknightItemBonusCatapult3 = [1.05, 1.25]
            } else if (itemDeff3 == 'battle.bonfire' & levelDeff3 == 'level_2') {
                DknightItemBonusCatapult3 = [1.10, 1.50]
            } else if (itemDeff3 == 'battle.bonfire' & levelDeff3 == 'level_3') {
                DknightItemBonusCatapult3 = [1.20, 2.00]
            } else {
                DknightItemBonusCatapult3 = [1, 1]
            }
            DItemBonusLc()
        }

        function DItemBonusLc() {
            if (DknightItemBonusLc1[0] >= DknightItemBonusLc2[0] && DknightItemBonusLc1[0] >= DknightItemBonusLc3[0]) {
                DknightItemBonusLc = DknightItemBonusLc1
            } else if (DknightItemBonusLc2[0] >= DknightItemBonusLc1[0] && DknightItemBonusLc2[0] >= DknightItemBonusLc3[0]) {
                DknightItemBonusLc = DknightItemBonusLc2
            } else if (DknightItemBonusLc3[0] >= DknightItemBonusLc1[0] && DknightItemBonusLc3[0] >= DknightItemBonusLc2[0]) {
                DknightItemBonusLc = DknightItemBonusLc3
            } else {
                DknightItemBonusLc = [1, 1]
            }
            DItemBonusAxe()
        }

        function DItemBonusAxe() {
            if (DknightItemBonusAxe1[0] >= DknightItemBonusAxe2[0] && DknightItemBonusAxe1[0] >= DknightItemBonusAxe3[0]) {
                DknightItemBonusAxe = DknightItemBonusAxe1
            } else if (DknightItemBonusAxe2[0] >= DknightItemBonusAxe1[0] && DknightItemBonusAxe2[0] >= DknightItemBonusAxe3[0]) {
                DknightItemBonusAxe = DknightItemBonusAxe2
            } else if (DknightItemBonusAxe3[0] >= DknightItemBonusAxe1[0] && DknightItemBonusAxe3[0] >= DknightItemBonusAxe2[0]) {
                DknightItemBonusAxe = DknightItemBonusAxe3
            } else {
                DknightItemBonusAxe = [1, 1]
            }
            DItemBonusMa()
        }

        function DItemBonusMa() {
            if (DknightItemBonusMa1[0] >= DknightItemBonusMa2[0] && DknightItemBonusMa1[0] >= DknightItemBonusMa3[0]) {
                DknightItemBonusMa = DknightItemBonusMa1
            } else if (DknightItemBonusMa2[0] >= DknightItemBonusMa1[0] && DknightItemBonusMa2[0] >= DknightItemBonusMa3[0]) {
                DknightItemBonusMa = DknightItemBonusMa2
            } else if (DknightItemBonusMa3[0] >= DknightItemBonusMa1[0] && DknightItemBonusMa3[0] >= DknightItemBonusMa2[0]) {
                DknightItemBonusMa = DknightItemBonusMa3
            } else {
                DknightItemBonusMa = [1, 1]
            }
            DItemBonusHc()
        }

        function DItemBonusHc() {
            if (DknightItemBonusHc1[0] >= DknightItemBonusHc2[0] && DknightItemBonusHc1[0] >= DknightItemBonusHc3[0]) {
                DknightItemBonusHc = DknightItemBonusHc1
            } else if (DknightItemBonusHc2[0] >= DknightItemBonusHc1[0] && DknightItemBonusHc2[0] >= DknightItemBonusHc3[0]) {
                DknightItemBonusHc = DknightItemBonusHc2
            } else if (DknightItemBonusHc3[0] >= DknightItemBonusHc1[0] && DknightItemBonusHc3[0] >= DknightItemBonusHc2[0]) {
                DknightItemBonusHc = DknightItemBonusHc3
            } else {
                DknightItemBonusHc = [1, 1]
            }
            DItemBonusRam()
        }

        function DItemBonusRam() {
            if (DknightItemBonusRam1[0] >= DknightItemBonusRam2[0] && DknightItemBonusRam1[0] >= DknightItemBonusRam3[0]) {
                DknightItemBonusRam = DknightItemBonusRam1
            } else if (DknightItemBonusRam2[0] >= DknightItemBonusRam1[0] && DknightItemBonusRam2[0] >= DknightItemBonusRam3[0]) {
                DknightItemBonusRam = DknightItemBonusRam2
            } else if (DknightItemBonusRam3[0] >= DknightItemBonusRam1[0] && DknightItemBonusRam3[0] >= DknightItemBonusRam2[0]) {
                DknightItemBonusRam = DknightItemBonusRam3
            } else {
                DknightItemBonusRam = [1, 1]
            }
            DItemBonusCatapult()
        }

        function DItemBonusCatapult() {
            if (DknightItemBonusCatapult1[0] >= DknightItemBonusCatapult2[0] && DknightItemBonusCatapult1[0] >= DknightItemBonusCatapult3[0]) {
                DknightItemBonusCatapult = DknightItemBonusCatapult1
            } else if (DknightItemBonusCatapult2[0] >= DknightItemBonusCatapult1[0] && DknightItemBonusCatapult2[0] >= DknightItemBonusCatapult3[0]) {
                DknightItemBonusCatapult = DknightItemBonusCatapult2
            } else if (DknightItemBonusCatapult3[0] >= DknightItemBonusCatapult1[0] && DknightItemBonusCatapult3[0] >= DknightItemBonusCatapult2[0]) {
                DknightItemBonusCatapult = DknightItemBonusCatapult3
            } else {
                DknightItemBonusCatapult = [1, 1]
            }
            DItemBonusSpear()
        }

        function DItemBonusSpear() {
            if (DknightItemBonusSpear1[0] >= DknightItemBonusSpear2[0] && DknightItemBonusSpear1[0] >= DknightItemBonusSpear3[0]) {
                DknightItemBonusSpear = DknightItemBonusSpear1
            } else if (DknightItemBonusSpear2[0] >= DknightItemBonusSpear1[0] && DknightItemBonusSpear2[0] >= DknightItemBonusSpear3[0]) {
                DknightItemBonusSpear = DknightItemBonusSpear2
            } else if (DknightItemBonusSpear3[0] >= DknightItemBonusSpear1[0] && DknightItemBonusSpear3[0] >= DknightItemBonusSpear2[0]) {
                DknightItemBonusSpear = DknightItemBonusSpear3
            } else {
                DknightItemBonusSpear = [1, 1]
            }
            DItemBonusSword()
        }

        function DItemBonusSword() {
            if (DknightItemBonusSword1[0] >= DknightItemBonusSword2[0] && DknightItemBonusSword1[0] >= DknightItemBonusSword3[0]) {
                DknightItemBonusSword = DknightItemBonusSword1
            } else if (DknightItemBonusSword2[0] >= DknightItemBonusSword1[0] && DknightItemBonusSword2[0] >= DknightItemBonusSword3[0]) {
                DknightItemBonusSword = DknightItemBonusSword2
            } else if (DknightItemBonusSword3[0] >= DknightItemBonusSword1[0] && DknightItemBonusSword3[0] >= DknightItemBonusSword2[0]) {
                DknightItemBonusSword = DknightItemBonusSword3
            } else {
                DknightItemBonusSword = [1, 1]
            }
            DItemBonusArcher()
        }

        function DItemBonusArcher() {
            if (DknightItemBonusArcher1[0] >= DknightItemBonusArcher2[0] && DknightItemBonusArcher1[0] >= DknightItemBonusArcher3[0]) {
                DknightItemBonusArcher = DknightItemBonusArcher1
            } else if (DknightItemBonusArcher2[0] >= DknightItemBonusArcher1[0] && DknightItemBonusArcher2[0] >= DknightItemBonusArcher3[0]) {
                DknightItemBonusArcher = DknightItemBonusArcher2
            } else if (DknightItemBonusArcher3[0] >= DknightItemBonusArcher1[0] && DknightItemBonusArcher3[0] >= DknightItemBonusArcher2[0]) {
                DknightItemBonusArcher = DknightItemBonusArcher3
            } else {
                DknightItemBonusArcher = [1, 1]
            }
            ItemBonusLc()
        }

        function ItemBonusLc() {
            if (itemOff == 'battle.lance' & levelOff == 'level_1') {
                knightItemBonusLc = [1.05, 1.10]
            } else if (itemOff == 'battle.lance' & levelOff == 'level_2') {
                knightItemBonusLc = [1.10, 1.20]
            } else if (itemOff == 'battle.lance' & levelOff == 'level_3') {
                knightItemBonusLc = [1.20, 1.30]
            } else {
                knightItemBonusLc = [1, 1]
            }
            ItemBonusAxe()
        }

        function ItemBonusAxe() {
            if (itemOff == 'battle.battleaxe' & levelOff == 'level_1') {
                knightItemBonusAxe = [1.05, 1.10]
            } else if (itemOff == 'battle.battleaxe' & levelOff == 'level_2') {
                knightItemBonusAxe = [1.10, 1.20]
            } else if (itemOff == 'battle.battleaxe' & levelOff == 'level_3') {
                knightItemBonusAxe = [1.20, 1.30]
            } else {
                knightItemBonusAxe = [1, 1]
            }
            ItemBonusMa()
        }

        function ItemBonusMa() {
            if (itemOff == 'battle.compositebow' & levelOff == 'level_1') {
                knightItemBonusMa = [1.05, 1.10]
            } else if (itemOff == 'battle.compositebow' & levelOff == 'level_2') {
                knightItemBonusMa = [1.10, 1.20]
            } else if (itemOff == 'battle.compositebow' & levelOff == 'level_3') {
                knightItemBonusMa = [1.20, 1.30]
            } else {
                knightItemBonusMa = [1, 1]
            }
            ItemBonusSpear()
        }

        function ItemBonusSpear() {
            if (itemOff == 'battle.halberd' & levelOff == 'level_1') {
                knightItemBonusSpear = [1.10, 1.05]
            } else if (itemOff == 'battle.halberd' & levelOff == 'level_2') {
                knightItemBonusSpear = [1.20, 1.10]
            } else if (itemOff == 'battle.halberd' & levelOff == 'level_3') {
                knightItemBonusSpear = [1.30, 1.20]
            } else {
                knightItemBonusSpear = [1, 1]
            }
            ItemBonusSword()
        }

        function ItemBonusSword() {
            if (itemOff == 'battle.longsword' & levelOff == 'level_1') {
                knightItemBonusSword = [1.10, 1.05]
            } else if (itemOff == 'battle.longsword' & levelOff == 'level_2') {
                knightItemBonusSword = [1.20, 1.10]
            } else if (itemOff == 'battle.longsword' & levelOff == 'level_3') {
                knightItemBonusSword = [1.30, 1.20]
            } else {
                knightItemBonusSword = [1, 1]
            }
            ItemBonusArcher()
        }

        function ItemBonusArcher() {
            if (itemOff == 'battle.longbow' & levelOff == 'level_1') {
                knightItemBonusArcher = [1.10, 1.05]
            } else if (itemOff == 'battle.longbow' & levelOff == 'level_2') {
                knightItemBonusArcher = [1.20, 1.10]
            } else if (itemOff == 'battle.longbow' & levelOff == 'level_3') {
                knightItemBonusArcher = [1.30, 1.20]
            } else {
                knightItemBonusArcher = [1, 1]
            }
            ItemBonusHc()
        }

        function ItemBonusHc() {
            if (itemOff == 'battle.banner' & levelOff == 'level_1') {
                knightItemBonusHc = [1.10, 1.10]
            } else if (itemOff == 'battle.banner' & levelOff == 'level_2') {
                knightItemBonusHc = [1.20, 1.20]
            } else if (itemOff == 'battle.banner' & levelOff == 'level_3') {
                knightItemBonusHc = [1.30, 1.30]
            } else {
                knightItemBonusHc = [1, 1]
            }
            ItemBonusRam()
        }

        function ItemBonusRam() {
            if (itemOff == 'battle.star' & levelOff == 'level_1') {
                knightItemBonusRam = [1.05, 1.25]
            } else if (itemOff == 'battle.star' & levelOff == 'level_2') {
                knightItemBonusRam = [1.10, 1.50]
            } else if (itemOff == 'battle.star' & levelOff == 'level_3') {
                knightItemBonusRam = [1.20, 2.00]
            } else {
                knightItemBonusRam = [1, 1]
            }
            ItemBonusCatapult()
        }

        function ItemBonusCatapult() {
            if (itemOff == 'battle.bonfire' & levelOff == 'level_1') {
                knightItemBonusCatapult = [1.05, 1.25]
            } else if (itemOff == 'battle.bonfire' & levelOff == 'level_2') {
                knightItemBonusCatapult = [1.10, 1.50]
            } else if (itemOff == 'battle.bonfire' & levelOff == 'level_3') {
                knightItemBonusCatapult = [1.20, 2.00]
            } else {
                knightItemBonusCatapult = [1, 1]
            }
            provisions()
        }

        function provisions() {
            attackerprovision = spearA * food[0] + swordA * food[1] + axeA * food[2] + archerA * food[3] + lcA * food[4] + maA * food[5] + hcA * food[6] + ramA * food[7] + catapultA * food[8] + knightA * food[9] + snobA * food[10] + trebuchetA * food[11] + berserkerA * food[12]
            defenderprovision = spearD * food[0] + swordD * food[1] + axeD * food[2] + archerD * food[3] + lcD * food[4] + maD * food[5] + hcD * food[6] + ramD * food[7] + catapultD * food[8] + knightD * food[9] + snobD * food[10] + trebuchetD * food[11] + berserkerD * food[12]
            console.log('Prowiant:' + attackerprovision, defenderprovision)
            doubleStrength()
        }

        function doubleStrength() {
            if (attackerprovision * 2 <= defenderprovision) {
                doubleStrengthBonus = 2
            } else {
                doubleStrengthBonus = 1
            }
            offprovisionCalc()
        }

        function offprovisionCalc() {
            ramPreroundProvision = ramA * 5
            offprovision = attackerprovision - ramPreroundProvision
            preBaseDefenseModifierCalc()
        }

        function preBaseDefenseModifierCalc() {
            if (wall == 0) {
                preBaseDefenseModifier = 0
            } else {
                preBaseDefenseModifier = Math.round(Math.pow(1.2515, (wall - 1)) * 20)
            }
            deffprovisionCalc()
        }

        function deffprovisionCalc() {
            modifiedDefenderProvision = preBaseDefenseModifier + snobD * 100
            deffprovision = defenderprovision + modifiedDefenderProvision
            provisionmodifierCalc()
        }

        function provisionmodifierCalc() {
            if (offprovision == 0 || deffprovision == 0) {
                provisionmodifier = 0
            } else {
                if ((offprovision / deffprovision) > 1) {
                    provisionmodifier = 1
                } else {
                    provisionmodifier = offprovision / deffprovision
                }
            }
            console.log(provisionmodifier)
            baseThings()
        }

        function baseThings() {
            moral = morale / 100
            lucky = luck / 100
            overalModifierOffCalc()
        }

        function overalModifierOffCalc() {
            overalModifierOff = Math.round((((attFaithBonus / 100) * moral * (1 + lucky)) + (skillAttack / 100) + leaderBonus) * 1000) / 1000
            trebuchetModifierCalc()
        }

        function trebuchetModifierCalc() {
            sumSiege = ramA + catapultA
            catapultPercent = catapultA / sumSiege
            ramPercent = ramA / sumSiege
            trebuchetCModifier = Math.round(trebuchetD * catapultPercent)
            trebuchetModifier = Math.round(trebuchetD * ramPercent)
            ramAfterTrebuchetCalc()
        }

        function ramAfterTrebuchetCalc() {
            if (ramA == 0) {
                ramAfterTrebuchet = 0
            } else {
                if (ramA < trebuchetModifier) {
                    ramAfterTrebuchet = ramA
                } else {
                    ramAfterTrebuchet = trebuchetModifier
                }
            }
            ramsPreRoundCalc()
        }

        function ramsPreRoundCalc() {
            ramsPreRound = ramA - ramAfterTrebuchet
            itemramsoffeffectCalc()
        }

        function itemramsoffeffectCalc() {
            if (itemOff == 'battle.star') {
                if (levelOff == 'level_1') {
                    itemramsoffeffect = [1.05, 1.25]
                } else if (levelOff == 'level_2') {
                    itemramsoffeffect = [1.10, 1.50]
                } else if (levelOff == 'level_3') {
                    itemramsoffeffect = [1.20, 2.00]
                } else {
                    itemramsoffeffect = [1, 1]
                }
            } else {
                itemramsoffeffect = [1, 1]
            }
            rampowerCalc()
        }

        function rampowerCalc() {
            rampower = ramsPreRound * provisionmodifier * overalModifierOff * itemramsoffeffect[1]
            hitpointslevelwallsCalc()
        }

        function hitpointslevelwallsCalc() {
            if (wall == 20) {
                hitpointslevelwalls = 18
            } else if (wall == 19) {
                hitpointslevelwalls = 17
            } else if (wall == 18) {
                hitpointslevelwalls = 15
            } else if (wall == 17) {
                hitpointslevelwalls = 14
            } else if (wall == 16) {
                hitpointslevelwalls = 13
            } else if (wall == 15) {
                hitpointslevelwalls = 11
            } else if (wall == 14) {
                hitpointslevelwalls = 10
            } else if (wall == 13 || wall == 12) {
                hitpointslevelwalls = 9
            } else if (wall == 11) {
                hitpointslevelwalls = 8
            } else if (wall == 10) {
                hitpointslevelwalls = 7
            } else if (wall == 9 || wall == 8) {
                hitpointslevelwalls = 6
            } else if (wall == 7 || wall == 6) {
                hitpointslevelwalls = 5
            } else if (wall == 5 || wall == 4 || wall == 3) {
                hitpointslevelwalls = 4
            } else if (wall == 2 || wall == 1) {
                hitpointslevelwalls = 3
            } else {
                hitpointslevelwalls = 0
            }
            wallpowerCalc()
        }

        function wallpowerCalc() {
            if (wall == 0) {
                wallpower = 0
            } else {
                wallpower = hitpointslevelwalls * 2
            }
            walladamagepreroundCalc()
        }

        function walladamagepreroundCalc() {
            if (wall == 0) {
                walladamagepreround = 0
            } else {
                walladamagepreround = (rampower / wallpower)
            }
            wallpreroundCalc()
        }

        function wallpreroundCalc() {
            if (wall <= skillWalls) {
                wallpreround = wall
            } else if ((wall - skillWalls) < walladamagepreround) {
                if (wall < skillWalls) {
                    wallpreround = wall
                } else {
                    wallpreround = skillWalls
                }
            } else {
                wallpreround = wall - walladamagepreround
            }
            battleBonuses()
        }

        function battleBonuses() {
            battleBonusOff = Math.round(wallpreround)
            battleBonusDef = Math.round((battleBonusOff * 0.05) * 1000) / 1000
            overalModifierDefCalc()
        }

        function overalModifierDefCalc() {
            overalModifierDef = Math.round((((defFaithBonus / 100) * (1 + battleBonusDef)) * nightBonus) * 1000) / 1000
            catapultAfterTrebuchetCalc()
        }

        function catapultAfterTrebuchetCalc() {
            if (catapultA == 0) {
                catapultAfterTrebuchet = 0
            } else {
                if (catapultA < trebuchetCModifier) {
                    catapultAfterTrebuchet = catapultA
                } else {
                    catapultAfterTrebuchet = trebuchetCModifier
                }
            }
            catapultPreRoundCalc()
        }

        function catapultPreRoundCalc() {
            catapultPreRound = catapultA - catapultAfterTrebuchet
            baseDefenseModifierCalc()
        }

        function baseDefenseModifierCalc() {
            wallAfterPreround = Math.round(wallpreround)
            if (wallAfterPreround == 0) {
                baseDefenseModifier = 0
            } else {
                baseDefenseModifier = Math.round(Math.pow(1.2515, (wallAfterPreround - 1)) * 20)
            }
            largestGroupCalc()
        }

        function largestGroupCalc() {
            if ((spearA + swordA + axeA + berserkerA > lcA + hcA) && (spearA + swordA + axeA + berserkerA > archerA + maA)) {
                largestGroup = 'inf'
            } else if ((lcA + hcA > spearA + swordA + axeA + berserkerA) && (lcA + hcA > archerA + maA)) {
                largestGroup = 'cav'
            } else {
                largestGroup = 'arc'
            }
            totalProvisionsRound1()
        }

        function totalProvisionsRound1() {
            provisionAttackerRound1Total = spearA * food[0] + swordA * food[1] + axeA * food[2] + archerA * food[3] + lcA * food[4] + maA * food[5] + hcA * food[6] + ramsPreRound * food[7] + catapultPreRound * food[8] + knightA * food[9] + snobA * food[10] + trebuchetA * food[11] + berserkerA * food[12]
            provisionDefenderRound1Total = spearD * food[0] + swordD * food[1] + axeD * food[2] + archerD * food[3] + lcD * food[4] + maD * food[5] + hcD * food[6] + ramD * food[7] + catapultD * food[8] + knightD * food[9] + snobD * food[10] + trebuchetD * food[11] + berserkerD * food[12]
            console.log(provisionAttackerRound1Total, provisionDefenderRound1Total)
            siegeProvisionRound1Calc()
        }

        function siegeProvisionRound1Calc() {
            siegeProvisionRound1 = ramsPreRound * food[7] + catapultPreRound * food[8] + trebuchetA * food[11] + knightA * food[9] + snobA * food[10]
            provisionAttackerAllRound1()
        }

        function provisionAttackerAllRound1() {
            if (largestGroup == 'cav') {
                provisionAttackerCavRound1 = lcA * food[4] + hcA * food[6] + siegeProvisionRound1
                provisionAttackerInfRound1 = spearA * food[0] + swordA * food[1] + axeA * food[2] + berserkerA * food[12]
                provisionAttackerArcRound1 = archerA * food[3] + maA * food[5]
            } else if (largestGroup == 'inf') {
                provisionAttackerInfRound1 = spearA * food[0] + swordA * food[1] + axeA * food[2] + berserkerA * food[12] + siegeProvisionRound1
                provisionAttackerCavRound1 = lcA * food[4] + hcA * food[6]
                provisionAttackerArcRound1 = archerA * food[3] + maA * food[5]
            } else if (largestGroup == 'arc') {
                provisionAttackerInfRound1 = spearA * food[0] + swordA * food[1] + axeA * food[2] + berserkerA * food[12]
                provisionAttackerCavRound1 = lcA * food[4] + hcA * food[6]
                provisionAttackerArcRound1 = archerA * food[3] + maA * food[5] + siegeProvisionRound1
            } else {
                provisionAttackerInfRound1 = spearA * food[0] + swordA * food[1] + axeA * food[2] + berserkerA * food[12]
                provisionAttackerCavRound1 = lcA * food[4] + hcA * food[6]
                provisionAttackerArcRound1 = archerA * food[3] + maA * food[5]
            }
            lossesPercentRound1InfCalc()
        }

        function lossesPercentRound1InfCalc() {
            if (provisionAttackerInfRound1 == 0) {
                lossesPercentRound1Inf = 0
            } else {
                lossesPercentRound1Inf = Math.round((provisionAttackerInfRound1 / provisionAttackerRound1Total) * 10000) / 10000
            }
            lossesPercentRound1CavCalc()
        }

        function lossesPercentRound1CavCalc() {
            if (provisionAttackerCavRound1 == 0) {
                lossesPercentRound1Cav = 0
            } else {
                lossesPercentRound1Cav = Math.round((provisionAttackerCavRound1 / provisionAttackerRound1Total) * 10000) / 10000
            }
            lossesPercentRound1ArcCalc()
        }

        function lossesPercentRound1ArcCalc() {
            if (provisionAttackerArcRound1 == 0) {
                lossesPercentRound1Arc = 0
            } else {
                lossesPercentRound1Arc = Math.round((provisionAttackerArcRound1 / provisionAttackerRound1Total) * 10000) / 10000
            }
            console.log(lossesPercentRound1Arc)
            survivorsRound1Modified()
        }

        function survivorsRound1Modified() {
            spearD_survivorsRound1ModifiedInf = Math.round(spearD * lossesPercentRound1Inf)
            spearD_survivorsRound1ModifiedCav = Math.round(spearD * lossesPercentRound1Cav)
            spearD_survivorsRound1ModifiedArc = spearD - spearD_survivorsRound1ModifiedCav - spearD_survivorsRound1ModifiedInf
            swordD_survivorsRound1ModifiedInf = Math.round(swordD * lossesPercentRound1Inf)
            swordD_survivorsRound1ModifiedCav = Math.round(swordD * lossesPercentRound1Cav)
            swordD_survivorsRound1ModifiedArc = swordD - swordD_survivorsRound1ModifiedCav - swordD_survivorsRound1ModifiedInf
            axeD_survivorsRound1ModifiedInf = Math.round(axeD * lossesPercentRound1Inf)
            axeD_survivorsRound1ModifiedCav = Math.round(axeD * lossesPercentRound1Cav)
            axeD_survivorsRound1ModifiedArc = axeD - axeD_survivorsRound1ModifiedCav - axeD_survivorsRound1ModifiedInf
            archerD_survivorsRound1ModifiedInf = Math.round(archerD * lossesPercentRound1Inf)
            archerD_survivorsRound1ModifiedCav = Math.round(archerD * lossesPercentRound1Cav)
            archerD_survivorsRound1ModifiedArc = archerD - archerD_survivorsRound1ModifiedCav - archerD_survivorsRound1ModifiedInf
            lcD_survivorsRound1ModifiedInf = Math.round(lcD * lossesPercentRound1Inf)
            lcD_survivorsRound1ModifiedCav = Math.round(lcD * lossesPercentRound1Cav)
            lcD_survivorsRound1ModifiedArc = lcD - lcD_survivorsRound1ModifiedCav - lcD_survivorsRound1ModifiedInf
            maD_survivorsRound1ModifiedInf = Math.round(maD * lossesPercentRound1Inf)
            maD_survivorsRound1ModifiedCav = Math.round(maD * lossesPercentRound1Cav)
            maD_survivorsRound1ModifiedArc = maD - maD_survivorsRound1ModifiedCav - maD_survivorsRound1ModifiedInf
            hcD_survivorsRound1ModifiedInf = Math.round(hcD * lossesPercentRound1Inf)
            hcD_survivorsRound1ModifiedCav = Math.round(hcD * lossesPercentRound1Cav)
            hcD_survivorsRound1ModifiedArc = hcD - hcD_survivorsRound1ModifiedCav - hcD_survivorsRound1ModifiedInf
            ramD_survivorsRound1ModifiedInf = Math.round(ramD * lossesPercentRound1Inf)
            ramD_survivorsRound1ModifiedCav = Math.round(ramD * lossesPercentRound1Cav)
            ramD_survivorsRound1ModifiedArc = ramD - ramD_survivorsRound1ModifiedCav - ramD_survivorsRound1ModifiedInf
            catapultD_survivorsRound1ModifiedInf = Math.round(catapultD * lossesPercentRound1Inf)
            catapultD_survivorsRound1ModifiedCav = Math.round(catapultD * lossesPercentRound1Cav)
            catapultD_survivorsRound1ModifiedArc = catapultD - catapultD_survivorsRound1ModifiedCav - catapultD_survivorsRound1ModifiedInf
            snobD_survivorsRound1ModifiedInf = Math.round(snobD * lossesPercentRound1Inf)
            snobD_survivorsRound1ModifiedCav = Math.round(snobD * lossesPercentRound1Cav)
            snobD_survivorsRound1ModifiedArc = snobD - snobD_survivorsRound1ModifiedCav - snobD_survivorsRound1ModifiedInf
            trebuchetD_survivorsRound1ModifiedInf = Math.round(trebuchetD * lossesPercentRound1Inf)
            trebuchetD_survivorsRound1ModifiedCav = Math.round(trebuchetD * lossesPercentRound1Cav)
            trebuchetD_survivorsRound1ModifiedArc = trebuchetD - trebuchetD_survivorsRound1ModifiedCav - trebuchetD_survivorsRound1ModifiedInf
            berserkerD_survivorsRound1ModifiedInf = Math.round(berserkerD * lossesPercentRound1Inf)
            berserkerD_survivorsRound1ModifiedCav = Math.round(berserkerD * lossesPercentRound1Cav)
            berserkerD_survivorsRound1ModifiedArc = berserkerD - berserkerD_survivorsRound1ModifiedCav - berserkerD_survivorsRound1ModifiedInf
            knightD_survivorsRound1ModifiedInf = Math.round(knightD * lossesPercentRound1Inf)
            knightD_survivorsRound1ModifiedCav = Math.round(knightD * lossesPercentRound1Cav)
            knightD_survivorsRound1ModifiedArc = knightD - knightD_survivorsRound1ModifiedCav - knightD_survivorsRound1ModifiedInf
            provisionDefenderRound1()
        }

        function provisionDefenderRound1() {
            provisionDefenderInfRound1 = spearD_survivorsRound1ModifiedInf * food[0] + swordD_survivorsRound1ModifiedInf * food[1] + axeD_survivorsRound1ModifiedInf * food[2] + berserkerD_survivorsRound1ModifiedInf * food[12] + snobD_survivorsRound1ModifiedInf * food[10] + lcD_survivorsRound1ModifiedInf * food[4] + hcD_survivorsRound1ModifiedInf * food[6] + archerD_survivorsRound1ModifiedInf * food[3] + maD_survivorsRound1ModifiedInf * food[5] + ramD_survivorsRound1ModifiedInf * food[7] + catapultD_survivorsRound1ModifiedInf * food[8] + trebuchetD_survivorsRound1ModifiedInf * food[11] + knightD_survivorsRound1ModifiedInf * food[9]
            provisionDefenderCavRound1 = spearD_survivorsRound1ModifiedCav * food[0] + swordD_survivorsRound1ModifiedCav * food[1] + axeD_survivorsRound1ModifiedCav * food[2] + berserkerD_survivorsRound1ModifiedCav * food[12] + snobD_survivorsRound1ModifiedCav * food[10] + lcD_survivorsRound1ModifiedCav * food[4] + hcD_survivorsRound1ModifiedCav * food[6] + archerD_survivorsRound1ModifiedCav * food[3] + maD_survivorsRound1ModifiedCav * food[5] + ramD_survivorsRound1ModifiedCav * food[7] + catapultD_survivorsRound1ModifiedCav * food[8] + trebuchetD_survivorsRound1ModifiedCav * food[11] + knightD_survivorsRound1ModifiedCav * food[9]
            provisionDefenderArcRound1 = spearD_survivorsRound1ModifiedArc * food[0] + swordD_survivorsRound1ModifiedArc * food[1] + axeD_survivorsRound1ModifiedArc * food[2] + berserkerD_survivorsRound1ModifiedArc * food[12] + snobD_survivorsRound1ModifiedArc * food[10] + lcD_survivorsRound1ModifiedArc * food[4] + hcD_survivorsRound1ModifiedArc * food[6] + archerD_survivorsRound1ModifiedArc * food[3] + maD_survivorsRound1ModifiedArc * food[5] + ramD_survivorsRound1ModifiedArc * food[7] + catapultD_survivorsRound1ModifiedArc * food[8] + trebuchetD_survivorsRound1ModifiedArc * food[11] + knightD_survivorsRound1ModifiedArc * food[9]
            console.log(provisionDefenderArcRound1, provisionDefenderCavRound1, provisionDefenderInfRound1)
            strengthBaseDefenderAllRound1()
        }

        function strengthBaseDefenderAllRound1() {
            strengthBaseDefenderInfRound1 = spearD_survivorsRound1ModifiedInf * def_inf[0] * DknightItemBonusSpear[0] + swordD_survivorsRound1ModifiedInf * def_inf[1] * DknightItemBonusSword[0] + axeD_survivorsRound1ModifiedInf * def_inf[2] * DknightItemBonusAxe[0] + berserkerD_survivorsRound1ModifiedInf * def_inf[12] + snobD_survivorsRound1ModifiedInf * def_inf[10] + lcD_survivorsRound1ModifiedInf * def_inf[4] * DknightItemBonusLc[0] + hcD_survivorsRound1ModifiedInf * def_inf[6] * DknightItemBonusHc[0] + archerD_survivorsRound1ModifiedInf * def_inf[3] * DknightItemBonusArcher[0] + maD_survivorsRound1ModifiedInf * def_inf[5] * DknightItemBonusMa[0] + ramD_survivorsRound1ModifiedInf * def_inf[7] * DknightItemBonusRam[0] + catapultD_survivorsRound1ModifiedInf * def_inf[8] * DknightItemBonusCatapult[0] + trebuchetD_survivorsRound1ModifiedInf * def_inf[11] + knightD_survivorsRound1ModifiedInf * def_inf[9]
            strengthBaseDefenderCavRound1 = spearD_survivorsRound1ModifiedCav * def_kav[0] * DknightItemBonusSpear[0] + swordD_survivorsRound1ModifiedCav * def_kav[1] * DknightItemBonusSword[0] + axeD_survivorsRound1ModifiedCav * def_kav[2] * DknightItemBonusAxe[0] + berserkerD_survivorsRound1ModifiedCav * def_kav[12] + snobD_survivorsRound1ModifiedCav * def_kav[10] + lcD_survivorsRound1ModifiedCav * def_kav[4] * DknightItemBonusLc[0] + hcD_survivorsRound1ModifiedCav * def_kav[6] * DknightItemBonusHc[0] + archerD_survivorsRound1ModifiedCav * def_kav[3] * DknightItemBonusArcher[0] + maD_survivorsRound1ModifiedCav * def_kav[5] * DknightItemBonusMa[0] + ramD_survivorsRound1ModifiedCav * def_kav[7] * DknightItemBonusRam[0] + catapultD_survivorsRound1ModifiedCav * def_kav[8] * DknightItemBonusCatapult[0] + trebuchetD_survivorsRound1ModifiedCav * def_kav[11] + knightD_survivorsRound1ModifiedCav * def_kav[9]
            strengthBaseDefenderArcRound1 = spearD_survivorsRound1ModifiedArc * def_arc[0] * DknightItemBonusSpear[0] + swordD_survivorsRound1ModifiedArc * def_arc[1] * DknightItemBonusSword[0] + axeD_survivorsRound1ModifiedArc * def_arc[2] * DknightItemBonusAxe[0] + berserkerD_survivorsRound1ModifiedArc * def_arc[12] + snobD_survivorsRound1ModifiedArc * def_arc[10] + lcD_survivorsRound1ModifiedArc * def_arc[4] * DknightItemBonusLc[0] + hcD_survivorsRound1ModifiedArc * def_arc[6] * DknightItemBonusHc[0] + archerD_survivorsRound1ModifiedArc * def_arc[3] * DknightItemBonusArcher[0] + maD_survivorsRound1ModifiedArc * def_arc[5] * DknightItemBonusMa[0] + ramD_survivorsRound1ModifiedArc * def_arc[7] * DknightItemBonusRam[0] + catapultD_survivorsRound1ModifiedArc * def_arc[8] * DknightItemBonusCatapult[0] + trebuchetD_survivorsRound1ModifiedArc * def_arc[11] + knightD_survivorsRound1ModifiedArc * def_arc[9]
            siegeStrengthRound1Calc()
        }

        function siegeStrengthRound1Calc() {
            siegeStrengthRound1 = ramsPreRound * attack[7] * knightItemBonusRam[1] + catapultPreRound * attack[8] * knightItemBonusCatapult[1] + trebuchetA * attack[11] + knightA * attack[9] + snobA * attack[10]
            strengthBaseAttackerAllRound1()
        }

        function strengthBaseAttackerAllRound1() {
            if (largestGroup == 'cav') {
                strengthBaseAttackerCavRound1 = lcA * attack[4] * knightItemBonusLc[1] + hcA * attack[6] * knightItemBonusHc[1] + siegeStrengthRound1
                strengthBaseAttackerInfRound1 = spearA * attack[0] * knightItemBonusSpear[1] + swordA * attack[1] * knightItemBonusSword[1] + axeA * attack[2] * knightItemBonusAxe[1] + berserkerA * attack[12] * doubleStrengthBonus
                strengthBaseAttackerArcRound1 = archerA * attack[3] * knightItemBonusArcher[1] + maA * attack[5] * knightItemBonusMa[1]
            } else if (largestGroup == 'inf') {
                strengthBaseAttackerInfRound1 = spearA * attack[0] * knightItemBonusSpear[1] + swordA * attack[1] * knightItemBonusSword[1] + axeA * attack[2] * knightItemBonusAxe[1] + berserkerA * attack[12] * doubleStrengthBonus + siegeStrengthRound1
                strengthBaseAttackerCavRound1 = lcA * attack[4] * knightItemBonusLc[1] + hcA * attack[6] * knightItemBonusHc[1]
                strengthBaseAttackerArcRound1 = archerA * attack[3] * knightItemBonusArcher[1] + maA * attack[5] * knightItemBonusMa[1]
            } else if (largestGroup == 'arc') {
                strengthBaseAttackerInfRound1 = spearA * attack[0] * knightItemBonusSpear[1] + swordA * attack[1] * knightItemBonusSword[1] + axeA * attack[2] * knightItemBonusAxe[1] + berserkerA * attack[12] * doubleStrengthBonus
                strengthBaseAttackerCavRound1 = lcA * attack[4] * knightItemBonusLc[1] + hcA * attack[6] * knightItemBonusHc[1]
                strengthBaseAttackerArcRound1 = archerA * attack[3] * knightItemBonusArcher[1] + maA * attack[5] * knightItemBonusMa[1] + siegeStrengthRound1
            } else {
                strengthBaseAttackerInfRound1 = spearA * attack[0] * knightItemBonusSpear[1] + swordA * attack[1] * knightItemBonusSword[1] + axeA * attack[2] * knightItemBonusAxe[1] + berserkerA * attack[12] * doubleStrengthBonus
                strengthBaseAttackerCavRound1 = lcA * attack[4] * knightItemBonusLc[1] + hcA * attack[6] * knightItemBonusHc[1]
                strengthBaseAttackerArcRound1 = archerA * attack[3] * knightItemBonusArcher[1] + maA * attack[5] * knightItemBonusMa[1]
            }
            strengthRound1partly()
        }

        function strengthRound1partly() {
            strengthAttackerInfRound1 = strengthBaseAttackerInfRound1 * overalModifierOff
            strengthDefenderInfRound1 = strengthBaseDefenderInfRound1 * overalModifierDef + baseDefenseModifier
            strengthAttackerCavRound1 = strengthBaseAttackerCavRound1 * overalModifierOff
            strengthDefenderCavRound1 = strengthBaseDefenderCavRound1 * overalModifierDef + baseDefenseModifier
            strengthAttackerArcRound1 = strengthBaseAttackerArcRound1 * overalModifierOff
            strengthDefenderArcRound1 = strengthBaseDefenderArcRound1 * overalModifierDef + baseDefenseModifier
            strengthRound1()
        }

        function strengthRound1() {
            strengthAttackerRound1 = strengthAttackerInfRound1 + strengthAttackerCavRound1 + strengthAttackerArcRound1
            strengthDefenderRound1 = strengthDefenderInfRound1 + strengthDefenderCavRound1 + strengthDefenderArcRound1
            console.log(strengthAttackerRound1, strengthDefenderRound1)
            killRateRound1defenderInfCalc()
        }

        function killRateRound1defenderInfCalc() {
            if (strengthAttackerInfRound1 == 0 || strengthDefenderInfRound1 == 0) {
                kilrateDefendInfantryBaseRound1 = 0
            } else {
                if (strengthDefenderInfRound1 <= strengthAttackerInfRound1) {
                    kilrateDefendInfantryBaseRound1 = 1
                } else {
                    kilrateDefendInfantryBaseRound1 = Math.pow((strengthAttackerInfRound1 / strengthDefenderInfRound1), (1 / 2)) / (strengthDefenderInfRound1 / strengthAttackerInfRound1)
                }
            }
            killRateRound1defenderCavCalc()
        }

        function killRateRound1defenderCavCalc() {
            if (strengthAttackerCavRound1 == 0 || strengthDefenderCavRound1 == 0) {
                kilrateDefendCavalryBaseRound1 = 0
            } else {
                if (strengthDefenderCavRound1 <= strengthAttackerCavRound1) {
                    kilrateDefendCavalryBaseRound1 = 1
                } else {
                    kilrateDefendCavalryBaseRound1 = Math.pow((strengthAttackerCavRound1 / strengthDefenderCavRound1), (1 / 2)) / (strengthDefenderCavRound1 / strengthAttackerCavRound1)
                }
            }
            killRateRound1defenderArcCalc()
        }

        function killRateRound1defenderArcCalc() {
            if (strengthAttackerArcRound1 == 0 || strengthDefenderArcRound1 == 0) {
                kilrateDefendArcherBaseRound1 = 0
            } else {
                if (strengthDefenderArcRound1 <= strengthAttackerArcRound1) {
                    kilrateDefendArcherBaseRound1 = 1
                } else {
                    kilrateDefendArcherBaseRound1 = Math.pow((strengthAttackerArcRound1 / strengthDefenderArcRound1), (1 / 2)) / (strengthDefenderArcRound1 / strengthAttackerArcRound1)
                }
            }
            killRateRound1attackerInfCalc()
        }

        function killRateRound1attackerInfCalc() {
            if (strengthAttackerInfRound1 == 0 || strengthDefenderInfRound1 == 0) {
                kilrateAttackInfantryBaseRound1 = 0
            } else {
                if (strengthAttackerInfRound1 <= strengthDefenderInfRound1) {
                    kilrateAttackInfantryBaseRound1 = 1
                } else {
                    kilrateAttackInfantryBaseRound1 = Math.pow((strengthDefenderInfRound1 / strengthAttackerInfRound1), (1 / 2)) / (strengthAttackerInfRound1 / strengthDefenderInfRound1)
                }
            }
            killRateRound1attackerCavCalc()
        }

        function killRateRound1attackerCavCalc() {
            if (strengthAttackerCavRound1 == 0 || strengthDefenderCavRound1 == 0) {
                kilrateAttackCavalryBaseRound1 = 0
            } else {
                if (strengthAttackerCavRound1 <= strengthDefenderCavRound1) {
                    kilrateAttackCavalryBaseRound1 = 1
                } else {
                    kilrateAttackCavalryBaseRound1 = Math.pow((strengthDefenderCavRound1 / strengthAttackerCavRound1), (1 / 2)) / (strengthAttackerCavRound1 / strengthDefenderCavRound1)
                }
            }
            killRateRound1attackerArcCalc()
        }

        function killRateRound1attackerArcCalc() {
            if (strengthAttackerArcRound1 == 0 || strengthDefenderArcRound1 == 0) {
                kilrateAttackArcherBaseRound1 = 0
            } else {
                if (strengthAttackerArcRound1 <= strengthDefenderArcRound1) {
                    kilrateAttackArcherBaseRound1 = 1
                } else {
                    kilrateAttackArcherBaseRound1 = Math.pow((strengthDefenderArcRound1 / strengthAttackerArcRound1), (1 / 2)) / (strengthAttackerArcRound1 / strengthDefenderArcRound1)
                }
            }
            killRateRound1()
        }

        function killRateRound1() {
            killRateRound1attackerInf = Math.round(kilrateAttackInfantryBaseRound1 * 1000000) / 1000000
            killRateRound1attackerCav = Math.round(kilrateAttackCavalryBaseRound1 * 1000000) / 1000000
            killRateRound1attackerArc = Math.round(kilrateAttackArcherBaseRound1 * 1000000) / 1000000
            killRateRound1defenderInf = Math.round(kilrateDefendInfantryBaseRound1 * 1000000) / 1000000
            killRateRound1defenderCav = Math.round(kilrateDefendCavalryBaseRound1 * 1000000) / 1000000
            killRateRound1defenderArc = Math.round(kilrateDefendArcherBaseRound1 * 1000000) / 1000000
            lossesRound1()
        }

        function lossesRound1() {
            spearD_lossesRound1 = Math.round(-spearD_survivorsRound1ModifiedInf * killRateRound1defenderInf + 0.000001) + Math.round(-spearD_survivorsRound1ModifiedCav * killRateRound1defenderCav + 0.000001) + Math.round(-spearD_survivorsRound1ModifiedArc * killRateRound1defenderArc + 0.000001)
            swordD_lossesRound1 = Math.round(-swordD_survivorsRound1ModifiedInf * killRateRound1defenderInf + 0.000001) + Math.round(-swordD_survivorsRound1ModifiedCav * killRateRound1defenderCav + 0.000001) + Math.round(-swordD_survivorsRound1ModifiedArc * killRateRound1defenderArc + 0.000001)
            axeD_lossesRound1 = Math.round(-axeD_survivorsRound1ModifiedInf * killRateRound1defenderInf + 0.000001) + Math.round(-axeD_survivorsRound1ModifiedCav * killRateRound1defenderCav + 0.000001) + Math.round(-axeD_survivorsRound1ModifiedArc * killRateRound1defenderArc + 0.000001)
            archerD_lossesRound1 = Math.round(-archerD_survivorsRound1ModifiedInf * killRateRound1defenderInf + 0.000001) + Math.round(-archerD_survivorsRound1ModifiedCav * killRateRound1defenderCav + 0.000001) + Math.round(-archerD_survivorsRound1ModifiedArc * killRateRound1defenderArc + 0.000001)
            lcD_lossesRound1 = Math.round(-lcD_survivorsRound1ModifiedInf * killRateRound1defenderInf + 0.000001) + Math.round(-lcD_survivorsRound1ModifiedCav * killRateRound1defenderCav + 0.000001) + Math.round(-lcD_survivorsRound1ModifiedArc * killRateRound1defenderArc + 0.000001)
            maD_lossesRound1 = Math.round(-maD_survivorsRound1ModifiedInf * killRateRound1defenderInf + 0.000001) + Math.round(-maD_survivorsRound1ModifiedCav * killRateRound1defenderCav + 0.000001) + Math.round(-maD_survivorsRound1ModifiedArc * killRateRound1defenderArc + 0.000001)
            hcD_lossesRound1 = Math.round(-hcD_survivorsRound1ModifiedInf * killRateRound1defenderInf + 0.000001) + Math.round(-hcD_survivorsRound1ModifiedCav * killRateRound1defenderCav + 0.000001) + Math.round(-hcD_survivorsRound1ModifiedArc * killRateRound1defenderArc + 0.000001)
            ramD_lossesRound1 = Math.round(-ramD_survivorsRound1ModifiedInf * killRateRound1defenderInf + 0.000001) + Math.round(-ramD_survivorsRound1ModifiedCav * killRateRound1defenderCav + 0.000001) + Math.round(-ramD_survivorsRound1ModifiedArc * killRateRound1defenderArc + 0.000001)
            catapultD_lossesRound1 = Math.round(-catapultD_survivorsRound1ModifiedInf * killRateRound1defenderInf + 0.000001) + Math.round(-catapultD_survivorsRound1ModifiedCav * killRateRound1defenderCav + 0.000001) + Math.round(-catapultD_survivorsRound1ModifiedArc * killRateRound1defenderArc + 0.000001)
            trebuchetD_lossesRound1 = Math.round(-trebuchetD_survivorsRound1ModifiedInf * killRateRound1defenderInf + 0.000001) + Math.round(-trebuchetD_survivorsRound1ModifiedCav * killRateRound1defenderCav + 0.000001) + Math.round(-trebuchetD_survivorsRound1ModifiedArc * killRateRound1defenderArc + 0.000001)
            berserkerD_lossesRound1 = Math.round(-berserkerD_survivorsRound1ModifiedInf * killRateRound1defenderInf + 0.000001) + Math.round(-berserkerD_survivorsRound1ModifiedCav * killRateRound1defenderCav + 0.000001) + Math.round(-berserkerD_survivorsRound1ModifiedArc * killRateRound1defenderArc + 0.000001)
            knightD_lossesRound1 = Math.round(-knightD_survivorsRound1ModifiedInf * killRateRound1defenderInf + 0.000001) + Math.round(-knightD_survivorsRound1ModifiedCav * killRateRound1defenderCav + 0.000001) + Math.round(-knightD_survivorsRound1ModifiedArc * killRateRound1defenderArc + 0.000001)
            snobD_lossesRound1 = Math.round(-snobD_survivorsRound1ModifiedInf * killRateRound1defenderInf + 0.000001) + Math.round(-snobD_survivorsRound1ModifiedCav * killRateRound1defenderCav + 0.000001) + Math.round(-snobD_survivorsRound1ModifiedArc * killRateRound1defenderArc + 0.000001)
            spearA_lossesRound1 = Math.round(-spearA * killRateRound1attackerInf + 0.000001)
            swordA_lossesRound1 = Math.round(-swordA * killRateRound1attackerInf + 0.000001)
            axeA_lossesRound1 = Math.round(-axeA * killRateRound1attackerInf + 0.000001)
            berserkerA_lossesRound1 = Math.round(-berserkerA * killRateRound1attackerInf + 0.000001)
            archerA_lossesRound1 = Math.round(-archerA * killRateRound1attackerArc + 0.000001)
            maA_lossesRound1 = Math.round(-maA * killRateRound1attackerArc + 0.000001)
            lcA_lossesRound1 = Math.round(-lcA * killRateRound1attackerCav + 0.000001)
            hcA_lossesRound1 = Math.round(-hcA * killRateRound1attackerCav + 0.000001)
            if (largestGroup == 'cav') {
                ramA_lossesRound1 = Math.round(-ramsPreRound * killRateRound1attackerCav + 0.000001)
                catapultA_lossesRound1 = Math.round(-catapultPreRound * killRateRound1attackerCav + 0.000001)
                trebuchetA_lossesRound1 = Math.round(-trebuchetA * killRateRound1attackerCav + 0.000001)
                knightA_lossesRound1 = Math.round(-knightA * killRateRound1attackerCav + 0.000001)
                snobA_lossesRound1 = Math.round(-snobA * killRateRound1attackerCav + 0.000001)
            } else if (largestGroup == 'inf') {
                ramA_lossesRound1 = Math.round(-ramsPreRound * killRateRound1attackerInf + 0.000001)
                catapultA_lossesRound1 = Math.round(-catapultPreRound * killRateRound1attackerInf + 0.000001)
                trebuchetA_lossesRound1 = Math.round(-trebuchetA * killRateRound1attackerInf + 0.000001)
                knightA_lossesRound1 = Math.round(-knightA * killRateRound1attackerInf + 0.000001)
                snobA_lossesRound1 = Math.round(-snobA * killRateRound1attackerInf + 0.000001)
            } else if (largestGroup == 'arc') {
                ramA_lossesRound1 = Math.round(-ramsPreRound * killRateRound1attackerArc + 0.000001)
                catapultA_lossesRound1 = Math.round(-catapultPreRound * killRateRound1attackerArc + 0.000001)
                trebuchetA_lossesRound1 = Math.round(-trebuchetA * killRateRound1attackerArc + 0.000001)
                knightA_lossesRound1 = Math.round(-knightA * killRateRound1attackerArc + 0.000001)
                snobA_lossesRound1 = Math.round(-snobA * killRateRound1attackerArc + 0.000001)
            }
            afterFirstStageSurvivors()
        }

        function afterFirstStageSurvivors() {
            spearA_survivorsRound1 = spearA + spearA_lossesRound1
            swordA_survivorsRound1 = swordA + swordA_lossesRound1
            axeA_survivorsRound1 = axeA + axeA_lossesRound1
            archerA_survivorsRound1 = archerA + archerA_lossesRound1
            lcA_survivorsRound1 = lcA + lcA_lossesRound1
            maA_survivorsRound1 = maA + maA_lossesRound1
            hcA_survivorsRound1 = hcA + hcA_lossesRound1
            ramA_survivorsRound1 = ramsPreRound + ramA_lossesRound1
            catapultA_survivorsRound1 = catapultPreRound + catapultA_lossesRound1
            trebuchetA_survivorsRound1 = trebuchetA + trebuchetA_lossesRound1
            berserkerA_survivorsRound1 = berserkerA + berserkerA_lossesRound1
            snobA_survivorsRound1 = snobA + snobA_lossesRound1
            knightA_survivorsRound1 = knightA + knightA_lossesRound1
            spearD_survivorsRound1 = spearD + spearD_lossesRound1
            swordD_survivorsRound1 = swordD + swordD_lossesRound1
            axeD_survivorsRound1 = axeD + axeD_lossesRound1
            archerD_survivorsRound1 = archerD + archerD_lossesRound1
            lcD_survivorsRound1 = lcD + lcD_lossesRound1
            maD_survivorsRound1 = maD + maD_lossesRound1
            hcD_survivorsRound1 = hcD + hcD_lossesRound1
            ramD_survivorsRound1 = ramD + ramD_lossesRound1
            catapultD_survivorsRound1 = catapultD + catapultD_lossesRound1
            trebuchetD_survivorsRound1 = trebuchetD + trebuchetD_lossesRound1
            berserkerD_survivorsRound1 = berserkerD + berserkerD_lossesRound1
            snobD_survivorsRound1 = snobD + snobD_lossesRound1
            knightD_survivorsRound1 = knightD + knightD_lossesRound1
            lossesProvisionsRound1Total()
        }

        function lossesProvisionsRound1Total() {
            lossesAttackerRound1Total = spearA_lossesRound1 * food[0] + swordA_lossesRound1 * food[1] + axeA_lossesRound1 * food[2] + archerA_lossesRound1 * food[3] + lcA_lossesRound1 * food[4] + maA_lossesRound1 * food[5] + hcA_lossesRound1 * food[6] + ramA_lossesRound1 * food[7] + catapultA_lossesRound1 * food[8] + knightA_lossesRound1 * food[9] + snobA_lossesRound1 * food[10] + trebuchetA_lossesRound1 * food[11] + berserkerA_lossesRound1 * food[12]
            lossesDefenderRound1Total = spearD_lossesRound1 * food[0] + swordD_lossesRound1 * food[1] + axeD_lossesRound1 * food[2] + archerD_lossesRound1 * food[3] + lcD_lossesRound1 * food[4] + maD_lossesRound1 * food[5] + hcD_lossesRound1 * food[6] + ramD_lossesRound1 * food[7] + catapultD_lossesRound1 * food[8] + knightD_lossesRound1 * food[9] + snobD_lossesRound1 * food[10] + trebuchetD_lossesRound1 * food[11] + berserkerD_lossesRound1 * food[12]
            console.log(lossesAttackerRound1Total, lossesDefenderRound1Total)
            survivorsProvisionsRound1Total()
        }

        function survivorsProvisionsRound1Total() {
            survivorsAttackerRound1Total = spearA_survivorsRound1 * food[0] + swordA_survivorsRound1 * food[1] + axeA_survivorsRound1 * food[2] + archerA_survivorsRound1 * food[3] + lcA_survivorsRound1 * food[4] + maA_survivorsRound1 * food[5] + hcA_survivorsRound1 * food[6] + ramA_survivorsRound1 * food[7] + catapultA_survivorsRound1 * food[8] + trebuchetA_survivorsRound1 * food[11] + berserkerA_survivorsRound1 * food[12] + snobA_survivorsRound1 * food[10] + knightA_survivorsRound1 * food[9]
            survivorsDefenderRound1Total = spearD_survivorsRound1 * food[0] + swordD_survivorsRound1 * food[1] + axeD_survivorsRound1 * food[2] + archerD_survivorsRound1 * food[3] + lcD_survivorsRound1 * food[4] + maD_survivorsRound1 * food[5] + hcD_survivorsRound1 * food[6] + ramD_survivorsRound1 * food[7] + catapultD_survivorsRound1 * food[8] + trebuchetD_survivorsRound1 * food[11] + berserkerD_survivorsRound1 * food[12] + snobD_survivorsRound1 * food[10] + knightD_survivorsRound1 * food[9]
            console.log(survivorsDefenderRound1Total, survivorsAttackerRound1Total)
            armyLossesPercentEachRoundCalc()
        }

        function armyLossesPercentEachRoundCalc() {
            if (strengthAttackerRound1 == 0 || strengthDefenderRound1 == 0) {
                armyLossesPercentEachRound = 0
            } else if (strengthDefenderRound1 <= strengthAttackerRound1) {
                armyLossesPercentEachRound = 1
            } else {
                armyLossesPercentEachRound = Math.pow((strengthAttackerRound1 / strengthDefenderRound1), (1 / 2) / (strengthDefenderRound1 / strengthAttackerRound1))
            }
            console.log(armyLossesPercentEachRound)
            totalProvisionsRound2()
        }

        function totalProvisionsRound2() {
            provisionAttackerRound2Total = spearA_survivorsRound1 * food[0] + swordA_survivorsRound1 * food[1] + axeA_survivorsRound1 * food[2] + archerA_survivorsRound1 * food[3] + lcA_survivorsRound1 * food[4] + maA_survivorsRound1 * food[5] + hcA_survivorsRound1 * food[6] + ramA_survivorsRound1 * food[7] + catapultA_survivorsRound1 * food[8] + knightA_survivorsRound1 * food[9] + snobA_survivorsRound1 * food[10] + trebuchetA_survivorsRound1 * food[11] + berserkerA_survivorsRound1 * food[12]
            provisionDefenderRound2Total = spearD_survivorsRound1 * food[0] + swordD_survivorsRound1 * food[1] + axeD_survivorsRound1 * food[2] + archerD_survivorsRound1 * food[3] + lcD_survivorsRound1 * food[4] + maD_survivorsRound1 * food[5] + hcD_survivorsRound1 * food[6] + ramD_survivorsRound1 * food[7] + catapultD_survivorsRound1 * food[8] + knightD_survivorsRound1 * food[9] + snobD_survivorsRound1 * food[10] + trebuchetD_survivorsRound1 * food[11] + berserkerD_survivorsRound1 * food[12]
            console.log(provisionAttackerRound2Total, provisionDefenderRound2Total)
            siegeProvisionRound2Calc()
        }

        function siegeProvisionRound2Calc() {
            siegeProvisionRound2 = ramA_survivorsRound1 * food[7] + catapultA_survivorsRound1 * food[8] + trebuchetA_survivorsRound1 * food[11] + knightA_survivorsRound1 * food[9]
            provisionAttackerAllRound2()
        }

        function provisionAttackerAllRound2() {
            if (largestGroup == 'cav') {
                provisionAttackerCavRound2 = lcA_survivorsRound1 * food[4] + hcA_survivorsRound1 * food[6] + siegeProvisionRound2
                provisionAttackerInfRound2 = spearA_survivorsRound1 * food[0] + swordA_survivorsRound1 * food[1] + axeA_survivorsRound1 * food[2] + berserkerA_survivorsRound1 * food[12] + snobA_survivorsRound1 * food[10]
                provisionAttackerArcRound2 = archerA_survivorsRound1 * food[3] + maA_survivorsRound1 * food[5]
            } else if (largestGroup == 'inf') {
                provisionAttackerInfRound2 = spearA_survivorsRound1 * food[0] + swordA_survivorsRound1 * food[1] + axeA_survivorsRound1 * food[2] + berserkerA_survivorsRound1 * food[12] + snobA_survivorsRound1 * food[10] + siegeProvisionRound2
                provisionAttackerCavRound2 = lcA_survivorsRound1 * food[4] + hcA_survivorsRound1 * food[6]
                provisionAttackerArcRound2 = archerA_survivorsRound1 * food[3] + maA_survivorsRound1 * food[5]
            } else if (largestGroup == 'arc') {
                provisionAttackerInfRound2 = spearA_survivorsRound1 * food[0] + swordA_survivorsRound1 * food[1] + axeA_survivorsRound1 * food[2] + berserkerA_survivorsRound1 * food[12] + snobA_survivorsRound1 * food[10]
                provisionAttackerCavRound2 = lcA_survivorsRound1 * food[4] + hcA_survivorsRound1 * food[6]
                provisionAttackerArcRound2 = archerA_survivorsRound1 * food[3] + maA_survivorsRound1 * food[5] + siegeProvisionRound2
            } else {
                provisionAttackerInfRound2 = spearA_survivorsRound1 * food[0] + swordA_survivorsRound1 * food[1] + axeA_survivorsRound1 * food[2] + berserkerA_survivorsRound1 * food[12] + snobA_survivorsRound1 * food[10]
                provisionAttackerCavRound2 = lcA_survivorsRound1 * food[4] + hcA_survivorsRound1 * food[6]
                provisionAttackerArcRound2 = archerA_survivorsRound1 * food[3] + maA_survivorsRound1 * food[5]
            }
            lossesPercentRound2InfCalc()
        }

        function lossesPercentRound2InfCalc() {
            if (provisionAttackerInfRound2 == 0) {
                lossesPercentRound2Inf = 0
            } else {
                lossesPercentRound2Inf = Math.round((provisionAttackerInfRound2 / provisionAttackerRound2Total) * 10000) / 10000
            }
            lossesPercentRound2CavCalc()
        }

        function lossesPercentRound2CavCalc() {
            if (provisionAttackerCavRound2 == 0) {
                lossesPercentRound2Cav = 0
            } else {
                lossesPercentRound2Cav = Math.round((provisionAttackerCavRound2 / provisionAttackerRound2Total) * 10000) / 10000
            }
            lossesPercentRound2ArcCalc()
        }

        function lossesPercentRound2ArcCalc() {
            if (provisionAttackerArcRound2 == 0) {
                lossesPercentRound2Arc = 0
            } else {
                lossesPercentRound2Arc = Math.round((provisionAttackerArcRound2 / provisionAttackerRound2Total) * 10000) / 10000
            }
            console.log(lossesPercentRound2Arc)
            survivorsRound2Modified()
        }

        function survivorsRound2Modified() {
            spearD_survivorsRound2ModifiedInf = Math.round(spearD_survivorsRound1 * lossesPercentRound2Inf)
            spearD_survivorsRound2ModifiedCav = Math.round(spearD_survivorsRound1 * lossesPercentRound2Cav)
            spearD_survivorsRound2ModifiedArc = spearD_survivorsRound1 - spearD_survivorsRound2ModifiedCav - spearD_survivorsRound2ModifiedInf
            swordD_survivorsRound2ModifiedInf = Math.round(swordD_survivorsRound1 * lossesPercentRound2Inf)
            swordD_survivorsRound2ModifiedCav = Math.round(swordD_survivorsRound1 * lossesPercentRound2Cav)
            swordD_survivorsRound2ModifiedArc = swordD_survivorsRound1 - swordD_survivorsRound2ModifiedCav - swordD_survivorsRound2ModifiedInf
            axeD_survivorsRound2ModifiedInf = Math.round(axeD_survivorsRound1 * lossesPercentRound2Inf)
            axeD_survivorsRound2ModifiedCav = Math.round(axeD_survivorsRound1 * lossesPercentRound2Cav)
            axeD_survivorsRound2ModifiedArc = axeD_survivorsRound1 - axeD_survivorsRound2ModifiedCav - axeD_survivorsRound2ModifiedInf
            archerD_survivorsRound2ModifiedInf = Math.round(archerD_survivorsRound1 * lossesPercentRound2Inf)
            archerD_survivorsRound2ModifiedCav = Math.round(archerD_survivorsRound1 * lossesPercentRound2Cav)
            archerD_survivorsRound2ModifiedArc = archerD_survivorsRound1 - archerD_survivorsRound2ModifiedCav - archerD_survivorsRound2ModifiedInf
            lcD_survivorsRound2ModifiedInf = Math.round(lcD_survivorsRound1 * lossesPercentRound2Inf)
            lcD_survivorsRound2ModifiedCav = Math.round(lcD_survivorsRound1 * lossesPercentRound2Cav)
            lcD_survivorsRound2ModifiedArc = lcD_survivorsRound1 - lcD_survivorsRound2ModifiedCav - lcD_survivorsRound2ModifiedInf
            maD_survivorsRound2ModifiedInf = Math.round(maD_survivorsRound1 * lossesPercentRound2Inf)
            maD_survivorsRound2ModifiedCav = Math.round(maD_survivorsRound1 * lossesPercentRound2Cav)
            maD_survivorsRound2ModifiedArc = maD_survivorsRound1 - maD_survivorsRound2ModifiedCav - maD_survivorsRound2ModifiedInf
            hcD_survivorsRound2ModifiedInf = Math.round(hcD_survivorsRound1 * lossesPercentRound2Inf)
            hcD_survivorsRound2ModifiedCav = Math.round(hcD_survivorsRound1 * lossesPercentRound2Cav)
            hcD_survivorsRound2ModifiedArc = hcD_survivorsRound1 - hcD_survivorsRound2ModifiedCav - hcD_survivorsRound2ModifiedInf
            ramD_survivorsRound2ModifiedInf = Math.round(ramD_survivorsRound1 * lossesPercentRound2Inf)
            ramD_survivorsRound2ModifiedCav = Math.round(ramD_survivorsRound1 * lossesPercentRound2Cav)
            ramD_survivorsRound2ModifiedArc = ramD_survivorsRound1 - ramD_survivorsRound2ModifiedCav - ramD_survivorsRound2ModifiedInf
            catapultD_survivorsRound2ModifiedInf = Math.round(catapultD_survivorsRound1 * lossesPercentRound2Inf)
            catapultD_survivorsRound2ModifiedCav = Math.round(catapultD_survivorsRound1 * lossesPercentRound2Cav)
            catapultD_survivorsRound2ModifiedArc = catapultD_survivorsRound1 - catapultD_survivorsRound2ModifiedCav - catapultD_survivorsRound2ModifiedInf
            snobD_survivorsRound2ModifiedInf = Math.round(snobD_survivorsRound1 * lossesPercentRound2Inf)
            snobD_survivorsRound2ModifiedCav = Math.round(snobD_survivorsRound1 * lossesPercentRound2Cav)
            snobD_survivorsRound2ModifiedArc = snobD_survivorsRound1 - snobD_survivorsRound2ModifiedCav - snobD_survivorsRound2ModifiedInf
            trebuchetD_survivorsRound2ModifiedInf = Math.round(trebuchetD_survivorsRound1 * lossesPercentRound2Inf)
            trebuchetD_survivorsRound2ModifiedCav = Math.round(trebuchetD_survivorsRound1 * lossesPercentRound2Cav)
            trebuchetD_survivorsRound2ModifiedArc = trebuchetD_survivorsRound1 - trebuchetD_survivorsRound2ModifiedCav - trebuchetD_survivorsRound2ModifiedInf
            berserkerD_survivorsRound2ModifiedInf = Math.round(berserkerD_survivorsRound1 * lossesPercentRound2Inf)
            berserkerD_survivorsRound2ModifiedCav = Math.round(berserkerD_survivorsRound1 * lossesPercentRound2Cav)
            berserkerD_survivorsRound2ModifiedArc = berserkerD_survivorsRound1 - berserkerD_survivorsRound2ModifiedCav - berserkerD_survivorsRound2ModifiedInf
            knightD_survivorsRound2ModifiedInf = Math.round(knightD_survivorsRound1 * lossesPercentRound2Inf)
            knightD_survivorsRound2ModifiedCav = Math.round(knightD_survivorsRound1 * lossesPercentRound2Cav)
            knightD_survivorsRound2ModifiedArc = knightD_survivorsRound1 - knightD_survivorsRound2ModifiedCav - knightD_survivorsRound2ModifiedInf
            provisionDefenderRound2()
        }

        function provisionDefenderRound2() {
            provisionDefenderInfRound2 = spearD_survivorsRound2ModifiedInf * food[0] + swordD_survivorsRound2ModifiedInf * food[1] + axeD_survivorsRound2ModifiedInf * food[2] + berserkerD_survivorsRound2ModifiedInf * food[12] + snobD_survivorsRound2ModifiedInf * food[10] + lcD_survivorsRound2ModifiedInf * food[4] + hcD_survivorsRound2ModifiedInf * food[6] + archerD_survivorsRound2ModifiedInf * food[3] + maD_survivorsRound2ModifiedInf * food[5] + ramD_survivorsRound2ModifiedInf * food[7] + catapultD_survivorsRound2ModifiedInf * food[8] + trebuchetD_survivorsRound2ModifiedInf * food[11] + knightD_survivorsRound2ModifiedInf * food[9]
            provisionDefenderCavRound2 = spearD_survivorsRound2ModifiedCav * food[0] + swordD_survivorsRound2ModifiedCav * food[1] + axeD_survivorsRound2ModifiedCav * food[2] + berserkerD_survivorsRound2ModifiedCav * food[12] + snobD_survivorsRound2ModifiedCav * food[10] + lcD_survivorsRound2ModifiedCav * food[4] + hcD_survivorsRound2ModifiedCav * food[6] + archerD_survivorsRound2ModifiedCav * food[3] + maD_survivorsRound2ModifiedCav * food[5] + ramD_survivorsRound2ModifiedCav * food[7] + catapultD_survivorsRound2ModifiedCav * food[8] + trebuchetD_survivorsRound2ModifiedCav * food[11] + knightD_survivorsRound2ModifiedCav * food[9]
            provisionDefenderArcRound2 = spearD_survivorsRound2ModifiedArc * food[0] + swordD_survivorsRound2ModifiedArc * food[1] + axeD_survivorsRound2ModifiedArc * food[2] + berserkerD_survivorsRound2ModifiedArc * food[12] + snobD_survivorsRound2ModifiedArc * food[10] + lcD_survivorsRound2ModifiedArc * food[4] + hcD_survivorsRound2ModifiedArc * food[6] + archerD_survivorsRound2ModifiedArc * food[3] + maD_survivorsRound2ModifiedArc * food[5] + ramD_survivorsRound2ModifiedArc * food[7] + catapultD_survivorsRound2ModifiedArc * food[8] + trebuchetD_survivorsRound2ModifiedArc * food[11] + knightD_survivorsRound2ModifiedArc * food[9]
            console.log(provisionDefenderArcRound2, provisionDefenderCavRound2, provisionDefenderInfRound2)
            strengthBaseDefenderAllRound2()
        }

        function strengthBaseDefenderAllRound2() {
            strengthBaseDefenderInfRound2 = spearD_survivorsRound2ModifiedInf * def_inf[0] * DknightItemBonusSpear[0] + swordD_survivorsRound2ModifiedInf * def_inf[1] * DknightItemBonusSword[0] + axeD_survivorsRound2ModifiedInf * def_inf[2] * DknightItemBonusAxe[0] + berserkerD_survivorsRound2ModifiedInf * def_inf[12] + snobD_survivorsRound2ModifiedInf * def_inf[10] + lcD_survivorsRound2ModifiedInf * def_inf[4] * DknightItemBonusLc[0] + hcD_survivorsRound2ModifiedInf * def_inf[6] * DknightItemBonusHc[0] + archerD_survivorsRound2ModifiedInf * def_inf[3] * DknightItemBonusArcher[0] + maD_survivorsRound2ModifiedInf * def_inf[5] * DknightItemBonusMa[0] + ramD_survivorsRound2ModifiedInf * def_inf[7] * DknightItemBonusRam[0] + catapultD_survivorsRound2ModifiedInf * def_inf[8] * DknightItemBonusCatapult[0] + trebuchetD_survivorsRound2ModifiedInf * def_inf[11] + knightD_survivorsRound2ModifiedInf * def_inf[9]
            strengthBaseDefenderCavRound2 = spearD_survivorsRound2ModifiedCav * def_kav[0] * DknightItemBonusSpear[0] + swordD_survivorsRound2ModifiedCav * def_kav[1] * DknightItemBonusSword[0] + axeD_survivorsRound2ModifiedCav * def_kav[2] * DknightItemBonusAxe[0] + berserkerD_survivorsRound2ModifiedCav * def_kav[12] + snobD_survivorsRound2ModifiedCav * def_kav[10] + lcD_survivorsRound2ModifiedCav * def_kav[4] * DknightItemBonusLc[0] + hcD_survivorsRound2ModifiedCav * def_kav[6] * DknightItemBonusHc[0] + archerD_survivorsRound2ModifiedCav * def_kav[3] * DknightItemBonusArcher[0] + maD_survivorsRound2ModifiedCav * def_kav[5] * DknightItemBonusMa[0] + ramD_survivorsRound2ModifiedCav * def_kav[7] * DknightItemBonusRam[0] + catapultD_survivorsRound2ModifiedCav * def_kav[8] * DknightItemBonusCatapult[0] + trebuchetD_survivorsRound2ModifiedCav * def_kav[11] + knightD_survivorsRound2ModifiedCav * def_kav[9]
            strengthBaseDefenderArcRound2 = spearD_survivorsRound2ModifiedArc * def_arc[0] * DknightItemBonusSpear[0] + swordD_survivorsRound2ModifiedArc * def_arc[1] * DknightItemBonusSword[0] + axeD_survivorsRound2ModifiedArc * def_arc[2] * DknightItemBonusAxe[0] + berserkerD_survivorsRound2ModifiedArc * def_arc[12] + snobD_survivorsRound2ModifiedArc * def_arc[10] + lcD_survivorsRound2ModifiedArc * def_arc[4] * DknightItemBonusLc[0] + hcD_survivorsRound2ModifiedArc * def_arc[6] * DknightItemBonusHc[0] + archerD_survivorsRound2ModifiedArc * def_arc[3] * DknightItemBonusArcher[0] + maD_survivorsRound2ModifiedArc * def_arc[5] * DknightItemBonusMa[0] + ramD_survivorsRound2ModifiedArc * def_arc[7] * DknightItemBonusRam[0] + catapultD_survivorsRound2ModifiedArc * def_arc[8] * DknightItemBonusCatapult[0] + trebuchetD_survivorsRound2ModifiedArc * def_arc[11] + knightD_survivorsRound2ModifiedArc * def_arc[9]
            siegeStrengthRound2Calc()
        }

        function siegeStrengthRound2Calc() {
            siegeStrengthRound2 = ramA_survivorsRound1 * attack[7] * knightItemBonusRam[1] + catapultA_survivorsRound1 * attack[8] * knightItemBonusCatapult[1] + trebuchetA_survivorsRound1 * attack[11] + knightA_survivorsRound1 * attack[9]
            strengthBaseAttackerAllRound2()
        }

        function strengthBaseAttackerAllRound2() {
            if (largestGroup == 'cav') {
                strengthBaseAttackerCavRound2 = lcA_survivorsRound1 * attack[4] * knightItemBonusLc[1] + hcA_survivorsRound1 * attack[6] * knightItemBonusHc[1] + siegeStrengthRound2
                strengthBaseAttackerInfRound2 = spearA_survivorsRound1 * attack[0] * knightItemBonusSpear[1] + swordA_survivorsRound1 * attack[1] * knightItemBonusSword[1] + axeA_survivorsRound1 * attack[2] * knightItemBonusAxe[1] + berserkerA_survivorsRound1 * attack[12] * doubleStrengthBonus + snobA_survivorsRound1 * attack[10]
                strengthBaseAttackerArcRound2 = archerA_survivorsRound1 * attack[3] * knightItemBonusArcher[1] + maA_survivorsRound1 * attack[5] * knightItemBonusMa[1]
            } else if (largestGroup == 'inf') {
                strengthBaseAttackerInfRound2 = spearA_survivorsRound1 * attack[0] * knightItemBonusSpear[1] + swordA_survivorsRound1 * attack[1] * knightItemBonusSword[1] + axeA_survivorsRound1 * attack[2] * knightItemBonusAxe[1] + berserkerA_survivorsRound1 * attack[12] * doubleStrengthBonus + snobA_survivorsRound1 * attack[10] + siegeStrengthRound2
                strengthBaseAttackerCavRound2 = lcA_survivorsRound1 * attack[4] * knightItemBonusLc[1] + hcA_survivorsRound1 * attack[6] * knightItemBonusHc[1]
                strengthBaseAttackerArcRound2 = archerA_survivorsRound1 * attack[3] * knightItemBonusArcher[1] + maA_survivorsRound1 * attack[5] * knightItemBonusMa[1]
            } else if (largestGroup == 'arc') {
                strengthBaseAttackerInfRound2 = spearA_survivorsRound1 * attack[0] * knightItemBonusSpear[1] + swordA_survivorsRound1 * attack[1] * knightItemBonusSword[1] + axeA_survivorsRound1 * attack[2] * knightItemBonusAxe[1] + berserkerA_survivorsRound1 * attack[12] * doubleStrengthBonus + snobA_survivorsRound1 * attack[10]
                strengthBaseAttackerCavRound2 = lcA_survivorsRound1 * attack[4] * knightItemBonusLc[1] + hcA_survivorsRound1 * attack[6] * knightItemBonusHc[1]
                strengthBaseAttackerArcRound2 = archerA_survivorsRound1 * attack[3] * knightItemBonusArcher[1] + maA_survivorsRound1 * attack[5] * knightItemBonusMa[1] + siegeStrengthRound2
            } else {
                strengthBaseAttackerInfRound2 = spearA_survivorsRound1 * attack[0] * knightItemBonusSpear[1] + swordA_survivorsRound1 * attack[1] * knightItemBonusSword[1] + axeA_survivorsRound1 * attack[2] * knightItemBonusAxe[1] + berserkerA_survivorsRound1 * attack[12] * doubleStrengthBonus + snobA_survivorsRound1 * attack[10]
                strengthBaseAttackerCavRound2 = lcA_survivorsRound1 * attack[4] * knightItemBonusLc[1] + hcA_survivorsRound1 * attack[6] * knightItemBonusHc[1]
                strengthBaseAttackerArcRound2 = archerA_survivorsRound1 * attack[3] * knightItemBonusArcher[1] + maA_survivorsRound1 * attack[5] * knightItemBonusMa[1]
            }
            strengthRound2partly()
        }

        function strengthRound2partly() {
            strengthAttackerInfRound2 = strengthBaseAttackerInfRound2 * overalModifierOff
            strengthDefenderInfRound2 = strengthBaseDefenderInfRound2 * overalModifierDef
            strengthAttackerCavRound2 = strengthBaseAttackerCavRound2 * overalModifierOff
            strengthDefenderCavRound2 = strengthBaseDefenderCavRound2 * overalModifierDef
            strengthAttackerArcRound2 = strengthBaseAttackerArcRound2 * overalModifierOff
            strengthDefenderArcRound2 = strengthBaseDefenderArcRound2 * overalModifierDef
            strengthRound2()
        }

        function strengthRound2() {
            strengthAttackerRound2 = strengthAttackerInfRound2 + strengthAttackerCavRound2 + strengthAttackerArcRound2
            strengthDefenderRound2 = strengthDefenderInfRound2 + strengthDefenderCavRound2 + strengthDefenderArcRound2
            console.log(strengthAttackerRound2, strengthDefenderRound2)
            killRateRound2defenderInfCalc()
        }

        function killRateRound2defenderInfCalc() {
            if (strengthAttackerInfRound2 == 0 || strengthDefenderInfRound2 == 0) {
                kilrateDefendInfantryBaseRound2 = 0
            } else {
                if (strengthDefenderInfRound2 <= strengthAttackerInfRound2) {
                    kilrateDefendInfantryBaseRound2 = 1
                } else {
                    kilrateDefendInfantryBaseRound2 = Math.pow((strengthAttackerInfRound2 / strengthDefenderInfRound2), (1 / 2)) / (strengthDefenderInfRound2 / strengthAttackerInfRound2)
                }
            }
            killRateRound2defenderCavCalc()
        }

        function killRateRound2defenderCavCalc() {
            if (strengthAttackerCavRound2 == 0 || strengthDefenderCavRound2 == 0) {
                kilrateDefendCavalryBaseRound2 = 0
            } else {
                if (strengthDefenderCavRound2 <= strengthAttackerCavRound2) {
                    kilrateDefendCavalryBaseRound2 = 1
                } else {
                    kilrateDefendCavalryBaseRound2 = Math.pow((strengthAttackerCavRound2 / strengthDefenderCavRound2), (1 / 2)) / (strengthDefenderCavRound2 / strengthAttackerCavRound2)
                }
            }
            killRateRound2defenderArcCalc()
        }

        function killRateRound2defenderArcCalc() {
            if (strengthAttackerArcRound2 == 0 || strengthDefenderArcRound2 == 0) {
                kilrateDefendArcherBaseRound2 = 0
            } else {
                if (strengthDefenderArcRound2 <= strengthAttackerArcRound2) {
                    kilrateDefendArcherBaseRound2 = 1
                } else {
                    kilrateDefendArcherBaseRound2 = Math.pow((strengthAttackerArcRound2 / strengthDefenderArcRound2), (1 / 2)) / (strengthDefenderArcRound2 / strengthAttackerArcRound2)
                }
            }
            killRateRound2attackerInfCalc()
        }

        function killRateRound2attackerInfCalc() {
            if (strengthAttackerInfRound2 == 0 || strengthDefenderInfRound2 == 0) {
                kilrateAttackInfantryBaseRound2 = 0
            } else {
                if (strengthAttackerInfRound2 <= strengthDefenderInfRound2) {
                    kilrateAttackInfantryBaseRound2 = 1
                } else {
                    kilrateAttackInfantryBaseRound2 = Math.pow((strengthDefenderInfRound2 / strengthAttackerInfRound2), (1 / 2)) / (strengthAttackerInfRound2 / strengthDefenderInfRound2)
                }
            }
            killRateRound2attackerCavCalc()
        }

        function killRateRound2attackerCavCalc() {
            if (strengthAttackerCavRound2 == 0 || strengthDefenderCavRound2 == 0) {
                kilrateAttackCavalryBaseRound2 = 0
            } else {
                if (strengthAttackerCavRound2 <= strengthDefenderCavRound2) {
                    kilrateAttackCavalryBaseRound2 = 1
                } else {
                    kilrateAttackCavalryBaseRound2 = Math.pow((strengthDefenderCavRound2 / strengthAttackerCavRound2), (1 / 2)) / (strengthAttackerCavRound2 / strengthDefenderCavRound2)
                }
            }
            killRateRound2attackerArcCalc()
        }

        function killRateRound2attackerArcCalc() {
            if (strengthAttackerArcRound2 == 0 || strengthDefenderArcRound2 == 0) {
                kilrateAttackArcherBaseRound2 = 0
            } else {
                if (strengthAttackerArcRound2 <= strengthDefenderArcRound2) {
                    kilrateAttackArcherBaseRound2 = 1
                } else {
                    kilrateAttackArcherBaseRound2 = Math.pow((strengthDefenderArcRound2 / strengthAttackerArcRound2), (1 / 2)) / (strengthAttackerArcRound2 / strengthDefenderArcRound2)
                }
            }
            killRateRound2()
        }

        function killRateRound2() {
            killRateRound2attackerInf = Math.round(kilrateAttackInfantryBaseRound2 * 1000000) / 1000000
            killRateRound2attackerCav = Math.round(kilrateAttackCavalryBaseRound2 * 1000000) / 1000000
            killRateRound2attackerArc = Math.round(kilrateAttackArcherBaseRound2 * 1000000) / 1000000
            killRateRound2defenderInf = Math.round(kilrateDefendInfantryBaseRound2 * 1000000) / 1000000
            killRateRound2defenderCav = Math.round(kilrateDefendCavalryBaseRound2 * 1000000) / 1000000
            killRateRound2defenderArc = Math.round(kilrateDefendArcherBaseRound2 * 1000000) / 1000000
            lossesRound2()
        }

        function lossesRound2() {
            spearD_lossesRound2 = Math.round(-spearD_survivorsRound2ModifiedInf * killRateRound2defenderInf + 0.000001) + Math.round(-spearD_survivorsRound2ModifiedCav * killRateRound2defenderCav + 0.000001) + Math.round(-spearD_survivorsRound2ModifiedArc * killRateRound2defenderArc + 0.000001)
            swordD_lossesRound2 = Math.round(-swordD_survivorsRound2ModifiedInf * killRateRound2defenderInf + 0.000001) + Math.round(-swordD_survivorsRound2ModifiedCav * killRateRound2defenderCav + 0.000001) + Math.round(-swordD_survivorsRound2ModifiedArc * killRateRound2defenderArc + 0.000001)
            axeD_lossesRound2 = Math.round(-axeD_survivorsRound2ModifiedInf * killRateRound2defenderInf + 0.000001) + Math.round(-axeD_survivorsRound2ModifiedCav * killRateRound2defenderCav + 0.000001) + Math.round(-axeD_survivorsRound2ModifiedArc * killRateRound2defenderArc + 0.000001)
            archerD_lossesRound2 = Math.round(-archerD_survivorsRound2ModifiedInf * killRateRound2defenderInf + 0.000001) + Math.round(-archerD_survivorsRound2ModifiedCav * killRateRound2defenderCav + 0.000001) + Math.round(-archerD_survivorsRound2ModifiedArc * killRateRound2defenderArc + 0.000001)
            lcD_lossesRound2 = Math.round(-lcD_survivorsRound2ModifiedInf * killRateRound2defenderInf + 0.000001) + Math.round(-lcD_survivorsRound2ModifiedCav * killRateRound2defenderCav + 0.000001) + Math.round(-lcD_survivorsRound2ModifiedArc * killRateRound2defenderArc + 0.000001)
            maD_lossesRound2 = Math.round(-maD_survivorsRound2ModifiedInf * killRateRound2defenderInf + 0.000001) + Math.round(-maD_survivorsRound2ModifiedCav * killRateRound2defenderCav + 0.000001) + Math.round(-maD_survivorsRound2ModifiedArc * killRateRound2defenderArc + 0.000001)
            hcD_lossesRound2 = Math.round(-hcD_survivorsRound2ModifiedInf * killRateRound2defenderInf + 0.000001) + Math.round(-hcD_survivorsRound2ModifiedCav * killRateRound2defenderCav + 0.000001) + Math.round(-hcD_survivorsRound2ModifiedArc * killRateRound2defenderArc + 0.000001)
            ramD_lossesRound2 = Math.round(-ramD_survivorsRound2ModifiedInf * killRateRound2defenderInf + 0.000001) + Math.round(-ramD_survivorsRound2ModifiedCav * killRateRound2defenderCav + 0.000001) + Math.round(-ramD_survivorsRound2ModifiedArc * killRateRound2defenderArc + 0.000001)
            catapultD_lossesRound2 = Math.round(-catapultD_survivorsRound2ModifiedInf * killRateRound2defenderInf + 0.000001) + Math.round(-catapultD_survivorsRound2ModifiedCav * killRateRound2defenderCav + 0.000001) + Math.round(-catapultD_survivorsRound2ModifiedArc * killRateRound2defenderArc + 0.000001)
            trebuchetD_lossesRound2 = Math.round(-trebuchetD_survivorsRound2ModifiedInf * killRateRound2defenderInf + 0.000001) + Math.round(-trebuchetD_survivorsRound2ModifiedCav * killRateRound2defenderCav + 0.000001) + Math.round(-trebuchetD_survivorsRound2ModifiedArc * killRateRound2defenderArc + 0.000001)
            berserkerD_lossesRound2 = Math.round(-berserkerD_survivorsRound2ModifiedInf * killRateRound2defenderInf + 0.000001) + Math.round(-berserkerD_survivorsRound2ModifiedCav * killRateRound2defenderCav + 0.000001) + Math.round(-berserkerD_survivorsRound2ModifiedArc * killRateRound2defenderArc + 0.000001)
            knightD_lossesRound2 = Math.round(-knightD_survivorsRound2ModifiedInf * killRateRound2defenderInf + 0.000001) + Math.round(-knightD_survivorsRound2ModifiedCav * killRateRound2defenderCav + 0.000001) + Math.round(-knightD_survivorsRound2ModifiedArc * killRateRound2defenderArc + 0.000001)
            snobD_lossesRound2 = Math.round(-snobD_survivorsRound2ModifiedInf * killRateRound2defenderInf + 0.000001) + Math.round(-snobD_survivorsRound2ModifiedCav * killRateRound2defenderCav + 0.000001) + Math.round(-snobD_survivorsRound2ModifiedArc * killRateRound2defenderArc + 0.000001)
            spearA_lossesRound2 = Math.round(-spearA_survivorsRound1 * killRateRound2attackerInf + 0.000001)
            swordA_lossesRound2 = Math.round(-swordA_survivorsRound1 * killRateRound2attackerInf + 0.000001)
            axeA_lossesRound2 = Math.round(-axeA_survivorsRound1 * killRateRound2attackerInf + 0.000001)
            berserkerA_lossesRound2 = Math.round(-berserkerA_survivorsRound1 * killRateRound2attackerInf + 0.000001)
            archerA_lossesRound2 = Math.round(-archerA_survivorsRound1 * killRateRound2attackerArc + 0.000001)
            maA_lossesRound2 = Math.round(-maA_survivorsRound1 * killRateRound2attackerArc + 0.000001)
            lcA_lossesRound2 = Math.round(-lcA_survivorsRound1 * killRateRound2attackerCav + 0.000001)
            hcA_lossesRound2 = Math.round(-hcA_survivorsRound1 * killRateRound2attackerCav + 0.000001)
            if (largestGroup == 'cav') {
                ramA_lossesRound2 = Math.round(-ramA_survivorsRound1 * killRateRound2attackerCav + 0.000001)
                catapultA_lossesRound2 = Math.round(-catapultA_survivorsRound1 * killRateRound2attackerCav + 0.000001)
                trebuchetA_lossesRound2 = Math.round(-trebuchetA_survivorsRound1 * killRateRound2attackerCav + 0.000001)
                knightA_lossesRound2 = Math.round(-knightA_survivorsRound1 * killRateRound2attackerCav + 0.000001)
            } else if (largestGroup == 'inf') {
                ramA_lossesRound2 = Math.round(-ramA_survivorsRound1 * killRateRound2attackerInf + 0.000001)
                catapultA_lossesRound2 = Math.round(-catapultA_survivorsRound1 * killRateRound2attackerInf + 0.000001)
                trebuchetA_lossesRound2 = Math.round(-trebuchetA_survivorsRound1 * killRateRound2attackerInf + 0.000001)
                knightA_lossesRound2 = Math.round(-knightA_survivorsRound1 * killRateRound2attackerInf + 0.000001)
            } else if (largestGroup == 'arc') {
                ramA_lossesRound2 = Math.round(-ramA_survivorsRound1 * killRateRound2attackerArc + 0.000001)
                catapultA_lossesRound2 = Math.round(-catapultA_survivorsRound1 * killRateRound2attackerArc + 0.000001)
                trebuchetA_lossesRound2 = Math.round(-trebuchetA_survivorsRound1 * killRateRound2attackerArc + 0.000001)
                knightA_lossesRound2 = Math.round(-knightA_survivorsRound1 * killRateRound2attackerArc + 0.000001)
            }
            lossesSnobRound2()
        }

        function lossesSnobRound2() {
            if ((snobA_survivorsRound1 * 100) == provisionAttackerInfRound2) {
                snobA_lossesRound2 = 0
            } else {
                snobA_lossesRound2 = Math.round(-snobA_survivorsRound1 * killRateRound2attackerInf + 0.000001)
            }
            afterSecondStageSurvivors()
        }

        function afterSecondStageSurvivors() {
            spearA_survivorsRound2 = spearA_survivorsRound1 + spearA_lossesRound2
            swordA_survivorsRound2 = swordA_survivorsRound1 + swordA_lossesRound2
            axeA_survivorsRound2 = axeA_survivorsRound1 + axeA_lossesRound2
            archerA_survivorsRound2 = archerA_survivorsRound1 + archerA_lossesRound2
            lcA_survivorsRound2 = lcA_survivorsRound1 + lcA_lossesRound2
            maA_survivorsRound2 = maA_survivorsRound1 + maA_lossesRound2
            hcA_survivorsRound2 = hcA_survivorsRound1 + hcA_lossesRound2
            ramA_survivorsRound2 = ramA_survivorsRound1 + ramA_lossesRound2
            catapultA_survivorsRound2 = catapultA_survivorsRound1 + catapultA_lossesRound2
            trebuchetA_survivorsRound2 = trebuchetA_survivorsRound1 + trebuchetA_lossesRound2
            berserkerA_survivorsRound2 = berserkerA_survivorsRound1 + berserkerA_lossesRound2
            snobA_survivorsRound2 = snobA_survivorsRound1 + snobA_lossesRound2
            knightA_survivorsRound2 = knightA_survivorsRound1 + knightA_lossesRound2
            spearD_survivorsRound2 = spearD_survivorsRound1 + spearD_lossesRound2
            swordD_survivorsRound2 = swordD_survivorsRound1 + swordD_lossesRound2
            axeD_survivorsRound2 = axeD_survivorsRound1 + axeD_lossesRound2
            archerD_survivorsRound2 = archerD_survivorsRound1 + archerD_lossesRound2
            lcD_survivorsRound2 = lcD_survivorsRound1 + lcD_lossesRound2
            maD_survivorsRound2 = maD_survivorsRound1 + maD_lossesRound2
            hcD_survivorsRound2 = hcD_survivorsRound1 + hcD_lossesRound2
            ramD_survivorsRound2 = ramD_survivorsRound1 + ramD_lossesRound2
            catapultD_survivorsRound2 = catapultD_survivorsRound1 + catapultD_lossesRound2
            trebuchetD_survivorsRound2 = trebuchetD_survivorsRound1 + trebuchetD_lossesRound2
            berserkerD_survivorsRound2 = berserkerD_survivorsRound1 + berserkerD_lossesRound2
            snobD_survivorsRound2 = snobD_survivorsRound1 + snobD_lossesRound2
            knightD_survivorsRound2 = knightD_survivorsRound1 + knightD_lossesRound2
            lossesProvisionsRound2Total()
        }

        function lossesProvisionsRound2Total() {
            lossesAttackerRound2Total = spearA_lossesRound2 * food[0] + swordA_lossesRound2 * food[1] + axeA_lossesRound2 * food[2] + archerA_lossesRound2 * food[3] + lcA_lossesRound2 * food[4] + maA_lossesRound2 * food[5] + hcA_lossesRound2 * food[6] + ramA_lossesRound2 * food[7] + catapultA_lossesRound2 * food[8] + knightA_lossesRound2 * food[9] + snobA_lossesRound2 * food[10] + trebuchetA_lossesRound2 * food[11] + berserkerA_lossesRound2 * food[12]
            lossesDefenderRound2Total = spearD_lossesRound2 * food[0] + swordD_lossesRound2 * food[1] + axeD_lossesRound2 * food[2] + archerD_lossesRound2 * food[3] + lcD_lossesRound2 * food[4] + maD_lossesRound2 * food[5] + hcD_lossesRound2 * food[6] + ramD_lossesRound2 * food[7] + catapultD_lossesRound2 * food[8] + knightD_lossesRound2 * food[9] + snobD_lossesRound2 * food[10] + trebuchetD_lossesRound2 * food[11] + berserkerD_lossesRound2 * food[12]
            console.log(lossesAttackerRound2Total, lossesDefenderRound2Total)
            survivorsProvisionsRound2Total()
        }

        function survivorsProvisionsRound2Total() {
            survivorsAttackerRound2Total = spearA_survivorsRound2 * food[0] + swordA_survivorsRound2 * food[1] + axeA_survivorsRound2 * food[2] + archerA_survivorsRound2 * food[3] + lcA_survivorsRound2 * food[4] + maA_survivorsRound2 * food[5] + hcA_survivorsRound2 * food[6] + ramA_survivorsRound2 * food[7] + catapultA_survivorsRound2 * food[8] + trebuchetA_survivorsRound2 * food[11] + berserkerA_survivorsRound2 * food[12] + snobA_survivorsRound2 * food[10] + knightA_survivorsRound2 * food[9]
            survivorsDefenderRound2Total = spearD_survivorsRound2 * food[0] + swordD_survivorsRound2 * food[1] + axeD_survivorsRound2 * food[2] + archerD_survivorsRound2 * food[3] + lcD_survivorsRound2 * food[4] + maD_survivorsRound2 * food[5] + hcD_survivorsRound2 * food[6] + ramD_survivorsRound2 * food[7] + catapultD_survivorsRound2 * food[8] + trebuchetD_survivorsRound2 * food[11] + berserkerD_survivorsRound2 * food[12] + snobD_survivorsRound2 * food[10] + knightD_survivorsRound2 * food[9]
            console.log(survivorsDefenderRound2Total, survivorsAttackerRound2Total)
            totalProvisionsRound3()
        }

        function totalProvisionsRound3() {
            provisionAttackerRound3Total = spearA_survivorsRound2 * food[0] + swordA_survivorsRound2 * food[1] + axeA_survivorsRound2 * food[2] + archerA_survivorsRound2 * food[3] + lcA_survivorsRound2 * food[4] + maA_survivorsRound2 * food[5] + hcA_survivorsRound2 * food[6] + ramA_survivorsRound2 * food[7] + catapultA_survivorsRound2 * food[8] + knightA_survivorsRound2 * food[9] + snobA_survivorsRound2 * food[10] + trebuchetA_survivorsRound2 * food[11] + berserkerA_survivorsRound2 * food[12]
            provisionDefenderRound3Total = spearD_survivorsRound2 * food[0] + swordD_survivorsRound2 * food[1] + axeD_survivorsRound2 * food[2] + archerD_survivorsRound2 * food[3] + lcD_survivorsRound2 * food[4] + maD_survivorsRound2 * food[5] + hcD_survivorsRound2 * food[6] + ramD_survivorsRound2 * food[7] + catapultD_survivorsRound2 * food[8] + knightD_survivorsRound2 * food[9] + snobD_survivorsRound2 * food[10] + trebuchetD_survivorsRound2 * food[11] + berserkerD_survivorsRound2 * food[12]
            console.log(provisionAttackerRound3Total, provisionDefenderRound3Total)
            siegeProvisionCalc()
        }

        function siegeProvisionCalc() {
            siegeProvision = ramA_survivorsRound2 * food[7] + catapultA_survivorsRound2 * food[8] + trebuchetA_survivorsRound2 * food[11] + knightA_survivorsRound2 * food[9]
            provisionAttackerAllRound3()
        }

        function provisionAttackerAllRound3() {
            if (largestGroup == 'cav') {
                provisionAttackerCavRound3 = lcA_survivorsRound2 * food[4] + hcA_survivorsRound2 * food[6] + siegeProvision
                provisionAttackerInfRound3 = spearA_survivorsRound2 * food[0] + swordA_survivorsRound2 * food[1] + axeA_survivorsRound2 * food[2] + berserkerA_survivorsRound2 * food[12] + snobA_survivorsRound2 * food[10]
                provisionAttackerArcRound3 = archerA_survivorsRound2 * food[3] + maA_survivorsRound2 * food[5]
            } else if (largestGroup == 'inf') {
                provisionAttackerInfRound3 = spearA_survivorsRound2 * food[0] + swordA_survivorsRound2 * food[1] + axeA_survivorsRound2 * food[2] + berserkerA_survivorsRound2 * food[12] + snobA_survivorsRound2 * food[10] + siegeProvision
                provisionAttackerCavRound3 = lcA_survivorsRound2 * food[4] + hcA_survivorsRound2 * food[6]
                provisionAttackerArcRound3 = archerA_survivorsRound2 * food[3] + maA_survivorsRound2 * food[5]
            } else if (largestGroup == 'arc') {
                provisionAttackerInfRound3 = spearA_survivorsRound2 * food[0] + swordA_survivorsRound2 * food[1] + axeA_survivorsRound2 * food[2] + berserkerA_survivorsRound2 * food[12] + snobA_survivorsRound2 * food[10]
                provisionAttackerCavRound3 = lcA_survivorsRound2 * food[4] + hcA_survivorsRound2 * food[6]
                provisionAttackerArcRound3 = archerA_survivorsRound2 * food[3] + maA_survivorsRound2 * food[5] + siegeProvision
            } else {
                provisionAttackerInfRound3 = spearA_survivorsRound2 * food[0] + swordA_survivorsRound2 * food[1] + axeA_survivorsRound2 * food[2] + berserkerA_survivorsRound2 * food[12] + snobA_survivorsRound2 * food[10]
                provisionAttackerCavRound3 = lcA_survivorsRound2 * food[4] + hcA_survivorsRound2 * food[6]
                provisionAttackerArcRound3 = archerA_survivorsRound2 * food[3] + maA_survivorsRound2 * food[5]
            }
            lossesPercentRound3InfCalc()
        }

        function lossesPercentRound3InfCalc() {
            if (provisionAttackerInfRound3 == 0) {
                lossesPercentRound3Inf = 0
            } else {
                lossesPercentRound3Inf = Math.round((provisionAttackerInfRound3 / provisionAttackerRound3Total) * 10000) / 10000
            }
            lossesPercentRound3CavCalc()
        }

        function lossesPercentRound3CavCalc() {
            if (provisionAttackerCavRound3 == 0) {
                lossesPercentRound3Cav = 0
            } else {
                lossesPercentRound3Cav = Math.round((provisionAttackerCavRound3 / provisionAttackerRound3Total) * 10000) / 10000
            }
            lossesPercentRound3ArcCalc()
        }

        function lossesPercentRound3ArcCalc() {
            if (provisionAttackerArcRound3 == 0) {
                lossesPercentRound3Arc = 0
            } else {
                lossesPercentRound3Arc = Math.round((provisionAttackerArcRound3 / provisionAttackerRound3Total) * 10000) / 10000
            }
            console.log(lossesPercentRound3Arc)
            survivorsRound3Modified()
        }

        function survivorsRound3Modified() {
            spearD_survivorsRound3ModifiedInf = Math.round(spearD_survivorsRound2 * lossesPercentRound3Inf)
            spearD_survivorsRound3ModifiedCav = Math.round(spearD_survivorsRound2 * lossesPercentRound3Cav)
            spearD_survivorsRound3ModifiedArc = spearD_survivorsRound2 - spearD_survivorsRound3ModifiedCav - spearD_survivorsRound3ModifiedInf
            swordD_survivorsRound3ModifiedInf = Math.round(swordD_survivorsRound2 * lossesPercentRound3Inf)
            swordD_survivorsRound3ModifiedCav = Math.round(swordD_survivorsRound2 * lossesPercentRound3Cav)
            swordD_survivorsRound3ModifiedArc = swordD_survivorsRound2 - swordD_survivorsRound3ModifiedCav - swordD_survivorsRound3ModifiedInf
            axeD_survivorsRound3ModifiedInf = Math.round(axeD_survivorsRound2 * lossesPercentRound3Inf)
            axeD_survivorsRound3ModifiedCav = Math.round(axeD_survivorsRound2 * lossesPercentRound3Cav)
            axeD_survivorsRound3ModifiedArc = axeD_survivorsRound2 - axeD_survivorsRound3ModifiedCav - axeD_survivorsRound3ModifiedInf
            archerD_survivorsRound3ModifiedInf = Math.round(archerD_survivorsRound2 * lossesPercentRound3Inf)
            archerD_survivorsRound3ModifiedCav = Math.round(archerD_survivorsRound2 * lossesPercentRound3Cav)
            archerD_survivorsRound3ModifiedArc = archerD_survivorsRound2 - archerD_survivorsRound3ModifiedCav - archerD_survivorsRound3ModifiedInf
            lcD_survivorsRound3ModifiedInf = Math.round(lcD_survivorsRound2 * lossesPercentRound3Inf)
            lcD_survivorsRound3ModifiedCav = Math.round(lcD_survivorsRound2 * lossesPercentRound3Cav)
            lcD_survivorsRound3ModifiedArc = lcD_survivorsRound2 - lcD_survivorsRound3ModifiedCav - lcD_survivorsRound3ModifiedInf
            maD_survivorsRound3ModifiedInf = Math.round(maD_survivorsRound2 * lossesPercentRound3Inf)
            maD_survivorsRound3ModifiedCav = Math.round(maD_survivorsRound2 * lossesPercentRound3Cav)
            maD_survivorsRound3ModifiedArc = maD_survivorsRound2 - maD_survivorsRound3ModifiedCav - maD_survivorsRound3ModifiedInf
            hcD_survivorsRound3ModifiedInf = Math.round(hcD_survivorsRound2 * lossesPercentRound3Inf)
            hcD_survivorsRound3ModifiedCav = Math.round(hcD_survivorsRound2 * lossesPercentRound3Cav)
            hcD_survivorsRound3ModifiedArc = hcD_survivorsRound2 - hcD_survivorsRound3ModifiedCav - hcD_survivorsRound3ModifiedInf
            ramD_survivorsRound3ModifiedInf = Math.round(ramD_survivorsRound2 * lossesPercentRound3Inf)
            ramD_survivorsRound3ModifiedCav = Math.round(ramD_survivorsRound2 * lossesPercentRound3Cav)
            ramD_survivorsRound3ModifiedArc = ramD_survivorsRound2 - ramD_survivorsRound3ModifiedCav - ramD_survivorsRound3ModifiedInf
            catapultD_survivorsRound3ModifiedInf = Math.round(catapultD_survivorsRound2 * lossesPercentRound3Inf)
            catapultD_survivorsRound3ModifiedCav = Math.round(catapultD_survivorsRound2 * lossesPercentRound3Cav)
            catapultD_survivorsRound3ModifiedArc = catapultD_survivorsRound2 - catapultD_survivorsRound3ModifiedCav - catapultD_survivorsRound3ModifiedInf
            snobD_survivorsRound3ModifiedInf = Math.round(snobD_survivorsRound2 * lossesPercentRound3Inf)
            snobD_survivorsRound3ModifiedCav = Math.round(snobD_survivorsRound2 * lossesPercentRound3Cav)
            snobD_survivorsRound3ModifiedArc = snobD_survivorsRound2 - snobD_survivorsRound3ModifiedCav - snobD_survivorsRound3ModifiedInf
            trebuchetD_survivorsRound3ModifiedInf = Math.round(trebuchetD_survivorsRound2 * lossesPercentRound3Inf)
            trebuchetD_survivorsRound3ModifiedCav = Math.round(trebuchetD_survivorsRound2 * lossesPercentRound3Cav)
            trebuchetD_survivorsRound3ModifiedArc = trebuchetD_survivorsRound2 - trebuchetD_survivorsRound3ModifiedCav - trebuchetD_survivorsRound3ModifiedInf
            berserkerD_survivorsRound3ModifiedInf = Math.round(berserkerD_survivorsRound2 * lossesPercentRound3Inf)
            berserkerD_survivorsRound3ModifiedCav = Math.round(berserkerD_survivorsRound2 * lossesPercentRound3Cav)
            berserkerD_survivorsRound3ModifiedArc = berserkerD_survivorsRound2 - berserkerD_survivorsRound3ModifiedCav - berserkerD_survivorsRound3ModifiedInf
            knightD_survivorsRound3ModifiedInf = Math.round(knightD_survivorsRound2 * lossesPercentRound3Inf)
            knightD_survivorsRound3ModifiedCav = Math.round(knightD_survivorsRound2 * lossesPercentRound3Cav)
            knightD_survivorsRound3ModifiedArc = knightD_survivorsRound2 - knightD_survivorsRound3ModifiedCav - knightD_survivorsRound3ModifiedInf
            provisionDefenderRound3()
        }

        function provisionDefenderRound3() {
            provisionDefenderInfRound3 = spearD_survivorsRound3ModifiedInf * food[0] + swordD_survivorsRound3ModifiedInf * food[1] + axeD_survivorsRound3ModifiedInf * food[2] + berserkerD_survivorsRound3ModifiedInf * food[12] + snobD_survivorsRound3ModifiedInf * food[10] + lcD_survivorsRound3ModifiedInf * food[4] + hcD_survivorsRound3ModifiedInf * food[6] + archerD_survivorsRound3ModifiedInf * food[3] + maD_survivorsRound3ModifiedInf * food[5] + ramD_survivorsRound3ModifiedInf * food[7] + catapultD_survivorsRound3ModifiedInf * food[8] + trebuchetD_survivorsRound3ModifiedInf * food[11] + knightD_survivorsRound3ModifiedInf * food[9]
            provisionDefenderCavRound3 = spearD_survivorsRound3ModifiedCav * food[0] + swordD_survivorsRound3ModifiedCav * food[1] + axeD_survivorsRound3ModifiedCav * food[2] + berserkerD_survivorsRound3ModifiedCav * food[12] + snobD_survivorsRound3ModifiedCav * food[10] + lcD_survivorsRound3ModifiedCav * food[4] + hcD_survivorsRound3ModifiedCav * food[6] + archerD_survivorsRound3ModifiedCav * food[3] + maD_survivorsRound3ModifiedCav * food[5] + ramD_survivorsRound3ModifiedCav * food[7] + catapultD_survivorsRound3ModifiedCav * food[8] + trebuchetD_survivorsRound3ModifiedCav * food[11] + knightD_survivorsRound3ModifiedCav * food[9]
            provisionDefenderArcRound3 = spearD_survivorsRound3ModifiedArc * food[0] + swordD_survivorsRound3ModifiedArc * food[1] + axeD_survivorsRound3ModifiedArc * food[2] + berserkerD_survivorsRound3ModifiedArc * food[12] + snobD_survivorsRound3ModifiedArc * food[10] + lcD_survivorsRound3ModifiedArc * food[4] + hcD_survivorsRound3ModifiedArc * food[6] + archerD_survivorsRound3ModifiedArc * food[3] + maD_survivorsRound3ModifiedArc * food[5] + ramD_survivorsRound3ModifiedArc * food[7] + catapultD_survivorsRound3ModifiedArc * food[8] + trebuchetD_survivorsRound3ModifiedArc * food[11] + knightD_survivorsRound3ModifiedArc * food[9]
            console.log(provisionDefenderArcRound3, provisionDefenderCavRound3, provisionDefenderInfRound3)
            strengthBaseDefenderAllRound3()
        }

        function strengthBaseDefenderAllRound3() {
            strengthBaseDefenderInfRound3 = spearD_survivorsRound3ModifiedInf * def_inf[0] * DknightItemBonusSpear[0] + swordD_survivorsRound3ModifiedInf * def_inf[1] * DknightItemBonusSword[0] + axeD_survivorsRound3ModifiedInf * def_inf[2] * DknightItemBonusAxe[0] + berserkerD_survivorsRound3ModifiedInf * def_inf[12] + snobD_survivorsRound3ModifiedInf * def_inf[10] + lcD_survivorsRound3ModifiedInf * def_inf[4] * DknightItemBonusLc[0] + hcD_survivorsRound3ModifiedInf * def_inf[6] * DknightItemBonusHc[0] + archerD_survivorsRound3ModifiedInf * def_inf[3] * DknightItemBonusArcher[0] + maD_survivorsRound3ModifiedInf * def_inf[5] * DknightItemBonusMa[0] + ramD_survivorsRound3ModifiedInf * def_inf[7] * DknightItemBonusRam[0] + catapultD_survivorsRound3ModifiedInf * def_inf[8] * DknightItemBonusCatapult[0] + trebuchetD_survivorsRound3ModifiedInf * def_inf[11] + knightD_survivorsRound3ModifiedInf * def_inf[9]
            strengthBaseDefenderCavRound3 = spearD_survivorsRound3ModifiedCav * def_kav[0] * DknightItemBonusSpear[0] + swordD_survivorsRound3ModifiedCav * def_kav[1] * DknightItemBonusSword[0] + axeD_survivorsRound3ModifiedCav * def_kav[2] * DknightItemBonusAxe[0] + berserkerD_survivorsRound3ModifiedCav * def_kav[12] + snobD_survivorsRound3ModifiedCav * def_kav[10] + lcD_survivorsRound3ModifiedCav * def_kav[4] * DknightItemBonusLc[0] + hcD_survivorsRound3ModifiedCav * def_kav[6] * DknightItemBonusHc[0] + archerD_survivorsRound3ModifiedCav * def_kav[3] * DknightItemBonusArcher[0] + maD_survivorsRound3ModifiedCav * def_kav[5] * DknightItemBonusMa[0] + ramD_survivorsRound3ModifiedCav * def_kav[7] * DknightItemBonusRam[0] + catapultD_survivorsRound3ModifiedCav * def_kav[8] * DknightItemBonusCatapult[0] + trebuchetD_survivorsRound3ModifiedCav * def_kav[11] + knightD_survivorsRound3ModifiedCav * def_kav[9]
            strengthBaseDefenderArcRound3 = spearD_survivorsRound3ModifiedArc * def_arc[0] * DknightItemBonusSpear[0] + swordD_survivorsRound3ModifiedArc * def_arc[1] * DknightItemBonusSword[0] + axeD_survivorsRound3ModifiedArc * def_arc[2] * DknightItemBonusAxe[0] + berserkerD_survivorsRound3ModifiedArc * def_arc[12] + snobD_survivorsRound3ModifiedArc * def_arc[10] + lcD_survivorsRound3ModifiedArc * def_arc[4] * DknightItemBonusLc[0] + hcD_survivorsRound3ModifiedArc * def_arc[6] * DknightItemBonusHc[0] + archerD_survivorsRound3ModifiedArc * def_arc[3] * DknightItemBonusArcher[0] + maD_survivorsRound3ModifiedArc * def_arc[5] * DknightItemBonusMa[0] + ramD_survivorsRound3ModifiedArc * def_arc[7] * DknightItemBonusRam[0] + catapultD_survivorsRound3ModifiedArc * def_arc[8] * DknightItemBonusCatapult[0] + trebuchetD_survivorsRound3ModifiedArc * def_arc[11] + knightD_survivorsRound3ModifiedArc * def_arc[9]
            siegeStrengthCalc()
        }

        function siegeStrengthCalc() {
            siegeStrength = ramA_survivorsRound2 * attack[7] * knightItemBonusRam[1] + catapultA_survivorsRound2 * attack[8] * knightItemBonusCatapult[1] + trebuchetA_survivorsRound2 * attack[11] + knightA_survivorsRound2 * attack[9]
            strengthBaseAttackerAllRound3()
        }

        function strengthBaseAttackerAllRound3() {
            if (largestGroup == 'cav') {
                strengthBaseAttackerCavRound3 = lcA_survivorsRound2 * attack[4] * knightItemBonusLc[1] + hcA_survivorsRound2 * attack[6] * knightItemBonusHc[1] + siegeStrength
                strengthBaseAttackerInfRound3 = spearA_survivorsRound2 * attack[0] * knightItemBonusSpear[1] + swordA_survivorsRound2 * attack[1] * knightItemBonusSword[1] + axeA_survivorsRound2 * attack[2] * knightItemBonusAxe[1] + berserkerA_survivorsRound2 * attack[12] * doubleStrengthBonus + snobA_survivorsRound2 * attack[10]
                strengthBaseAttackerArcRound3 = archerA_survivorsRound2 * attack[3] * knightItemBonusArcher[1] + maA_survivorsRound2 * attack[5] * knightItemBonusMa[1]
            } else if (largestGroup == 'inf') {
                strengthBaseAttackerInfRound3 = spearA_survivorsRound2 * attack[0] * knightItemBonusSpear[1] + swordA_survivorsRound2 * attack[1] * knightItemBonusSword[1] + axeA_survivorsRound2 * attack[2] * knightItemBonusAxe[1] + berserkerA_survivorsRound2 * attack[12] * doubleStrengthBonus + snobA_survivorsRound2 * attack[10] + siegeStrength
                strengthBaseAttackerCavRound3 = lcA_survivorsRound2 * attack[4] * knightItemBonusLc[1] + hcA_survivorsRound2 * attack[6] * knightItemBonusHc[1]
                strengthBaseAttackerArcRound3 = archerA_survivorsRound2 * attack[3] * knightItemBonusArcher[1] + maA_survivorsRound2 * attack[5] * knightItemBonusMa[1]
            } else if (largestGroup == 'arc') {
                strengthBaseAttackerInfRound3 = spearA_survivorsRound2 * attack[0] * knightItemBonusSpear[1] + swordA_survivorsRound2 * attack[1] * knightItemBonusSword[1] + axeA_survivorsRound2 * attack[2] * knightItemBonusAxe[1] + berserkerA_survivorsRound2 * attack[12] * doubleStrengthBonus + snobA_survivorsRound2 * attack[10]
                strengthBaseAttackerCavRound3 = lcA_survivorsRound2 * attack[4] * knightItemBonusLc[1] + hcA_survivorsRound2 * attack[6] * knightItemBonusHc[1]
                strengthBaseAttackerArcRound3 = archerA_survivorsRound2 * attack[3] * knightItemBonusArcher[1] + maA_survivorsRound2 * attack[5] * knightItemBonusMa[1] + siegeStrength
            } else {
                strengthBaseAttackerInfRound3 = spearA_survivorsRound2 * attack[0] * knightItemBonusSpear[1] + swordA_survivorsRound2 * attack[1] * knightItemBonusSword[1] + axeA_survivorsRound2 * attack[2] * knightItemBonusAxe[1] + berserkerA_survivorsRound2 * attack[12] * doubleStrengthBonus + snobA_survivorsRound2 * attack[10]
                strengthBaseAttackerCavRound3 = lcA_survivorsRound2 * attack[4] * knightItemBonusLc[1] + hcA_survivorsRound2 * attack[6] * knightItemBonusHc[1]
                strengthBaseAttackerArcRound3 = archerA_survivorsRound2 * attack[3] * knightItemBonusArcher[1] + maA_survivorsRound2 * attack[5] * knightItemBonusMa[1]
            }
            strengthRound3partly()
        }

        function strengthRound3partly() {
            strengthAttackerInfRound3 = strengthBaseAttackerInfRound3 * overalModifierOff
            strengthDefenderInfRound3 = strengthBaseDefenderInfRound3 * overalModifierDef
            strengthAttackerCavRound3 = strengthBaseAttackerCavRound3 * overalModifierOff
            strengthDefenderCavRound3 = strengthBaseDefenderCavRound3 * overalModifierDef
            strengthAttackerArcRound3 = strengthBaseAttackerArcRound3 * overalModifierOff
            strengthDefenderArcRound3 = strengthBaseDefenderArcRound3 * overalModifierDef
            strengthRound3()
        }

        function strengthRound3() {
            strengthAttackerRound3 = strengthAttackerInfRound3 + strengthAttackerCavRound3 + strengthAttackerArcRound3
            strengthDefenderRound3 = strengthDefenderInfRound3 + strengthDefenderCavRound3 + strengthDefenderArcRound3
            console.log(strengthAttackerRound3, strengthDefenderRound3)
            killRateRound3defenderInfCalc()
        }

        function killRateRound3defenderInfCalc() {
            if (strengthAttackerInfRound3 == 0 || strengthDefenderInfRound3 == 0) {
                kilrateDefendInfantryBaseRound3 = 0
            } else {
                if (strengthDefenderInfRound3 <= strengthAttackerInfRound3) {
                    kilrateDefendInfantryBaseRound3 = 1
                } else {
                    kilrateDefendInfantryBaseRound3 = Math.pow((strengthAttackerInfRound3 / strengthDefenderInfRound3), (1 / 2)) / (strengthDefenderInfRound3 / strengthAttackerInfRound3)
                }
            }
            killRateRound3defenderCavCalc()
        }

        function killRateRound3defenderCavCalc() {
            if (strengthAttackerCavRound3 == 0 || strengthDefenderCavRound3 == 0) {
                kilrateDefendCavalryBaseRound3 = 0
            } else {
                if (strengthDefenderCavRound3 <= strengthAttackerCavRound3) {
                    kilrateDefendCavalryBaseRound3 = 1
                } else {
                    kilrateDefendCavalryBaseRound3 = Math.pow((strengthAttackerCavRound3 / strengthDefenderCavRound3), (1 / 2)) / (strengthDefenderCavRound3 / strengthAttackerCavRound3)
                }
            }
            killRateRound3defenderArcCalc()
        }

        function killRateRound3defenderArcCalc() {
            if (strengthAttackerArcRound3 == 0 || strengthDefenderArcRound3 == 0) {
                kilrateDefendArcherBaseRound3 = 0
            } else {
                if (strengthDefenderArcRound3 <= strengthAttackerArcRound3) {
                    kilrateDefendArcherBaseRound3 = 1
                } else {
                    kilrateDefendArcherBaseRound3 = Math.pow((strengthAttackerArcRound3 / strengthDefenderArcRound3), (1 / 2)) / (strengthDefenderArcRound3 / strengthAttackerArcRound3)
                }
            }
            killRateRound3attackerInfCalc()
        }

        function killRateRound3attackerInfCalc() {
            if (strengthAttackerInfRound3 == 0 || strengthDefenderInfRound3 == 0) {
                kilrateAttackInfantryBaseRound3 = 0
            } else {
                if (strengthAttackerInfRound3 <= strengthDefenderInfRound3) {
                    kilrateAttackInfantryBaseRound3 = 1
                } else {
                    kilrateAttackInfantryBaseRound3 = Math.pow((strengthDefenderInfRound3 / strengthAttackerInfRound3), (1 / 2)) / (strengthAttackerInfRound3 / strengthDefenderInfRound3)
                }
            }
            killRateRound3attackerCavCalc()
        }

        function killRateRound3attackerCavCalc() {
            if (strengthAttackerCavRound3 == 0 || strengthDefenderCavRound3 == 0) {
                kilrateAttackCavalryBaseRound3 = 0
            } else {
                if (strengthAttackerCavRound3 <= strengthDefenderCavRound3) {
                    kilrateAttackCavalryBaseRound3 = 1
                } else {
                    kilrateAttackCavalryBaseRound3 = Math.pow((strengthDefenderCavRound3 / strengthAttackerCavRound3), (1 / 2)) / (strengthAttackerCavRound3 / strengthDefenderCavRound3)
                }
            }
            killRateRound3attackerArcCalc()
        }

        function killRateRound3attackerArcCalc() {
            if (strengthAttackerArcRound3 == 0 || strengthDefenderArcRound3 == 0) {
                kilrateAttackArcherBaseRound3 = 0
            } else {
                if (strengthAttackerArcRound3 <= strengthDefenderArcRound3) {
                    kilrateAttackArcherBaseRound3 = 1
                } else {
                    kilrateAttackArcherBaseRound3 = Math.pow((strengthDefenderArcRound3 / strengthAttackerArcRound3), (1 / 2)) / (strengthAttackerArcRound3 / strengthDefenderArcRound3)
                }
            }
            killRateRound3()
        }

        function killRateRound3() {
            killRateRound3attackerInf = Math.round(kilrateAttackInfantryBaseRound3 * 1000000) / 1000000
            killRateRound3attackerCav = Math.round(kilrateAttackCavalryBaseRound3 * 1000000) / 1000000
            killRateRound3attackerArc = Math.round(kilrateAttackArcherBaseRound3 * 1000000) / 1000000
            killRateRound3defenderInf = Math.round(kilrateDefendInfantryBaseRound3 * 1000000) / 1000000
            killRateRound3defenderCav = Math.round(kilrateDefendCavalryBaseRound3 * 1000000) / 1000000
            killRateRound3defenderArc = Math.round(kilrateDefendArcherBaseRound3 * 1000000) / 1000000
            lossesRound3()
        }

        function lossesRound3() {
            spearD_lossesRound3 = Math.round(-spearD_survivorsRound3ModifiedInf * killRateRound3defenderInf + 0.000001) + Math.round(-spearD_survivorsRound3ModifiedCav * killRateRound3defenderCav + 0.000001) + Math.round(-spearD_survivorsRound3ModifiedArc * killRateRound3defenderArc + 0.000001)
            swordD_lossesRound3 = Math.round(-swordD_survivorsRound3ModifiedInf * killRateRound3defenderInf + 0.000001) + Math.round(-swordD_survivorsRound3ModifiedCav * killRateRound3defenderCav + 0.000001) + Math.round(-swordD_survivorsRound3ModifiedArc * killRateRound3defenderArc + 0.000001)
            axeD_lossesRound3 = Math.round(-axeD_survivorsRound3ModifiedInf * killRateRound3defenderInf + 0.000001) + Math.round(-axeD_survivorsRound3ModifiedCav * killRateRound3defenderCav + 0.000001) + Math.round(-axeD_survivorsRound3ModifiedArc * killRateRound3defenderArc + 0.000001)
            archerD_lossesRound3 = Math.round(-archerD_survivorsRound3ModifiedInf * killRateRound3defenderInf + 0.000001) + Math.round(-archerD_survivorsRound3ModifiedCav * killRateRound3defenderCav + 0.000001) + Math.round(-archerD_survivorsRound3ModifiedArc * killRateRound3defenderArc + 0.000001)
            lcD_lossesRound3 = Math.round(-lcD_survivorsRound3ModifiedInf * killRateRound3defenderInf + 0.000001) + Math.round(-lcD_survivorsRound3ModifiedCav * killRateRound3defenderCav + 0.000001) + Math.round(-lcD_survivorsRound3ModifiedArc * killRateRound3defenderArc + 0.000001)
            maD_lossesRound3 = Math.round(-maD_survivorsRound3ModifiedInf * killRateRound3defenderInf + 0.000001) + Math.round(-maD_survivorsRound3ModifiedCav * killRateRound3defenderCav + 0.000001) + Math.round(-maD_survivorsRound3ModifiedArc * killRateRound3defenderArc + 0.000001)
            hcD_lossesRound3 = Math.round(-hcD_survivorsRound3ModifiedInf * killRateRound3defenderInf + 0.000001) + Math.round(-hcD_survivorsRound3ModifiedCav * killRateRound3defenderCav + 0.000001) + Math.round(-hcD_survivorsRound3ModifiedArc * killRateRound3defenderArc + 0.000001)
            ramD_lossesRound3 = Math.round(-ramD_survivorsRound3ModifiedInf * killRateRound3defenderInf + 0.000001) + Math.round(-ramD_survivorsRound3ModifiedCav * killRateRound3defenderCav + 0.000001) + Math.round(-ramD_survivorsRound3ModifiedArc * killRateRound3defenderArc + 0.000001)
            catapultD_lossesRound3 = Math.round(-catapultD_survivorsRound3ModifiedInf * killRateRound3defenderInf + 0.000001) + Math.round(-catapultD_survivorsRound3ModifiedCav * killRateRound3defenderCav + 0.000001) + Math.round(-catapultD_survivorsRound3ModifiedArc * killRateRound3defenderArc + 0.000001)
            trebuchetD_lossesRound3 = Math.round(-trebuchetD_survivorsRound3ModifiedInf * killRateRound3defenderInf + 0.000001) + Math.round(-trebuchetD_survivorsRound3ModifiedCav * killRateRound3defenderCav + 0.000001) + Math.round(-trebuchetD_survivorsRound3ModifiedArc * killRateRound3defenderArc + 0.000001)
            berserkerD_lossesRound3 = Math.round(-berserkerD_survivorsRound3ModifiedInf * killRateRound3defenderInf + 0.000001) + Math.round(-berserkerD_survivorsRound3ModifiedCav * killRateRound3defenderCav + 0.000001) + Math.round(-berserkerD_survivorsRound3ModifiedArc * killRateRound3defenderArc + 0.000001)
            knightD_lossesRound3 = Math.round(-knightD_survivorsRound3ModifiedInf * killRateRound3defenderInf + 0.000001) + Math.round(-knightD_survivorsRound3ModifiedCav * killRateRound3defenderCav + 0.000001) + Math.round(-knightD_survivorsRound3ModifiedArc * killRateRound3defenderArc + 0.000001)
            snobD_lossesRound3 = Math.round(-snobD_survivorsRound3ModifiedInf * killRateRound3defenderInf + 0.000001) + Math.round(-snobD_survivorsRound3ModifiedCav * killRateRound3defenderCav + 0.000001) + Math.round(-snobD_survivorsRound3ModifiedArc * killRateRound3defenderArc + 0.000001)
            spearA_lossesRound3 = Math.round(-spearA_survivorsRound2 * killRateRound3attackerInf + 0.000001)
            swordA_lossesRound3 = Math.round(-swordA_survivorsRound2 * killRateRound3attackerInf + 0.000001)
            axeA_lossesRound3 = Math.round(-axeA_survivorsRound2 * killRateRound3attackerInf + 0.000001)
            berserkerA_lossesRound3 = Math.round(-berserkerA_survivorsRound2 * killRateRound3attackerInf + 0.000001)
            archerA_lossesRound3 = Math.round(-archerA_survivorsRound2 * killRateRound3attackerArc + 0.000001)
            maA_lossesRound3 = Math.round(-maA_survivorsRound2 * killRateRound3attackerArc + 0.000001)
            lcA_lossesRound3 = Math.round(-lcA_survivorsRound2 * killRateRound3attackerCav + 0.000001)
            hcA_lossesRound3 = Math.round(-hcA_survivorsRound2 * killRateRound3attackerCav + 0.000001)
            if (largestGroup == 'cav') {
                ramA_lossesRound3 = Math.round(-ramA_survivorsRound2 * killRateRound3attackerCav + 0.000001)
                catapultA_lossesRound3 = Math.round(-catapultA_survivorsRound2 * killRateRound3attackerCav + 0.000001)
                trebuchetA_lossesRound3 = Math.round(-trebuchetA_survivorsRound2 * killRateRound3attackerCav + 0.000001)
                knightA_lossesRound3 = Math.round(-knightA_survivorsRound2 * killRateRound3attackerCav + 0.000001)
            } else if (largestGroup == 'inf') {
                ramA_lossesRound3 = Math.round(-ramA_survivorsRound2 * killRateRound3attackerInf + 0.000001)
                catapultA_lossesRound3 = Math.round(-catapultA_survivorsRound2 * killRateRound3attackerInf + 0.000001)
                trebuchetA_lossesRound3 = Math.round(-trebuchetA_survivorsRound2 * killRateRound3attackerInf + 0.000001)
                knightA_lossesRound3 = Math.round(-knightA_survivorsRound2 * killRateRound3attackerInf + 0.000001)
            } else if (largestGroup == 'arc') {
                ramA_lossesRound3 = Math.round(-ramA_survivorsRound2 * killRateRound3attackerArc + 0.000001)
                catapultA_lossesRound3 = Math.round(-catapultA_survivorsRound2 * killRateRound3attackerArc + 0.000001)
                trebuchetA_lossesRound3 = Math.round(-trebuchetA_survivorsRound2 * killRateRound3attackerArc + 0.000001)
                knightA_lossesRound3 = Math.round(-knightA_survivorsRound2 * killRateRound3attackerArc + 0.000001)
            }
            lossesSnobRound3()
        }

        function lossesSnobRound3() {
            if ((snobA_survivorsRound2 * 100) == provisionAttackerInfRound3) {
                snobA_lossesRound3 = 0
            } else {
                snobA_lossesRound3 = Math.round(-snobA_survivorsRound2 * killRateRound3attackerInf + 0.000001)
            }
            afterBattleSurvivors()
        }

        function afterBattleSurvivors() {
            spearA_survivorsRound3 = spearA_survivorsRound2 + spearA_lossesRound3
            swordA_survivorsRound3 = swordA_survivorsRound2 + swordA_lossesRound3
            axeA_survivorsRound3 = axeA_survivorsRound2 + axeA_lossesRound3
            archerA_survivorsRound3 = archerA_survivorsRound2 + archerA_lossesRound3
            lcA_survivorsRound3 = lcA_survivorsRound2 + lcA_lossesRound3
            maA_survivorsRound3 = maA_survivorsRound2 + maA_lossesRound3
            hcA_survivorsRound3 = hcA_survivorsRound2 + hcA_lossesRound3
            ramA_survivorsRound3 = ramA_survivorsRound2 + ramA_lossesRound3
            catapultA_survivorsRound3 = catapultA_survivorsRound2 + catapultA_lossesRound3
            trebuchetA_survivorsRound3 = trebuchetA_survivorsRound2 + trebuchetA_lossesRound3
            berserkerA_survivorsRound3 = berserkerA_survivorsRound2 + berserkerA_lossesRound3
            snobA_survivorsRound3 = snobA_survivorsRound2 + snobA_lossesRound3
            knightA_survivorsRound3 = knightA_survivorsRound2 + knightA_lossesRound3
            spearD_survivorsRound3 = spearD_survivorsRound2 + spearD_lossesRound3
            swordD_survivorsRound3 = swordD_survivorsRound2 + swordD_lossesRound3
            axeD_survivorsRound3 = axeD_survivorsRound2 + axeD_lossesRound3
            archerD_survivorsRound3 = archerD_survivorsRound2 + archerD_lossesRound3
            lcD_survivorsRound3 = lcD_survivorsRound2 + lcD_lossesRound3
            maD_survivorsRound3 = maD_survivorsRound2 + maD_lossesRound3
            hcD_survivorsRound3 = hcD_survivorsRound2 + hcD_lossesRound3
            ramD_survivorsRound3 = ramD_survivorsRound2 + ramD_lossesRound3
            catapultD_survivorsRound3 = catapultD_survivorsRound2 + catapultD_lossesRound3
            trebuchetD_survivorsRound3 = trebuchetD_survivorsRound2 + trebuchetD_lossesRound3
            berserkerD_survivorsRound3 = berserkerD_survivorsRound2 + berserkerD_lossesRound3
            snobD_survivorsRound3 = snobD_survivorsRound2 + snobD_lossesRound3
            knightD_survivorsRound3 = knightD_survivorsRound2 + knightD_lossesRound3
            lossesProvisionsRound3Total()
        }

        function lossesProvisionsRound3Total() {
            lossesAttackerRound3Total = spearA_lossesRound3 * food[0] + swordA_lossesRound3 * food[1] + axeA_lossesRound3 * food[2] + archerA_lossesRound3 * food[3] + lcA_lossesRound3 * food[4] + maA_lossesRound3 * food[5] + hcA_lossesRound3 * food[6] + ramA_lossesRound3 * food[7] + catapultA_lossesRound3 * food[8] + knightA_lossesRound3 * food[9] + snobA_lossesRound3 * food[10] + trebuchetA_lossesRound3 * food[11] + berserkerA_lossesRound3 * food[12]
            lossesDefenderRound3Total = spearD_lossesRound3 * food[0] + swordD_lossesRound3 * food[1] + axeD_lossesRound3 * food[2] + archerD_lossesRound3 * food[3] + lcD_lossesRound3 * food[4] + maD_lossesRound3 * food[5] + hcD_lossesRound3 * food[6] + ramD_lossesRound3 * food[7] + catapultD_lossesRound3 * food[8] + knightD_lossesRound3 * food[9] + snobD_lossesRound3 * food[10] + trebuchetD_lossesRound3 * food[11] + berserkerD_lossesRound3 * food[12]
            console.log(lossesAttackerRound3Total, lossesDefenderRound3Total)
            survivorsProvisionsRound3Total()
        }

        function survivorsProvisionsRound3Total() {
            survivorsAttackerRound3Total = spearA_survivorsRound3 * food[0] + swordA_survivorsRound3 * food[1] + axeA_survivorsRound3 * food[2] + archerA_survivorsRound3 * food[3] + lcA_survivorsRound3 * food[4] + maA_survivorsRound3 * food[5] + hcA_survivorsRound3 * food[6] + ramA_survivorsRound3 * food[7] + catapultA_survivorsRound3 * food[8] + trebuchetA_survivorsRound3 * food[11] + berserkerA_survivorsRound3 * food[12] + snobA_survivorsRound3 * food[10] + knightA_survivorsRound3 * food[9]
            survivorsDefenderRound3Total = spearD_survivorsRound3 * food[0] + swordD_survivorsRound3 * food[1] + axeD_survivorsRound3 * food[2] + archerD_survivorsRound3 * food[3] + lcD_survivorsRound3 * food[4] + maD_survivorsRound3 * food[5] + hcD_survivorsRound3 * food[6] + ramD_survivorsRound3 * food[7] + catapultD_survivorsRound3 * food[8] + trebuchetD_survivorsRound3 * food[11] + berserkerD_survivorsRound3 * food[12] + snobD_survivorsRound3 * food[10] + knightD_survivorsRound3 * food[9]
            console.log(survivorsDefenderRound3Total, survivorsAttackerRound3Total)
            afterBattleLosses()
        }

        function afterBattleLosses() {
            spearA_losses = -spearA + spearA_survivorsRound3
            swordA_losses = -swordA + swordA_survivorsRound3
            axeA_losses = -axeA + axeA_survivorsRound3
            archerA_losses = -archerA + archerA_survivorsRound3
            lcA_losses = -lcA + lcA_survivorsRound3
            maA_losses = -maA + maA_survivorsRound3
            hcA_losses = -hcA + hcA_survivorsRound3
            ramA_losses = -ramA + ramA_survivorsRound3
            catapultA_losses = -catapultA + catapultA_survivorsRound3
            trebuchetA_losses = -trebuchetA + trebuchetA_survivorsRound3
            berserkerA_losses = -berserkerA + berserkerA_survivorsRound3
            snobA_losses = -snobA + snobA_survivorsRound3
            knightA_losses = -knightA + knightA_survivorsRound3
            spearD_losses = -spearD + spearD_survivorsRound3
            swordD_losses = -swordD + swordD_survivorsRound3
            axeD_losses = -axeD + axeD_survivorsRound3
            archerD_losses = -archerD + archerD_survivorsRound3
            lcD_losses = -lcD + lcD_survivorsRound3
            maD_losses = -maD + maD_survivorsRound3
            hcD_losses = -hcD + hcD_survivorsRound3
            ramD_losses = -ramD + ramD_survivorsRound3
            catapultD_losses = -catapultD + catapultD_survivorsRound3
            trebuchetD_losses = -trebuchetD + trebuchetD_survivorsRound3
            berserkerD_losses = -berserkerD + berserkerD_survivorsRound3
            snobD_losses = -snobD + snobD_survivorsRound3
            knightD_losses = -knightD + knightD_survivorsRound3
            ramPowerFinalCalc()
        }

        function ramPowerFinalCalc() {
            if (ramA_survivorsRound3 == 0) {
                ramPowerFinal = 0
            } else {
                ramPowerFinal = ramA_survivorsRound3 * overalModifierOff * itemramsoffeffect[1]
            }
            hitpointslevelwallsfinalCalc()
        }

        function hitpointslevelwallsfinalCalc() {
            if (wallAfterPreround == 20) {
                hitpointslevelwallsfinal = 18
            } else if (wallAfterPreround == 19) {
                hitpointslevelwallsfinal = 17
            } else if (wallAfterPreround == 18) {
                hitpointslevelwallsfinal = 15
            } else if (wallAfterPreround == 17) {
                hitpointslevelwallsfinal = 14
            } else if (wallAfterPreround == 16) {
                hitpointslevelwallsfinal = 13
            } else if (wallAfterPreround == 15) {
                hitpointslevelwallsfinal = 11
            } else if (wallAfterPreround == 14) {
                hitpointslevelwallsfinal = 10
            } else if (wallAfterPreround == 13 || wallAfterPreround == 12) {
                hitpointslevelwallsfinal = 9
            } else if (wallAfterPreround == 11) {
                hitpointslevelwallsfinal = 8
            } else if (wallAfterPreround == 10) {
                hitpointslevelwallsfinal = 7
            } else if (wallAfterPreround == 9 || wallAfterPreround == 8) {
                hitpointslevelwallsfinal = 6
            } else if (wallAfterPreround == 7 || wallAfterPreround == 6) {
                hitpointslevelwallsfinal = 5
            } else if (wallAfterPreround == 5 || wallAfterPreround == 4 || wallAfterPreround == 3) {
                hitpointslevelwallsfinal = 4
            } else if (wallAfterPreround == 2 || wallAfterPreround == 1) {
                hitpointslevelwallsfinal = 3
            } else {
                hitpointslevelwallsfinal = 0
            }
            ramDamageHitpointCalc()
        }

        function ramDamageHitpointCalc() {
            if (battleBonusDef == 0) {
                ramDamageHitpoint = 0
            } else {
                ramDamageHitpoint = hitpointslevelwallsfinal * 2
            }
            ramDemolitionCalc()
        }

        function ramDemolitionCalc() {
            if (ramPowerFinal == 0 || ramDamageHitpoint == 0) {
                ramDemolition = 0
            } else {
                ramDemolition = -ramPowerFinal / ramDamageHitpoint
            }
            finalWallsCalc()
        }

        function finalWallsCalc() {
            if (wallAfterPreround <= skillWalls) {
                finalWalls = wallAfterPreround
            } else {
                if (wallAfterPreround - skillWalls < -ramDemolition) {
                    if (wallAfterPreround < skillWalls) {
                        finalWalls = wallAfterPreround
                    } else {
                        finalWalls = skillWalls
                    }
                } else {
                    finalWalls = wallAfterPreround + ramDemolition
                }
            }
            afterRamAttackPastBattleCalc()
        }

        function afterRamAttackPastBattleCalc() {
            afterRamAttackPastBattle = Math.round(finalWalls)
            targetLevel()
        }

        function targetLevel() {
            if (catapultTarget == 'wall') {
                catapulttargetlevel = afterRamAttackPastBattle
            } else {
                catapulttargetlevel = battleCalculatorSettings[SETTINGS.BATTLE_TARGET_LEVEL]
            }
            catapultPowerFinalCalc()
        }

        function catapultPowerFinalCalc() {
            if (catapultA_survivorsRound3 == 0 || catapulttargetlevel == 0) {
                catapultPowerFinal = 0
            } else {
                catapultPowerFinal = catapultA_survivorsRound3 * overalModifierOff * knightItemBonusCatapult[1]
            }
            hitpointslevelTargetfinalCalc()
        }

        function hitpointslevelTargetfinalCalc() {
            if (catapultTarget == 'headquarter') {
                if (catapulttargetlevel == 30) {
                    hitpointslevelTargetfinal = 72
                } else if (catapulttargetlevel == 29) {
                    hitpointslevelTargetfinal = 65
                } else if (catapulttargetlevel == 28) {
                    hitpointslevelTargetfinal = 59
                } else if (catapulttargetlevel == 27) {
                    hitpointslevelTargetfinal = 54
                } else if (catapulttargetlevel == 26) {
                    hitpointslevelTargetfinal = 50
                } else if (catapulttargetlevel == 25) {
                    hitpointslevelTargetfinal = 45
                } else if (catapulttargetlevel == 24) {
                    hitpointslevelTargetfinal = 41
                } else if (catapulttargetlevel == 23) {
                    hitpointslevelTargetfinal = 36
                } else if (catapulttargetlevel == 22) {
                    hitpointslevelTargetfinal = 33
                } else if (catapulttargetlevel == 21) {
                    hitpointslevelTargetfinal = 30
                } else if (catapulttargetlevel == 20) {
                    hitpointslevelTargetfinal = 27
                } else if (catapulttargetlevel == 19) {
                    hitpointslevelTargetfinal = 26
                } else if (catapulttargetlevel == 18) {
                    hitpointslevelTargetfinal = 23
                } else if (catapulttargetlevel == 17) {
                    hitpointslevelTargetfinal = 14
                } else if (catapulttargetlevel == 16) {
                    hitpointslevelTargetfinal = 13
                } else if (catapulttargetlevel == 15) {
                    hitpointslevelTargetfinal = 11
                } else if (catapulttargetlevel == 14) {
                    hitpointslevelTargetfinal = 10
                } else if (catapulttargetlevel == 13 || catapulttargetlevel == 12) {
                    hitpointslevelTargetfinal = 9
                } else if (catapulttargetlevel == 11) {
                    hitpointslevelTargetfinal = 8
                } else if (catapulttargetlevel == 10) {
                    hitpointslevelTargetfinal = 7
                } else if (catapulttargetlevel == 9 || catapulttargetlevel == 8) {
                    hitpointslevelTargetfinal = 6
                } else if (catapulttargetlevel == 7 || catapulttargetlevel == 6) {
                    hitpointslevelTargetfinal = 5
                } else if (catapulttargetlevel == 5 || catapulttargetlevel == 4 || catapulttargetlevel == 3) {
                    hitpointslevelTargetfinal = 4
                } else if (catapulttargetlevel == 2 || catapulttargetlevel == 1) {
                    hitpointslevelTargetfinal = 3
                } else {
                    hitpointslevelTargetfinal = 0
                }
            } else if (catapultTarget == 'wall') {
                if (afterRamAttackPastBattle == 20) {
                    hitpointslevelTargetfinal = 18
                } else if (afterRamAttackPastBattle == 19) {
                    hitpointslevelTargetfinal = 17
                } else if (afterRamAttackPastBattle == 18) {
                    hitpointslevelTargetfinal = 15
                } else if (afterRamAttackPastBattle == 17) {
                    hitpointslevelTargetfinal = 14
                } else if (afterRamAttackPastBattle == 16) {
                    hitpointslevelTargetfinal = 13
                } else if (afterRamAttackPastBattle == 15) {
                    hitpointslevelTargetfinal = 11
                } else if (afterRamAttackPastBattle == 14) {
                    hitpointslevelTargetfinal = 10
                } else if (afterRamAttackPastBattle == 13 || afterRamAttackPastBattle == 12) {
                    hitpointslevelTargetfinal = 9
                } else if (afterRamAttackPastBattle == 11) {
                    hitpointslevelTargetfinal = 8
                } else if (afterRamAttackPastBattle == 10) {
                    hitpointslevelTargetfinal = 7
                } else if (afterRamAttackPastBattle == 9 || afterRamAttackPastBattle == 8) {
                    hitpointslevelTargetfinal = 6
                } else if (afterRamAttackPastBattle == 7 || afterRamAttackPastBattle == 6) {
                    hitpointslevelTargetfinal = 5
                } else if (afterRamAttackPastBattle == 5 || afterRamAttackPastBattle == 4 || afterRamAttackPastBattle == 3) {
                    hitpointslevelTargetfinal = 4
                } else if (afterRamAttackPastBattle == 2 || afterRamAttackPastBattle == 1) {
                    hitpointslevelTargetfinal = 3
                } else {
                    hitpointslevelTargetfinal = 0
                }
            } else if (catapultTarget == 'tavern') {
                if (catapulttargetlevel == 15) {
                    hitpointslevelTargetfinal = 11
                } else if (catapulttargetlevel == 14) {
                    hitpointslevelTargetfinal = 10
                } else if (catapulttargetlevel == 13 || catapulttargetlevel == 12) {
                    hitpointslevelTargetfinal = 9
                } else if (catapulttargetlevel == 11) {
                    hitpointslevelTargetfinal = 8
                } else if (catapulttargetlevel == 10) {
                    hitpointslevelTargetfinal = 7
                } else if (catapulttargetlevel == 9 || catapulttargetlevel == 8) {
                    hitpointslevelTargetfinal = 6
                } else if (catapulttargetlevel == 7 || catapulttargetlevel == 6) {
                    hitpointslevelTargetfinal = 5
                } else if (catapulttargetlevel == 5 || catapulttargetlevel == 4 || catapulttargetlevel == 3) {
                    hitpointslevelTargetfinal = 4
                } else if (catapulttargetlevel == 2 || catapulttargetlevel == 1) {
                    hitpointslevelTargetfinal = 3
                } else {
                    hitpointslevelTargetfinal = 0
                }
            } else if (catapultTarget == 'hospital') {
                if (catapulttargetlevel == 10) {
                    hitpointslevelTargetfinal = 7
                } else if (catapulttargetlevel == 9 || catapulttargetlevel == 8) {
                    hitpointslevelTargetfinal = 6
                } else if (catapulttargetlevel == 7 || catapulttargetlevel == 6) {
                    hitpointslevelTargetfinal = 5
                } else if (catapulttargetlevel == 5 || catapulttargetlevel == 4 || catapulttargetlevel == 3) {
                    hitpointslevelTargetfinal = 4
                } else if (catapulttargetlevel == 2 || catapulttargetlevel == 1) {
                    hitpointslevelTargetfinal = 3
                } else {
                    hitpointslevelTargetfinal = 0
                }
            } else if (catapultTarget == 'satue') {
                if (catapulttargetlevel == 5 || catapulttargetlevel == 4 || catapulttargetlevel == 3) {
                    hitpointslevelTargetfinal = 4
                } else if (catapulttargetlevel == 2 || catapulttargetlevel == 1) {
                    hitpointslevelTargetfinal = 3
                } else {
                    hitpointslevelTargetfinal = 0
                }
            } else if (catapultTarget == 'rally_point') {
                if (catapulttargetlevel == 5 || catapulttargetlevel == 4 || catapulttargetlevel == 3) {
                    hitpointslevelTargetfinal = 4
                } else if (catapulttargetlevel == 2 || catapulttargetlevel == 1) {
                    hitpointslevelTargetfinal = 3
                } else {
                    hitpointslevelTargetfinal = 0
                }
            } else if (catapultTarget == 'church') {
                if (catapulttargetlevel == 3 || catapulttargetlevel == 2 || catapulttargetlevel == 1) {
                    hitpointslevelTargetfinal = 800
                } else {
                    hitpointslevelTargetfinal = 0
                }
            } else if (catapultTarget == 'academy') {
                if (catapulttargetlevel == 1) {
                    hitpointslevelTargetfinal = 500
                } else {
                    hitpointslevelTargetfinal = 0
                }
            } else if (catapultTarget == 'preceptory') {
                if (catapulttargetlevel == 10) {
                    hitpointslevelTargetfinal = 71
                } else if (catapulttargetlevel == 9) {
                    hitpointslevelTargetfinal = 43
                } else if (catapulttargetlevel == 8) {
                    hitpointslevelTargetfinal = 39
                } else if (catapulttargetlevel == 7) {
                    hitpointslevelTargetfinal = 35
                } else if (catapulttargetlevel == 6) {
                    hitpointslevelTargetfinal = 32
                } else if (catapulttargetlevel == 5) {
                    hitpointslevelTargetfinal = 29
                } else if (catapulttargetlevel == 4) {
                    hitpointslevelTargetfinal = 27
                } else if (catapulttargetlevel == 3) {
                    hitpointslevelTargetfinal = 24
                } else if (catapulttargetlevel == 2) {
                    hitpointslevelTargetfinal = 22
                } else if (catapulttargetlevel == 1) {
                    hitpointslevelTargetfinal = 20
                } else {
                    hitpointslevelTargetfinal = 0
                }
            } else if (catapultTarget == 'barracks') {
                if (catapulttargetlevel == 25) {
                    hitpointslevelTargetfinal = 30
                } else if (catapulttargetlevel == 24) {
                    hitpointslevelTargetfinal = 27
                } else if (catapulttargetlevel == 23) {
                    hitpointslevelTargetfinal = 24
                } else if (catapulttargetlevel == 22) {
                    hitpointslevelTargetfinal = 22
                } else if (catapulttargetlevel == 21) {
                    hitpointslevelTargetfinal = 20
                } else if (catapulttargetlevel == 20) {
                    hitpointslevelTargetfinal = 18
                } else if (catapulttargetlevel == 19) {
                    hitpointslevelTargetfinal = 17
                } else if (catapulttargetlevel == 18) {
                    hitpointslevelTargetfinal = 15
                } else if (catapulttargetlevel == 17) {
                    hitpointslevelTargetfinal = 14
                } else if (catapulttargetlevel == 16) {
                    hitpointslevelTargetfinal = 13
                } else if (catapulttargetlevel == 15) {
                    hitpointslevelTargetfinal = 11
                } else if (catapulttargetlevel == 14) {
                    hitpointslevelTargetfinal = 10
                } else if (catapulttargetlevel == 13 || catapulttargetlevel == 12) {
                    hitpointslevelTargetfinal = 9
                } else if (catapulttargetlevel == 11) {
                    hitpointslevelTargetfinal = 8
                } else if (catapulttargetlevel == 10) {
                    hitpointslevelTargetfinal = 7
                } else if (catapulttargetlevel == 9 || catapulttargetlevel == 8) {
                    hitpointslevelTargetfinal = 6
                } else if (catapulttargetlevel == 7 || catapulttargetlevel == 6) {
                    hitpointslevelTargetfinal = 5
                } else if (catapulttargetlevel == 5 || catapulttargetlevel == 4 || catapulttargetlevel == 3) {
                    hitpointslevelTargetfinal = 4
                } else if (catapulttargetlevel == 2 || catapulttargetlevel == 1) {
                    hitpointslevelTargetfinal = 3
                } else {
                    hitpointslevelTargetfinal = 0
                }
            } else if (catapultTarget == 'market') {
                if (catapulttargetlevel == 25) {
                    hitpointslevelTargetfinal = 30
                } else if (catapulttargetlevel == 24) {
                    hitpointslevelTargetfinal = 27
                } else if (catapulttargetlevel == 23) {
                    hitpointslevelTargetfinal = 24
                } else if (catapulttargetlevel == 22) {
                    hitpointslevelTargetfinal = 22
                } else if (catapulttargetlevel == 21) {
                    hitpointslevelTargetfinal = 20
                } else if (catapulttargetlevel == 20) {
                    hitpointslevelTargetfinal = 18
                } else if (catapulttargetlevel == 19) {
                    hitpointslevelTargetfinal = 17
                } else if (catapulttargetlevel == 18) {
                    hitpointslevelTargetfinal = 15
                } else if (catapulttargetlevel == 17) {
                    hitpointslevelTargetfinal = 14
                } else if (catapulttargetlevel == 16) {
                    hitpointslevelTargetfinal = 13
                } else if (catapulttargetlevel == 15) {
                    hitpointslevelTargetfinal = 11
                } else if (catapulttargetlevel == 14) {
                    hitpointslevelTargetfinal = 10
                } else if (catapulttargetlevel == 13 || catapulttargetlevel == 12) {
                    hitpointslevelTargetfinal = 9
                } else if (catapulttargetlevel == 11) {
                    hitpointslevelTargetfinal = 8
                } else if (catapulttargetlevel == 10) {
                    hitpointslevelTargetfinal = 7
                } else if (catapulttargetlevel == 9 || catapulttargetlevel == 8) {
                    hitpointslevelTargetfinal = 6
                } else if (catapulttargetlevel == 7 || catapulttargetlevel == 6) {
                    hitpointslevelTargetfinal = 5
                } else if (catapulttargetlevel == 5 || catapulttargetlevel == 4 || catapulttargetlevel == 3) {
                    hitpointslevelTargetfinal = 4
                } else if (catapulttargetlevel == 2 || catapulttargetlevel == 1) {
                    hitpointslevelTargetfinal = 3
                } else {
                    hitpointslevelTargetfinal = 0
                }
            } else if (catapultTarget == 'warehouse') {
                if (catapulttargetlevel == 30) {
                    hitpointslevelTargetfinal = 48
                } else if (catapulttargetlevel == 29) {
                    hitpointslevelTargetfinal = 43
                } else if (catapulttargetlevel == 28) {
                    hitpointslevelTargetfinal = 39
                } else if (catapulttargetlevel == 27) {
                    hitpointslevelTargetfinal = 36
                } else if (catapulttargetlevel == 26) {
                    hitpointslevelTargetfinal = 33
                } else if (catapulttargetlevel == 25) {
                    hitpointslevelTargetfinal = 30
                } else if (catapulttargetlevel == 24) {
                    hitpointslevelTargetfinal = 27
                } else if (catapulttargetlevel == 23) {
                    hitpointslevelTargetfinal = 24
                } else if (catapulttargetlevel == 22) {
                    hitpointslevelTargetfinal = 22
                } else if (catapulttargetlevel == 21) {
                    hitpointslevelTargetfinal = 20
                } else if (catapulttargetlevel == 20) {
                    hitpointslevelTargetfinal = 18
                } else if (catapulttargetlevel == 19) {
                    hitpointslevelTargetfinal = 17
                } else if (catapulttargetlevel == 18) {
                    hitpointslevelTargetfinal = 15
                } else if (catapulttargetlevel == 17) {
                    hitpointslevelTargetfinal = 14
                } else if (catapulttargetlevel == 16) {
                    hitpointslevelTargetfinal = 13
                } else if (catapulttargetlevel == 15) {
                    hitpointslevelTargetfinal = 11
                } else if (catapulttargetlevel == 14) {
                    hitpointslevelTargetfinal = 10
                } else if (catapulttargetlevel == 13 || catapulttargetlevel == 12) {
                    hitpointslevelTargetfinal = 9
                } else if (catapulttargetlevel == 11) {
                    hitpointslevelTargetfinal = 8
                } else if (catapulttargetlevel == 10) {
                    hitpointslevelTargetfinal = 7
                } else if (catapulttargetlevel == 9 || catapulttargetlevel == 8) {
                    hitpointslevelTargetfinal = 6
                } else if (catapulttargetlevel == 7 || catapulttargetlevel == 6) {
                    hitpointslevelTargetfinal = 5
                } else if (catapulttargetlevel == 5 || catapulttargetlevel == 4 || catapulttargetlevel == 3) {
                    hitpointslevelTargetfinal = 4
                } else if (catapulttargetlevel == 2 || catapulttargetlevel == 1) {
                    hitpointslevelTargetfinal = 3
                } else {
                    hitpointslevelTargetfinal = 0
                }
            } else if (catapultTarget == 'timber_camp') {
                if (catapulttargetlevel == 30) {
                    hitpointslevelTargetfinal = 48
                } else if (catapulttargetlevel == 29) {
                    hitpointslevelTargetfinal = 43
                } else if (catapulttargetlevel == 28) {
                    hitpointslevelTargetfinal = 39
                } else if (catapulttargetlevel == 27) {
                    hitpointslevelTargetfinal = 36
                } else if (catapulttargetlevel == 26) {
                    hitpointslevelTargetfinal = 33
                } else if (catapulttargetlevel == 25) {
                    hitpointslevelTargetfinal = 30
                } else if (catapulttargetlevel == 24) {
                    hitpointslevelTargetfinal = 27
                } else if (catapulttargetlevel == 23) {
                    hitpointslevelTargetfinal = 24
                } else if (catapulttargetlevel == 22) {
                    hitpointslevelTargetfinal = 22
                } else if (catapulttargetlevel == 21) {
                    hitpointslevelTargetfinal = 20
                } else if (catapulttargetlevel == 20) {
                    hitpointslevelTargetfinal = 18
                } else if (catapulttargetlevel == 19) {
                    hitpointslevelTargetfinal = 17
                } else if (catapulttargetlevel == 18) {
                    hitpointslevelTargetfinal = 15
                } else if (catapulttargetlevel == 17) {
                    hitpointslevelTargetfinal = 14
                } else if (catapulttargetlevel == 16) {
                    hitpointslevelTargetfinal = 13
                } else if (catapulttargetlevel == 15) {
                    hitpointslevelTargetfinal = 11
                } else if (catapulttargetlevel == 14) {
                    hitpointslevelTargetfinal = 10
                } else if (catapulttargetlevel == 13 || catapulttargetlevel == 12) {
                    hitpointslevelTargetfinal = 9
                } else if (catapulttargetlevel == 11) {
                    hitpointslevelTargetfinal = 8
                } else if (catapulttargetlevel == 10) {
                    hitpointslevelTargetfinal = 7
                } else if (catapulttargetlevel == 9 || catapulttargetlevel == 8) {
                    hitpointslevelTargetfinal = 6
                } else if (catapulttargetlevel == 7 || catapulttargetlevel == 6) {
                    hitpointslevelTargetfinal = 5
                } else if (catapulttargetlevel == 5 || catapulttargetlevel == 4 || catapulttargetlevel == 3) {
                    hitpointslevelTargetfinal = 4
                } else if (catapulttargetlevel == 2 || catapulttargetlevel == 1) {
                    hitpointslevelTargetfinal = 3
                } else {
                    hitpointslevelTargetfinal = 0
                }
            } else if (catapultTarget == 'clay_pit') {
                if (catapulttargetlevel == 30) {
                    hitpointslevelTargetfinal = 48
                } else if (catapulttargetlevel == 29) {
                    hitpointslevelTargetfinal = 43
                } else if (catapulttargetlevel == 28) {
                    hitpointslevelTargetfinal = 39
                } else if (catapulttargetlevel == 27) {
                    hitpointslevelTargetfinal = 36
                } else if (catapulttargetlevel == 26) {
                    hitpointslevelTargetfinal = 33
                } else if (catapulttargetlevel == 25) {
                    hitpointslevelTargetfinal = 30
                } else if (catapulttargetlevel == 24) {
                    hitpointslevelTargetfinal = 27
                } else if (catapulttargetlevel == 23) {
                    hitpointslevelTargetfinal = 24
                } else if (catapulttargetlevel == 22) {
                    hitpointslevelTargetfinal = 22
                } else if (catapulttargetlevel == 21) {
                    hitpointslevelTargetfinal = 20
                } else if (catapulttargetlevel == 20) {
                    hitpointslevelTargetfinal = 18
                } else if (catapulttargetlevel == 19) {
                    hitpointslevelTargetfinal = 17
                } else if (catapulttargetlevel == 18) {
                    hitpointslevelTargetfinal = 15
                } else if (catapulttargetlevel == 17) {
                    hitpointslevelTargetfinal = 14
                } else if (catapulttargetlevel == 16) {
                    hitpointslevelTargetfinal = 13
                } else if (catapulttargetlevel == 15) {
                    hitpointslevelTargetfinal = 11
                } else if (catapulttargetlevel == 14) {
                    hitpointslevelTargetfinal = 10
                } else if (catapulttargetlevel == 13 || catapulttargetlevel == 12) {
                    hitpointslevelTargetfinal = 9
                } else if (catapulttargetlevel == 11) {
                    hitpointslevelTargetfinal = 8
                } else if (catapulttargetlevel == 10) {
                    hitpointslevelTargetfinal = 7
                } else if (catapulttargetlevel == 9 || catapulttargetlevel == 8) {
                    hitpointslevelTargetfinal = 6
                } else if (catapulttargetlevel == 7 || catapulttargetlevel == 6) {
                    hitpointslevelTargetfinal = 5
                } else if (catapulttargetlevel == 5 || catapulttargetlevel == 4 || catapulttargetlevel == 3) {
                    hitpointslevelTargetfinal = 4
                } else if (catapulttargetlevel == 2 || catapulttargetlevel == 1) {
                    hitpointslevelTargetfinal = 3
                } else {
                    hitpointslevelTargetfinal = 0
                }
            } else if (catapultTarget == 'iron_mine') {
                if (catapulttargetlevel == 30) {
                    hitpointslevelTargetfinal = 48
                } else if (catapulttargetlevel == 29) {
                    hitpointslevelTargetfinal = 43
                } else if (catapulttargetlevel == 28) {
                    hitpointslevelTargetfinal = 39
                } else if (catapulttargetlevel == 27) {
                    hitpointslevelTargetfinal = 36
                } else if (catapulttargetlevel == 26) {
                    hitpointslevelTargetfinal = 33
                } else if (catapulttargetlevel == 25) {
                    hitpointslevelTargetfinal = 30
                } else if (catapulttargetlevel == 24) {
                    hitpointslevelTargetfinal = 27
                } else if (catapulttargetlevel == 23) {
                    hitpointslevelTargetfinal = 24
                } else if (catapulttargetlevel == 22) {
                    hitpointslevelTargetfinal = 22
                } else if (catapulttargetlevel == 21) {
                    hitpointslevelTargetfinal = 20
                } else if (catapulttargetlevel == 20) {
                    hitpointslevelTargetfinal = 18
                } else if (catapulttargetlevel == 19) {
                    hitpointslevelTargetfinal = 17
                } else if (catapulttargetlevel == 18) {
                    hitpointslevelTargetfinal = 15
                } else if (catapulttargetlevel == 17) {
                    hitpointslevelTargetfinal = 14
                } else if (catapulttargetlevel == 16) {
                    hitpointslevelTargetfinal = 13
                } else if (catapulttargetlevel == 15) {
                    hitpointslevelTargetfinal = 11
                } else if (catapulttargetlevel == 14) {
                    hitpointslevelTargetfinal = 10
                } else if (catapulttargetlevel == 13 || catapulttargetlevel == 12) {
                    hitpointslevelTargetfinal = 9
                } else if (catapulttargetlevel == 11) {
                    hitpointslevelTargetfinal = 8
                } else if (catapulttargetlevel == 10) {
                    hitpointslevelTargetfinal = 7
                } else if (catapulttargetlevel == 9 || catapulttargetlevel == 8) {
                    hitpointslevelTargetfinal = 6
                } else if (catapulttargetlevel == 7 || catapulttargetlevel == 6) {
                    hitpointslevelTargetfinal = 5
                } else if (catapulttargetlevel == 5 || catapulttargetlevel == 4 || catapulttargetlevel == 3) {
                    hitpointslevelTargetfinal = 4
                } else if (catapulttargetlevel == 2 || catapulttargetlevel == 1) {
                    hitpointslevelTargetfinal = 3
                } else {
                    hitpointslevelTargetfinal = 0
                }
            } else if (catapultTarget == 'farm') {
                if (catapulttargetlevel == 30) {
                    hitpointslevelTargetfinal = 79
                } else if (catapulttargetlevel == 29) {
                    hitpointslevelTargetfinal = 72
                } else if (catapulttargetlevel == 28) {
                    hitpointslevelTargetfinal = 66
                } else if (catapulttargetlevel == 27) {
                    hitpointslevelTargetfinal = 60
                } else if (catapulttargetlevel == 26) {
                    hitpointslevelTargetfinal = 54
                } else if (catapulttargetlevel == 25) {
                    hitpointslevelTargetfinal = 49
                } else if (catapulttargetlevel == 24) {
                    hitpointslevelTargetfinal = 45
                } else if (catapulttargetlevel == 23) {
                    hitpointslevelTargetfinal = 41
                } else if (catapulttargetlevel == 22) {
                    hitpointslevelTargetfinal = 37
                } else if (catapulttargetlevel == 21) {
                    hitpointslevelTargetfinal = 34
                } else if (catapulttargetlevel == 20) {
                    hitpointslevelTargetfinal = 31
                } else if (catapulttargetlevel == 19) {
                    hitpointslevelTargetfinal = 28
                } else if (catapulttargetlevel == 18) {
                    hitpointslevelTargetfinal = 25
                } else if (catapulttargetlevel == 17) {
                    hitpointslevelTargetfinal = 23
                } else if (catapulttargetlevel == 16) {
                    hitpointslevelTargetfinal = 21
                } else if (catapulttargetlevel == 15) {
                    hitpointslevelTargetfinal = 19
                } else if (catapulttargetlevel == 14) {
                    hitpointslevelTargetfinal = 17
                } else if (catapulttargetlevel == 13) {
                    hitpointslevelTargetfinal = 16
                } else if (catapulttargetlevel == 12) {
                    hitpointslevelTargetfinal = 14
                } else if (catapulttargetlevel == 11) {
                    hitpointslevelTargetfinal = 13
                } else if (catapulttargetlevel == 10) {
                    hitpointslevelTargetfinal = 12
                } else if (catapulttargetlevel == 9) {
                    hitpointslevelTargetfinal = 11
                } else if (catapulttargetlevel == 8) {
                    hitpointslevelTargetfinal = 10
                } else if (catapulttargetlevel == 7) {
                    hitpointslevelTargetfinal = 9
                } else if (catapulttargetlevel == 6) {
                    hitpointslevelTargetfinal = 8
                } else if (catapulttargetlevel == 5 || catapulttargetlevel == 4) {
                    hitpointslevelTargetfinal = 7
                } else if (catapulttargetlevel == 2 || catapulttargetlevel == 3) {
                    hitpointslevelTargetfinal = 6
                } else if (catapulttargetlevel == 1) {
                    hitpointslevelTargetfinal = 5
                } else {
                    hitpointslevelTargetfinal = 0
                }
            } else {
                hitpointslevelTargetfinal = 0
            }
            catapultDamageHitpointCalc()
        }

        function catapultDamageHitpointCalc() {
            if (catapulttargetlevel == 0) {
                catapultDamageHitpoint = 0
            } else {
                catapultDamageHitpoint = hitpointslevelTargetfinal * overalModifierDef
            }
            catapultDemolitionCalc()
        }

        function catapultDemolitionCalc() {
            if (catapultPowerFinal == 0 || catapultDamageHitpoint == 0) {
                catapultDemolition = 0
            } else {
                catapultDemolition = -catapultPowerFinal / catapultDamageHitpoint
            }
            finalTargetLevelCalc()
        }

        function finalTargetLevelCalc() {
            if (catapultTarget == 'wall') {
                if (finalWalls <= skillWalls) {
                    finalTargetLevel = finalWalls
                } else {
                    if (finalWalls - skillWalls < -catapultDemolition) {
                        if (finalWalls < skillWalls) {
                            finalTargetLevel = finalWalls
                        } else {
                            finalTargetLevel = skillWalls
                        }
                    } else {
                        finalTargetLevel = finalWalls + catapultDemolition
                    }
                }
            } else {
                if ((catapultDemolition + catapulttargetlevel) <= 0) {
                    finalTargetLevel = 0
                } else {
                    finalTargetLevel = catapultDemolition + catapulttargetlevel
                }
            }
            afterCatAttackPastBattle()
        }

        function afterCatAttackPastBattle() {
            afterBattleTargetLevel = Math.round(finalTargetLevel)
            console.log(afterBattleTargetLevel)
            provisionsLosses()
        }

        function provisionsLosses() {
            lossesprovisionA = spearA_losses * food[0] + swordA_losses * food[1] + axeA_losses * food[2] + archerA_losses * food[3] + lcA_losses * food[4] + maA_losses * food[5] + hcA_losses * food[6] + ramA_losses * food[7] + catapultA_losses * food[8] + knightA_losses * food[9] + snobA_losses * food[10] + trebuchetA_losses * food[11] + berserkerA_losses * food[12]
            lossesprovisionD = spearD_losses * food[0] + swordD_losses * food[1] + axeD_losses * food[2] + archerD_losses * food[3] + lcD_losses * food[4] + maD_losses * food[5] + hcD_losses * food[6] + ramD_losses * food[7] + catapultD_losses * food[8] + knightD_losses * food[9] + snobD_losses * food[10] + trebuchetD_losses * food[11] + berserkerD_losses * food[12]
            bashpoints()
        }

        function bashpoints() {
            bashpointsAttacker = spearD_losses * pointsDeff[0] + swordD_losses * pointsDeff[1] + axeD_losses * pointsDeff[2] + archerD_losses * pointsDeff[3] + lcD_losses * pointsDeff[4] + maD_losses * pointsDeff[5] + hcD_losses * pointsDeff[6] + ramD_losses * pointsDeff[7] + catapultD_losses * pointsDeff[8] + knightD_losses * pointsDeff[9] + snobD_losses * pointsDeff[10] + trebuchetD_losses * pointsDeff[11] + berserkerD_losses * pointsDeff[12]
            bashpointsDefender = spearA_losses * pointsAttack[0] + swordA_losses * pointsAttack[1] + axeA_losses * pointsAttack[2] + archerA_losses * pointsAttack[3] + lcA_losses * pointsAttack[4] + maA_losses * pointsAttack[5] + hcA_losses * pointsAttack[6] + ramA_losses * pointsAttack[7] + catapultA_losses * pointsAttack[8] + knightA_losses * pointsAttack[9] + snobA_losses * pointsAttack[10] + trebuchetA_losses * pointsAttack[11] + berserkerA_losses * pointsAttack[12]
            console.log(bashpointsAttacker, bashpointsDefender)
            losessPercentFinalAttacker()
        }

        function losessPercentFinalAttacker() {
            if (attackerprovision == 0 || lossesprovisionA == 0) {
                killratioAttacker = 0
            } else {
                killratioAttacker = Math.round((-lossesprovisionA / attackerprovision) * 1000) / 1000
            }
            console.log(killratioAttacker)
            largestGroupDCalc()
        }

        function largestGroupDCalc() {
            if ((spearD + swordD + axeD + berserkerD > lcD + hcD) && (spearD + swordD + axeD + berserkerD > archerD + maD)) {
                largestGroupD = 'inf'
            } else if ((lcD + hcD > spearD + swordD + axeD + berserkerD) && (lcD + hcD > archerD + maD)) {
                largestGroupD = 'cav'
            } else {
                largestGroupD = 'arc'
            }
            showLargestGroup()
        }

        function showLargestGroup() {
            if (largestGroup == 'inf') {
                showA = 'piechota'
            } else if (largestGroup == 'cav') {
                showA = 'kawaleria'
            } else {
                showA = 'łucznicy'
            }
            console.log(showA)
            showLargestGroupD()
        }

        function showLargestGroupD() {
            if (largestGroupD == 'inf') {
                showD = 'piechota'
            } else if (largestGroupD == 'cav') {
                showD = 'kawaleria'
            } else {
                showD = 'łucznicy'
            }
            console.log(showD)
            losessPercentFinalDefender()
        }

        function losessPercentFinalDefender() {
            if (defenderprovision == 0 || lossesprovisionD == 0) {
                killratioDefender = 0
            } else {
                killratioDefender = Math.round((-lossesprovisionD / defenderprovision) * 1000) / 1000
            }
            console.log(killratioDefender)
            revivedA()
        }

        function revivedA() {
            spearArevived = Math.round(spearA_losses * (medicBonus + skillMedic))
            swordArevived = Math.round(swordA_losses * (medicBonus + skillMedic))
            axeArevived = Math.round(axeA_losses * (medicBonus + skillMedic))
            archerArevived = Math.round(archerA_losses * (medicBonus + skillMedic))
            lcArevived = Math.round(lcA_losses * (medicBonus + skillMedic))
            maArevived = Math.round(maA_losses * (medicBonus + skillMedic))
            hcArevived = Math.round(hcA_losses * (medicBonus + skillMedic))
            ramArevived = Math.round(ramA_losses * (medicBonus + skillMedic))
            catapultArevived = Math.round(catapultA_losses * (medicBonus + skillMedic))
            snobArevived = Math.round(snobA_losses * (medicBonus + skillMedic))
            knightArevived = Math.round(knightA_losses * (medicBonus + skillMedic))
            trebuchetArevived = Math.round(trebuchetA_losses * (medicBonus + skillMedic))
            berserkerArevived = Math.round(berserkerA_losses * (medicBonus + skillMedic))
            console.log(spearArevived, swordArevived, axeArevived, archerArevived, lcArevived, maArevived, hcArevived, ramArevived, catapultArevived, snobArevived, knightArevived, trebuchetArevived, berserkerArevived)
            revivedD()
        }

        function revivedD() {
            beds = hospitalBeds + skillClinique
            if (hospitalBeds == 0) {
                spearDrevived = 0
                swordDrevived = 0
                axeDrevived = 0
                archerDrevived = 0
                lcDrevived = 0
                maDrevived = 0
                hcDrevived = 0
            } else if (hospitalBeds < 1000) {
                if (beds <= ((archerD_losses + spearD_losses + swordD_losses + axeD_losses) / 2)) {
                    spearDrevived = Math.round(spearD_losses / 2)
                    swordDrevived = Math.round(swordD_losses / 2)
                    axeDrevived = Math.round(axeD_losses / 2)
                    archerDrevived = Math.round(archerD_losses / 2)
                    lcDrevived = 0
                    maDrevived = 0
                    hcDrevived = 0
                } else {
                    spearDrevived = Math.round(spearD_losses * beds / (archerD_losses + spearD_losses + swordD_losses + axeD_losses))
                    swordDrevived = Math.round(swordD_losses * beds / (archerD_losses + spearD_losses + swordD_losses + axeD_losses))
                    axeDrevived = Math.round(axeD_losses * beds / (archerD_losses + spearD_losses + swordD_losses + axeD_losses))
                    archerDrevived = Math.round(archerD_losses * beds / (archerD_losses + spearD_losses + swordD_losses + axeD_losses))
                    lcDrevived = 0
                    maDrevived = 0
                    hcDrevived = 0
                }
            } else {
                if (beds <= (((archerD_losses + spearD_losses + swordD_losses + axeD_losses) + lcD_losses * 4 + maD_losses * 5 + hcD_losses * 6) / 2)) {
                    spearDrevived = Math.round(spearD_losses / 2)
                    swordDrevived = Math.round(swordD_losses / 2)
                    axeDrevived = Math.round(axeD_losses / 2)
                    archerDrevived = Math.round(archerD_losses / 2)
                    lcDrevived = Math.round(lcD_losses / 2)
                    maDrevived = Math.round(maD_losses / 2)
                    hcDrevived = Math.round(hcD_losses / 2)
                } else {
                    spearDrevived = Math.round(spearD_losses * beds / ((archerD_losses + spearD_losses + swordD_losses + axeD_losses) + lcD_losses * 4 + maD_losses * 5 + hcD_losses * 6))
                    swordDrevived = Math.round(swordD_losses * beds / ((archerD_losses + spearD_losses + swordD_losses + axeD_losses) + lcD_losses * 4 + maD_losses * 5 + hcD_losses * 6))
                    axeDrevived = Math.round(axeD_losses * beds / ((archerD_losses + spearD_losses + swordD_losses + axeD_losses) + lcD_losses * 4 + maD_losses * 5 + hcD_losses * 6))
                    archerDrevived = Math.round(archerD_losses * beds / ((archerD_losses + spearD_losses + swordD_losses + axeD_losses) + lcD_losses * 4 + maD_losses * 5 + hcD_losses * 6))
                    lcDrevived = Math.round(lcD_losses * beds / ((archerD_losses + spearD_losses + swordD_losses + axeD_losses) + lcD_losses * 4 + maD_losses * 5 + hcD_losses * 6))
                    maDrevived = Math.round(maD_losses * beds / ((archerD_losses + spearD_losses + swordD_losses + axeD_losses) + lcD_losses * 4 + maD_losses * 5 + hcD_losses * 6))
                    hcDrevived = Math.round(hcD_losses * beds / ((archerD_losses + spearD_losses + swordD_losses + axeD_losses) + lcD_losses * 4 + maD_losses * 5 + hcD_losses * 6))
                }
            }
            console.log(spearDrevived, swordDrevived, axeDrevived, archerDrevived, lcDrevived, maDrevived, hcDrevived)
            survivedProvisions()
        }

        function survivedProvisions() {
            survivedProvisionA = attackerprovision + (lossesprovisionA)
            survivedProvisionD = defenderprovision + (lossesprovisionD)
        }
        console.log(survivedProvisionA, survivedProvisionD)
        getDataBattle()
    }
    battleCalculator.calculateT = function() {
        const spear = battleCalculatorSettings[SETTINGS.TROOPS_SPEAR]
        const sword = battleCalculatorSettings[SETTINGS.TROOPS_SWORD]
        const axe = battleCalculatorSettings[SETTINGS.TROOPS_AXE]
        const archer = battleCalculatorSettings[SETTINGS.TROOPS_ARCHER]
        const lc = battleCalculatorSettings[SETTINGS.TROOPS_LC]
        const ma = battleCalculatorSettings[SETTINGS.TROOPS_MA]
        const hc = battleCalculatorSettings[SETTINGS.TROOPS_HC]
        const ram = battleCalculatorSettings[SETTINGS.TROOPS_RAM]
        const catapult = battleCalculatorSettings[SETTINGS.TROOPS_CATAPULT]
        const berserker = battleCalculatorSettings[SETTINGS.TROOPS_DOPPELSOLDNER]
        const trebuchet = battleCalculatorSettings[SETTINGS.TROOPS_TREBUCHET]
        const snob = battleCalculatorSettings[SETTINGS.TROOPS_SNOB]
        const knight = battleCalculatorSettings[SETTINGS.TROOPS_KNIGHT]
        const barracks = battleCalculatorSettings[SETTINGS.TROOPS_BARRACKS]
        const preceptory = battleCalculatorSettings[SETTINGS.TROOPS_PRECEPTORY]
        const order = battleCalculatorSettings[SETTINGS.TROOPS_ORDER]
        const intenseTraining = battleCalculatorSettings[SETTINGS.TROOPS_TRAINING]
        var wood = [50, 30, 60, 80, 125, 250, 200, 300, 320, 0, 40000, 4000, 1200]
        var clay = [30, 30, 30, 30, 100, 100, 150, 200, 400, 0, 50000, 2000, 1200]
        var iron = [20, 70, 40, 60, 250, 150, 600, 200, 100, 0, 50000, 2000, 2400]
        var food = [1, 1, 1, 1, 4, 5, 6, 5, 8, 1, 100, 10, 6]
        var build_time = [90, 120, 150, 180, 360, 450, 600, 480, 450, 21600, 10800, 1200, 1200]
        var attack = [10, 25, 45, 25, 130, 150, 150, 2, 100, 150, 30, 30, 300]
        var def_inf = [25, 55, 10, 10, 30, 40, 200, 20, 100, 250, 100, 200, 100]
        var def_kav = [45, 5, 5, 30, 40, 30, 160, 50, 50, 400, 50, 250, 100]
        var def_arc = [10, 30, 10, 60, 30, 50, 180, 20, 100, 150, 100, 200, 50]
        var speed = [8, 9, 14, 18, 24, 35, 50, 0]
        var load = [25, 15, 10, 10, 80, 50, 50, 0, 0, 100, 0, 0, 10]
        var discipline = [0, 33, 66, 99]
        let buildTime = 0
        let factor = 1
        let researchFactor = 1
        let effectFactor = 1
        let preceptoryBonus = 1
        let barracksModifier = 1
        let barracksEffectModifier = 1
        let barracksPreceptoryModifier = 1
        let preceptoryModifier = 1
        let intenseTrainingEffect = 0

        function checkResearches() {
            if (barracks >= 10 && barracks < 20) {
                researchFactor = 1.05
            } else if (barracks >= 20 && barracks < 25) {
                researchFactor = 1.15
            } else if (barracks >= 25) {
                researchFactor = 1.30
            } else {
                researchFactor = 1.00
            }
            checkTribeEffect()
        }

        function checkTribeEffect() {
            if (intenseTraining == 'level_1') {
                intenseTrainingEffect = 1.04
            } else if (intenseTraining == 'level_2') {
                intenseTrainingEffect = 1.08
            } else if (intenseTraining == 'level_3') {
                intenseTrainingEffect = 1.12
            } else if (intenseTraining == 'level_4') {
                intenseTrainingEffect = 1.16
            } else if (intenseTraining == 'level_5') {
                intenseTrainingEffect = 1.20
            } else {
                intenseTrainingEffect = 1.00
            }
            checkPreceptory()
        }

        function checkPreceptory() {
            if (preceptory == 1) {
                preceptoryBonus = 1.01
            } else if (preceptory == 2) {
                preceptoryBonus = 1.02
            } else if (preceptory == 3) {
                preceptoryBonus = 1.03
            } else if (preceptory == 4) {
                preceptoryBonus = 1.04
            } else if (preceptory == 5) {
                preceptoryBonus = 1.05
            } else if (preceptory == 6) {
                preceptoryBonus = 1.06
            } else if (preceptory == 7) {
                preceptoryBonus = 1.07
            } else if (preceptory == 8) {
                preceptoryBonus = 1.08
            } else if (preceptory == 9) {
                preceptoryBonus = 1.09
            } else if (preceptory == 10) {
                preceptoryBonus = 1.10
            } else {
                preceptoryBonus = 1.00
            }
            checkDomination()
        }

        function checkDomination() {
            const domination = battleCalculatorSettings[SETTINGS.TROOPS_DOMINATION]
            if (domination) {
                effectFactor = 1.10
            } else {
                effectFactor = 1.00
            }
            checkTravel()
        }

        function checkTravel() {
            if (trebuchet > 0) {
                travelTime = speed[6] + ' minut'
            } else if (snob > 0) {
                travelTime = speed[5] + ' minut'
            } else if (ram > 0 || catapult > 0) {
                travelTime = speed[4] + ' minuty'
            } else if (sword > 0) {
                travelTime = speed[3] + ' minut'
            } else if (spear > 0 || axe > 0 || archer > 0 || berserker > 0) {
                travelTime = speed[2] + ' minut'
            } else if (hc > 0) {
                travelTime = speed[1] + ' minut'
            } else if (lc > 0 || ma > 0 || knight > 0) {
                travelTime = speed[0] + ' minut'
            } else {
                travelTime = speed[7] + ' minut'
            }
            checkDiscipline()
        }

        function checkDiscipline() {
            if (barracks >= 7 && barracks < 14) {
                disciplinePercent = discipline[1]
            } else if (barracks >= 14 && barracks < 23) {
                disciplinePercent = discipline[2]
            } else if (barracks >= 23) {
                disciplinePercent = discipline[3]
            } else {
                disciplinePercent = discipline[0]
            }
            calculateModifier()
        }

        function calculateModifier() {
            barracksEffectModifier = factor / (effectFactor * intenseTrainingEffect)
            barracksModifier = barracksEffectModifier / researchFactor
            barracksPreceptoryModifier = barracksModifier / preceptoryBonus
            preceptoryModifier = factor / preceptoryBonus
            calculateBuildtime()
        }

        function calculateBuildtime() {
            if (order == 'troops.teutonic') {
                buildTime = barracksPreceptoryModifier * (spear * build_time[0] + sword * build_time[1] + archer * build_time[3] + hc * build_time[6]) + preceptoryModifier * (trebuchet * build_time[11]) + barracksModifier * (axe * build_time[2] + lc * build_time[4] + ma * build_time[5] + ram * build_time[7] + catapult * build_time[8]) + berserker * build_time[12] + knight * build_time[9] + snob * build_time[10]
            } else if (order == 'troops.templars') {
                buildTime = barracksModifier * (spear * build_time[0] + sword * build_time[1] + archer * build_time[3] + hc * build_time[6]) + trebuchet * build_time[11] + barracksPreceptoryModifier * (axe * build_time[2] + lc * build_time[4] + ma * build_time[5] + ram * build_time[7] + catapult * build_time[8]) + preceptoryModifier * (berserker * build_time[12]) + knight * build_time[9] + snob * build_time[10]
            } else {
                buildTime = barracksModifier * (spear * build_time[0] + sword * build_time[1] + archer * build_time[3] + hc * build_time[6]) + trebuchet * build_time[11] + barracksModifier * (axe * build_time[2] + lc * build_time[4] + ma * build_time[5] + ram * build_time[7] + catapult * build_time[8]) + berserker * build_time[12] + knight * build_time[9] + snob * build_time[10]
            }
            updateDisplay()
        }

        function secondsToDaysHHMMSS(totalSeconds) {
            var returnString = ''
            var date = new Date(totalSeconds * 1000)
            var hhmmss = date.toISOString().substr(11, 8)
            var numdays = Math.floor(totalSeconds / 86400)
            if (numdays > 1) {
                returnString = numdays + ' dni i '
            } else if (numdays > 0) {
                returnString = '1 dzień i '
            }
            returnString += hhmmss
            return returnString
        }

        function updateDisplay() {
            woodAmount = spear * wood[0] + sword * wood[1] + axe * wood[2] + archer * wood[3] + lc * wood[4] + ma * wood[5] + hc * wood[6] + ram * wood[7] + catapult * wood[8] + knight * wood[9] + snob * wood[10] + trebuchet * wood[11] + berserker * wood[12]
            clayAmount = spear * clay[0] + sword * clay[1] + axe * clay[2] + archer * clay[3] + lc * clay[4] + ma * clay[5] + hc * clay[6] + ram * clay[7] + catapult * clay[8] + knight * clay[9] + snob * clay[10] + trebuchet * clay[11] + berserker * clay[12]
            ironAmount = spear * iron[0] + sword * iron[1] + axe * iron[2] + archer * iron[3] + lc * iron[4] + ma * iron[5] + hc * iron[6] + ram * iron[7] + catapult * iron[8] + knight * iron[9] + snob * iron[10] + trebuchet * iron[11] + berserker * iron[12]
            foodAmount = spear * food[0] + sword * food[1] + axe * food[2] + archer * food[3] + lc * food[4] + ma * food[5] + hc * food[6] + ram * food[7] + catapult * food[8] + knight * food[9] + snob * food[10] + trebuchet * food[11] + berserker * food[12]
            attackPower = spear * attack[0] + sword * attack[1] + axe * attack[2] + archer * attack[3] + lc * attack[4] + ma * attack[5] + hc * attack[6] + ram * attack[7] + catapult * attack[8] + knight * attack[9] + snob * attack[10] + trebuchet * attack[11] + berserker * attack[12]
            defInf = spear * def_inf[0] + sword * def_inf[1] + axe * def_inf[2] + archer * def_inf[3] + lc * def_inf[4] + ma * def_inf[5] + hc * def_inf[6] + ram * def_inf[7] + catapult * def_inf[8] + knight * def_inf[9] + snob * def_inf[10] + trebuchet * def_inf[11] + berserker * def_inf[12]
            defCav = spear * def_kav[0] + sword * def_kav[1] + axe * def_kav[2] + archer * def_kav[3] + lc * def_kav[4] + ma * def_kav[5] + hc * def_kav[6] + ram * def_kav[7] + catapult * def_kav[8] + knight * def_kav[9] + snob * def_kav[10] + trebuchet * def_kav[11] + berserker * def_kav[12]
            defArch = spear * def_arc[0] + sword * def_arc[1] + axe * def_arc[2] + archer * def_arc[3] + lc * def_arc[4] + ma * def_arc[5] + hc * def_arc[6] + ram * def_arc[7] + catapult * def_arc[8] + knight * def_arc[9] + snob * def_arc[10] + trebuchet * def_arc[11] + berserker * def_arc[12]
            loadAmount = spear * load[0] + sword * load[1] + axe * load[2] + archer * load[3] + lc * load[4] + ma * load[5] + hc * load[6] + ram * load[7] + catapult * load[8] + knight * load[9] + snob * load[10] + trebuchet * load[11] + berserker * load[12]
            finalTime = secondsToDaysHHMMSS(buildTime)
            attInf = spear * attack[0] + sword * attack[1] + axe * attack[2] + ram * attack[7] + catapult * attack[8] + trebuchet * attack[11] + berserker * attack[12]
            attCav = lc * attack[4] + hc * attack[6] + knight * attack[9]
            attArc = archer * attack[3] + ma * attack[5]
        }
        checkResearches()
    }
    battleCalculator.start = function() {
        running = true
        eventQueue.trigger(eventTypeProvider.BATTLE_CALCULATOR_START)
    }
    battleCalculator.stop = function() {
        running = false
        eventQueue.trigger(eventTypeProvider.BATTLE_CALCULATOR_STOP)
    }
    battleCalculator.getSettings = function() {
        return settings
    }
    battleCalculator.isInitialized = function() {
        return initialized
    }
    battleCalculator.isRunning = function() {
        return running
    }
    battleCalculator.getBashpointsAtt = function() {
        return pointsdef
    }
    battleCalculator.getBashpointsDef = function() {
        return pointsatt
    }
    battleCalculator.getWoodAmount = function() {
        return woodAmount
    }
    battleCalculator.getClayAmount = function() {
        return clayAmount
    }
    battleCalculator.getIronAmount = function() {
        return ironAmount
    }
    battleCalculator.getLoadAmount = function() {
        return loadAmount
    }
    battleCalculator.getFoodAmount = function() {
        return foodAmount
    }
    battleCalculator.getDefInf = function() {
        return defInf
    }
    battleCalculator.getDefCav = function() {
        return defCav
    }
    battleCalculator.getDefArc = function() {
        return defArch
    }
    battleCalculator.getAttInf = function() {
        return attInf
    }
    battleCalculator.getAttCav = function() {
        return attCav
    }
    battleCalculator.getAttArc = function() {
        return attArc
    }
    battleCalculator.getSpeed = function() {
        return travelTime
    }
    battleCalculator.getBuildTime = function() {
        return finalTime
    }
    battleCalculator.getDiscipline = function() {
        return disciplinePercent
    }
    battleCalculator.getPower = function() {
        return attackPower
    }
    battleCalculator.getTarget = function() {
        return catTarget
    }
    battleCalculator.getBuildingfrom = function() {
        return catapulttargetlevel
    }
    battleCalculator.getBuildingto = function() {
        return afterBattleTargetLevel
    }
    battleCalculator.getWallfrom = function() {
        return wallAfterPreround
    }
    battleCalculator.getWallto = function() {
        return afterRamAttackPastBattle
    }
    battleCalculator.getWallfrompre = function() {
        return wall
    }
    battleCalculator.getWalltopre = function() {
        return wallAfterPreround
    }
    battleCalculator.getDefencemodifier = function() {
        return overalModifierDef
    }
    battleCalculator.getDefenceprovisions = function() {
        return defenderprovision
    }
    battleCalculator.getStrentghdefend = function() {
        return strengthDefenderRound1
    }
    battleCalculator.getDefencebashpoint = function() {
        return bashpointsDefender
    }
    battleCalculator.getDefencekilledprovisions = function() {
        return lossesprovisionD
    }
    battleCalculator.getStrongesttypedef = function() {
        return showD
    }
    battleCalculator.getKillrated = function() {
        return killratioDefender
    }
    battleCalculator.getDefencesurvivedprovisions = function() {
        return survivedProvisionD
    }
    battleCalculator.getAvailablebeds = function() {
        return beds
    }
    battleCalculator.getAttackmodifier = function() {
        return overalModifierOff
    }
    battleCalculator.getAttackprovisions = function() {
        return attackerprovision
    }
    battleCalculator.getStrentghattack = function() {
        return strengthAttackerRound1
    }
    battleCalculator.getAttackbashpoint = function() {
        return bashpointsAttacker
    }
    battleCalculator.getAttackkilledprovisions = function() {
        return lossesprovisionA
    }
    battleCalculator.getStrongesttypeoff = function() {
        return showA
    }
    battleCalculator.getKillratea = function() {
        return killratioAttacker
    }
    battleCalculator.getAttacksurvivedprovisions = function() {
        return survivedProvisionA
    }
    battleCalculator.getDoublestrength = function() {
        return doubleStrengthBonus
    }
    battleCalculator.getSpeardAmount = function() {
        return spearD
    }
    battleCalculator.getSpeardLosses = function() {
        return spearD_losses
    }
    battleCalculator.getSpeardRevived = function() {
        return spearDrevived
    }
    battleCalculator.getSpeardSurvived = function() {
        return spearD_survivorsRound3
    }
    battleCalculator.getSworddAmount = function() {
        return swordD
    }
    battleCalculator.getSworddLosses = function() {
        return swordD_losses
    }
    battleCalculator.getSworddRevived = function() {
        return swordDrevived
    }
    battleCalculator.getSworddSurvived = function() {
        return swordD_survivorsRound3
    }
    battleCalculator.getAxedAmount = function() {
        return axeD
    }
    battleCalculator.getAxedLosses = function() {
        return axeD_losses
    }
    battleCalculator.getAxedRevived = function() {
        return axeDrevived
    }
    battleCalculator.getAxedSurvived = function() {
        return axeD_survivorsRound3
    }
    battleCalculator.getArcherdAmount = function() {
        return archerD
    }
    battleCalculator.getArcherdLosses = function() {
        return archerD_losses
    }
    battleCalculator.getArcherdRevived = function() {
        return archerDrevived
    }
    battleCalculator.getArcherdSurvived = function() {
        return archerD_survivorsRound3
    }
    battleCalculator.getSnobdAmount = function() {
        return snobD
    }
    battleCalculator.getSnobdLosses = function() {
        return snobD_losses
    }
    battleCalculator.getSnobdSurvived = function() {
        return snobD_survivorsRound3
    }
    battleCalculator.getKnightdAmount = function() {
        return knightD
    }
    battleCalculator.getKnightdLosses = function() {
        return knightD_losses
    }
    battleCalculator.getKnightdSurvived = function() {
        return knightD_survivorsRound3
    }
    battleCalculator.getRamdAmount = function() {
        return ramD
    }
    battleCalculator.getRamdLosses = function() {
        return ramD_losses
    }
    battleCalculator.getRamdSurvived = function() {
        return ramD_survivorsRound3
    }
    battleCalculator.getCatapultdAmount = function() {
        return catapultD
    }
    battleCalculator.getCatapultdLosses = function() {
        return catapultD_losses
    }
    battleCalculator.getCatapultdSurvived = function() {
        return catapultD_survivorsRound3
    }
    battleCalculator.getTrebuchetdAmount = function() {
        return trebuchetD
    }
    battleCalculator.getTrebuchetdLosses = function() {
        return trebuchetD_losses
    }
    battleCalculator.getTrebuchetdSurvived = function() {
        return trebuchetD_survivorsRound3
    }
    battleCalculator.getLcdAmount = function() {
        return lcD
    }
    battleCalculator.getLcdLosses = function() {
        return lcD_losses
    }
    battleCalculator.getLcdRevived = function() {
        return lcDrevived
    }
    battleCalculator.getLcdSurvived = function() {
        return lcD_survivorsRound3
    }
    battleCalculator.getMadAmount = function() {
        return maD
    }
    battleCalculator.getMadLosses = function() {
        return maD_losses
    }
    battleCalculator.getMadRevived = function() {
        return maDrevived
    }
    battleCalculator.getMadSurvived = function() {
        return maD_survivorsRound3
    }
    battleCalculator.getHcdAmount = function() {
        return hcD
    }
    battleCalculator.getHcdLosses = function() {
        return hcD_losses
    }
    battleCalculator.getHcdRevived = function() {
        return hcDrevived
    }
    battleCalculator.getHcdSurvived = function() {
        return hcD_survivorsRound3
    }
    battleCalculator.getBerserkerdAmount = function() {
        return berserkerD
    }
    battleCalculator.getBerserkerdLosses = function() {
        return berserkerD_losses
    }
    battleCalculator.getBerserkerdSurvived = function() {
        return berserkerD_survivorsRound3
    }
    battleCalculator.getSpearaAmount = function() {
        return spearA
    }
    battleCalculator.getSpearaLosses = function() {
        return spearA_losses
    }
    battleCalculator.getSpearaRevived = function() {
        return spearArevived
    }
    battleCalculator.getSpearaSurvived = function() {
        return spearA_survivorsRound3
    }
    battleCalculator.getSwordaAmount = function() {
        return swordA
    }
    battleCalculator.getSwordaLosses = function() {
        return swordA_losses
    }
    battleCalculator.getSwordaRevived = function() {
        return swordArevived
    }
    battleCalculator.getSwordaSurvived = function() {
        return swordA_survivorsRound3
    }
    battleCalculator.getAxeaAmount = function() {
        return axeA
    }
    battleCalculator.getAxeaLosses = function() {
        return axeA_losses
    }
    battleCalculator.getAxeaRevived = function() {
        return axeArevived
    }
    battleCalculator.getAxeaSurvived = function() {
        return axeA_survivorsRound3
    }
    battleCalculator.getArcheraAmount = function() {
        return archerA
    }
    battleCalculator.getArcheraLosses = function() {
        return archerA_losses
    }
    battleCalculator.getArcheraRevived = function() {
        return archerArevived
    }
    battleCalculator.getArcheraSurvived = function() {
        return archerA_survivorsRound3
    }
    battleCalculator.getSnobaAmount = function() {
        return snobA
    }
    battleCalculator.getSnobaLosses = function() {
        return snobA_losses
    }
    battleCalculator.getSnobaRevived = function() {
        return snobArevived
    }
    battleCalculator.getSnobaSurvived = function() {
        return snobA_survivorsRound3
    }
    battleCalculator.getKnightaAmount = function() {
        return knightA
    }
    battleCalculator.getKnightaLosses = function() {
        return knightA_losses
    }
    battleCalculator.getKnightaRevived = function() {
        return knightArevived
    }
    battleCalculator.getKnightaSurvived = function() {
        return knightA_survivorsRound3
    }
    battleCalculator.getRamaAmount = function() {
        return ramA
    }
    battleCalculator.getRamaLosses = function() {
        return ramA_losses
    }
    battleCalculator.getRamaRevived = function() {
        return ramArevived
    }
    battleCalculator.getRamaSurvived = function() {
        return ramA_survivorsRound3
    }
    battleCalculator.getCatapultaAmount = function() {
        return catapultA
    }
    battleCalculator.getCatapultaLosses = function() {
        return catapultA_losses
    }
    battleCalculator.getCatapultaRevived = function() {
        return catapultArevived
    }
    battleCalculator.getCatapultaSurvived = function() {
        return catapultA_survivorsRound3
    }
    battleCalculator.getTrebuchetaAmount = function() {
        return trebuchetA
    }
    battleCalculator.getTrebuchetaLosses = function() {
        return trebuchetA_losses
    }
    battleCalculator.getTrebuchetaRevived = function() {
        return trebuchetArevived
    }
    battleCalculator.getTrebuchetaSurvived = function() {
        return trebuchetA_survivorsRound3
    }
    battleCalculator.getLcaAmount = function() {
        return lcA
    }
    battleCalculator.getLcaLosses = function() {
        return lcA_losses
    }
    battleCalculator.getLcaRevived = function() {
        return lcArevived
    }
    battleCalculator.getLcaSurvived = function() {
        return lcA_survivorsRound3
    }
    battleCalculator.getMaaAmount = function() {
        return maA
    }
    battleCalculator.getMaaLosses = function() {
        return maA_losses
    }
    battleCalculator.getMaaRevived = function() {
        return maArevived
    }
    battleCalculator.getMaaSurvived = function() {
        return maA_survivorsRound3
    }
    battleCalculator.getHcaAmount = function() {
        return hcA
    }
    battleCalculator.getHcaLosses = function() {
        return hcA_losses
    }
    battleCalculator.getHcaRevived = function() {
        return hcArevived
    }
    battleCalculator.getHcaSurvived = function() {
        return hcA_survivorsRound3
    }
    battleCalculator.getBerserkeraAmount = function() {
        return berserkerA
    }
    battleCalculator.getBerserkeraLosses = function() {
        return berserkerA_losses
    }
    battleCalculator.getBerserkeraRevived = function() {
        return berserkerArevived
    }
    battleCalculator.getBerserkeraSurvived = function() {
        return berserkerA_survivorsRound3
    }
    battleCalculator.getPresetBerserker = function() {
        return presetBERSERKER
    }
    battleCalculator.getPresetAxe = function() {
        return presetAXE
    }
    battleCalculator.getPresetArcher = function() {
        return presetARCHER
    }
    battleCalculator.getPresetSnob = function() {
        return presetSNOB
    }
    battleCalculator.getPresetKnight = function() {
        return presetKNIGHT
    }
    battleCalculator.getPresetHc = function() {
        return presetHC
    }
    battleCalculator.getPresetLc = function() {
        return presetLC
    }
    battleCalculator.getPresetMa = function() {
        return presetMA
    }
    battleCalculator.getPresetRam = function() {
        return presetRAM
    }
    battleCalculator.getPresetCatapult = function() {
        return presetCATAPULT
    }
    battleCalculator.getPresetSpear = function() {
        return presetSPEAR
    }
    battleCalculator.getPresetSword = function() {
        return presetSWORD
    }
    battleCalculator.getPresetTrebuchet = function() {
        return presetTREBUCHET
    }
    battleCalculator.getVillageBerserker = function() {
        return villageBerserker
    }
    battleCalculator.getVillageAxe = function() {
        return villageAxe
    }
    battleCalculator.getVillageArcher = function() {
        return villageArcher
    }
    battleCalculator.getVillageSnob = function() {
        return villageSnob
    }
    battleCalculator.getVillageKnight = function() {
        return villageKnight
    }
    battleCalculator.getVillageHc = function() {
        return villageHC
    }
    battleCalculator.getVillageLc = function() {
        return villageLC
    }
    battleCalculator.getVillageMa = function() {
        return villageMA
    }
    battleCalculator.getVillageRam = function() {
        return villageRam
    }
    battleCalculator.getVillageCatapult = function() {
        return villageCatapult
    }
    battleCalculator.getVillageSpear = function() {
        return villageSpear
    }
    battleCalculator.getVillageSword = function() {
        return villageSword
    }
    battleCalculator.getVillageTrebuchet = function() {
        return villageTrebuchet
    }
    return battleCalculator
})
define('two/battleCalculator/events', [], function () {
    angular.extend(eventTypeProvider, {
        BATTLE_CALCULATOR_START: 'battle_calculator_start',
        BATTLE_CALCULATOR_STOP: 'battle_calculator_stop'
    })
})

define('two/battleCalculator/ui', [
    'two/ui',
    'two/battleCalculator',
    'two/battleCalculator/settings',
    'two/battleCalculator/settings/map',
    'two/battleCalculator/types/item',
    'two/battleCalculator/types/level',
    'two/battleCalculator/types/catapult-target',
    'two/battleCalculator/types/order',
    'two/battleCalculator/types/wall',
    'two/battleCalculator/types/church',
    'two/battleCalculator/types/weapon-master',
    'two/battleCalculator/types/iron-walls',
    'two/battleCalculator/types/clinique',
    'two/battleCalculator/types/hospital',
    'two/battleCalculator/types/training',
    'two/Settings',
    'two/EventScope',
    'struct/MapData',
    'two/utils'
], function(
    interfaceOverflow,
    battleCalculator,
    SETTINGS,
    SETTINGS_MAP,
    B_ITEMS,
    B_ITEMS_LEVELS,
    B_CAT_TARGET,
    T_ORDER_TYPE,
    B_WALLS,
    B_CHURCHES,
    B_SKILL_WEAPON_MASTER_LEVEL,
    B_SKILL_IRON_WALLS_LEVEL,
    B_SKILL_CLINIQUE_LEVEL,
    B_HOSPITAL_LEVEL,
    T_TRAINING_LEVEL,
    Settings,
    EventScope,
    mapData,
    utils
) {
    let $scope
    let presetList = modelDataService.getPresetList()
    let settings
    let $button
    let battleVillage
    let mapSelectedVillage = false
    const TAB_TYPES = {
        BATTLE: 'battle',
        TROOPS: 'troops',
        BASHPOINTS: 'bashpoints'
    }
    const setMapSelectedVillage = function(event, menu) {
        mapSelectedVillage = menu.data
    }
    const unsetMapSelectedVillage = function() {
        mapSelectedVillage = false
    }
    const selectTab = function(tabType) {
        $scope.selectedTab = tabType
    }
    const switchState = function() {
        if (battleCalculator.isRunning()) {
            battleCalculator.stop()
        } else {
            battleCalculator.start()
        }
    }
    const addMapSelected = function() {
        if (!mapSelectedVillage) {
            return utils.notif('error', $filter('i18n')('error_no_map_selected_village', $rootScope.loc.ale, 'battle_calculator'))
        }
        mapData.loadTownDataAsync(mapSelectedVillage.x, mapSelectedVillage.y, 1, 1, function(data) {
            battleVillage.origin = data
        })
        $scope.settings[SETTINGS.BATTLE_VILLAGE_ID] = mapSelectedVillage.id
    }
    const insertSurvived = function() {
        if ($scope.spearDsurvived > 0 || $scope.swordDsurvived > 0 || $scope.axeDsurvived > 0 || $scope.archerDsurvived > 0 || $scope.lcDsurvived > 0 || $scope.maDsurvived > 0 || $scope.hcDsurvived > 0 || $scope.ramDsurvived > 0 || $scope.catapultDsurvived > 0 || $scope.snobDsurvived > 0 || $scope.knightDsurvived > 0 || $scope.trebuchetDsurvived > 0 || $scope.berserkerDsurvived > 0) {
            $scope.settings[SETTINGS.BATTLE_SPEAR_D] = battleCalculator.getSpeardSurvived()
            $scope.settings[SETTINGS.BATTLE_SWORD_D] = battleCalculator.getSworddSurvived()
            $scope.settings[SETTINGS.BATTLE_AXE_D] = battleCalculator.getAxedSurvived()
            $scope.settings[SETTINGS.BATTLE_ARCHER_D] = battleCalculator.getArcherdSurvived()
            $scope.settings[SETTINGS.BATTLE_RAM_D] = battleCalculator.getRamdSurvived()
            $scope.settings[SETTINGS.BATTLE_CATAPULT_D] = battleCalculator.getCatapultdSurvived()
            $scope.settings[SETTINGS.BATTLE_SNOB_D] = battleCalculator.getSnobdSurvived()
            $scope.settings[SETTINGS.BATTLE_KNIGHT_D] = battleCalculator.getKnightdSurvived()
            $scope.settings[SETTINGS.BATTLE_TREBUCHET_D] = battleCalculator.getTrebuchetdSurvived()
            $scope.settings[SETTINGS.BATTLE_DOPPELSOLDNER_D] = battleCalculator.getBerserkerdSurvived()
            $scope.settings[SETTINGS.BATTLE_LC_D] = battleCalculator.getLcdSurvived()
            $scope.settings[SETTINGS.BATTLE_MA_D] = battleCalculator.getMadSurvived()
            $scope.settings[SETTINGS.BATTLE_HC_D] = battleCalculator.getHcdSurvived()
            settings.setAll(settings.decode($scope.settings))
        } else if ($scope.spearAsurvived > 0 || $scope.swordAsurvived > 0 || $scope.axeAsurvived > 0 || $scope.archerAsurvived > 0 || $scope.lcAsurvived > 0 || $scope.maAsurvived > 0 || $scope.hcAsurvived > 0 || $scope.ramAsurvived > 0 || $scope.catapultAsurvived > 0 || $scope.snobAsurvived > 0 || $scope.knightAsurvived > 0 || $scope.trebuchetAsurvived > 0 || $scope.berserkerAsurvived > 0) {
            $scope.settings[SETTINGS.BATTLE_SPEAR_A] = battleCalculator.getSpearaSurvived()
            $scope.settings[SETTINGS.BATTLE_SWORD_A] = battleCalculator.getSwordaSurvived()
            $scope.settings[SETTINGS.BATTLE_AXE_A] = battleCalculator.getAxeaSurvived()
            $scope.settings[SETTINGS.BATTLE_ARCHER_A] = battleCalculator.getArcheraSurvived()
            $scope.settings[SETTINGS.BATTLE_RAM_A] = battleCalculator.getRamaSurvived()
            $scope.settings[SETTINGS.BATTLE_CATAPULT_A] = battleCalculator.getCatapultaSurvived()
            $scope.settings[SETTINGS.BATTLE_SNOB_A] = battleCalculator.getSnobaSurvived()
            $scope.settings[SETTINGS.BATTLE_KNIGHT_A] = battleCalculator.getKnightaSurvived()
            $scope.settings[SETTINGS.BATTLE_TREBUCHET_A] = battleCalculator.getTrebuchetaSurvived()
            $scope.settings[SETTINGS.BATTLE_DOPPELSOLDNER_A] = battleCalculator.getBerserkeraSurvived()
            $scope.settings[SETTINGS.BATTLE_LC_A] = battleCalculator.getLcaSurvived()
            $scope.settings[SETTINGS.BATTLE_MA_A] = battleCalculator.getMaaSurvived()
            $scope.settings[SETTINGS.BATTLE_HC_A] = battleCalculator.getHcaSurvived()
            settings.setAll(settings.decode($scope.settings))
        } else {
            $scope.settings[SETTINGS.BATTLE_SPEAR_A] = 0
            $scope.settings[SETTINGS.BATTLE_SWORD_A] = 0
            $scope.settings[SETTINGS.BATTLE_AXE_A] = 0
            $scope.settings[SETTINGS.BATTLE_ARCHER_A] = 0
            $scope.settings[SETTINGS.BATTLE_RAM_A] = 0
            $scope.settings[SETTINGS.BATTLE_CATAPULT_A] = 0
            $scope.settings[SETTINGS.BATTLE_SNOB_A] = 0
            $scope.settings[SETTINGS.BATTLE_KNIGHT_A] = 0
            $scope.settings[SETTINGS.BATTLE_TREBUCHET_A] = 0
            $scope.settings[SETTINGS.BATTLE_DOPPELSOLDNER_A] = 0
            $scope.settings[SETTINGS.BATTLE_LC_A] = 0
            $scope.settings[SETTINGS.BATTLE_MA_A] = 0
            $scope.settings[SETTINGS.BATTLE_HC_A] = 0
            $scope.settings[SETTINGS.BATTLE_SPEAR_D] = 0
            $scope.settings[SETTINGS.BATTLE_SWORD_D] = 0
            $scope.settings[SETTINGS.BATTLE_AXE_D] = 0
            $scope.settings[SETTINGS.BATTLE_ARCHER_D] = 0
            $scope.settings[SETTINGS.BATTLE_RAM_D] = 0
            $scope.settings[SETTINGS.BATTLE_CATAPULT_D] = 0
            $scope.settings[SETTINGS.BATTLE_SNOB_D] = 0
            $scope.settings[SETTINGS.BATTLE_KNIGHT_D] = 0
            $scope.settings[SETTINGS.BATTLE_TREBUCHET_D] = 0
            $scope.settings[SETTINGS.BATTLE_DOPPELSOLDNER_D] = 0
            $scope.settings[SETTINGS.BATTLE_LC_D] = 0
            $scope.settings[SETTINGS.BATTLE_MA_D] = 0
            $scope.settings[SETTINGS.BATTLE_HC_D] = 0
            settings.setAll(settings.decode($scope.settings))
        }
    }
    const insertPresetAttacker = function() {
        battleCalculator.getPresetUnits()
        $scope.settings[SETTINGS.BATTLE_SPEAR_A] = battleCalculator.getPresetSpear()
        $scope.settings[SETTINGS.BATTLE_SWORD_A] = battleCalculator.getPresetSword()
        $scope.settings[SETTINGS.BATTLE_AXE_A] = battleCalculator.getPresetAxe()
        $scope.settings[SETTINGS.BATTLE_ARCHER_A] = battleCalculator.getPresetArcher()
        $scope.settings[SETTINGS.BATTLE_RAM_A] = battleCalculator.getPresetRam()
        $scope.settings[SETTINGS.BATTLE_CATAPULT_A] = battleCalculator.getPresetCatapult()
        $scope.settings[SETTINGS.BATTLE_SNOB_A] = battleCalculator.getPresetSnob()
        $scope.settings[SETTINGS.BATTLE_KNIGHT_A] = battleCalculator.getPresetKnight()
        $scope.settings[SETTINGS.BATTLE_TREBUCHET_A] = battleCalculator.getPresetTrebuchet()
        $scope.settings[SETTINGS.BATTLE_DOPPELSOLDNER_A] = battleCalculator.getPresetBerserker()
        $scope.settings[SETTINGS.BATTLE_LC_A] = battleCalculator.getPresetLc()
        $scope.settings[SETTINGS.BATTLE_MA_A] = battleCalculator.getPresetMa()
        $scope.settings[SETTINGS.BATTLE_HC_A] = battleCalculator.getPresetHc()
        settings.setAll(settings.decode($scope.settings))
    }
    const insertPresetDefender = function() {
        battleCalculator.getPresetUnits()
        settings.setAll(settings.decode($scope.settings))
        $scope.settings[SETTINGS.BATTLE_SPEAR_D] = battleCalculator.getPresetSpear()
        $scope.settings[SETTINGS.BATTLE_SWORD_D] = battleCalculator.getPresetSword()
        $scope.settings[SETTINGS.BATTLE_AXE_D] = battleCalculator.getPresetAxe()
        $scope.settings[SETTINGS.BATTLE_ARCHER_D] = battleCalculator.getPresetArcher()
        $scope.settings[SETTINGS.BATTLE_RAM_D] = battleCalculator.getPresetRam()
        $scope.settings[SETTINGS.BATTLE_CATAPULT_D] = battleCalculator.getPresetCatapult()
        $scope.settings[SETTINGS.BATTLE_SNOB_D] = battleCalculator.getPresetSnob()
        $scope.settings[SETTINGS.BATTLE_KNIGHT_D] = battleCalculator.getPresetKnight()
        $scope.settings[SETTINGS.BATTLE_TREBUCHET_D] = battleCalculator.getPresetTrebuchet()
        $scope.settings[SETTINGS.BATTLE_DOPPELSOLDNER_D] = battleCalculator.getPresetBerserker()
        $scope.settings[SETTINGS.BATTLE_LC_D] = battleCalculator.getPresetLc()
        $scope.settings[SETTINGS.BATTLE_MA_D] = battleCalculator.getPresetMa()
        $scope.settings[SETTINGS.BATTLE_HC_D] = battleCalculator.getPresetHc()
        settings.setAll(settings.decode($scope.settings))
    }
    const insertVillageAttacker = function() {
        battleCalculator.getVillageUnits()
        settings.setAll(settings.decode($scope.settings))
        let spearVillage = battleCalculator.getVillageSpear()
        let swordVillage = battleCalculator.getVillageSword()
        let axeVillage = battleCalculator.getVillageAxe()
        let archerVillage = battleCalculator.getVillageArcher()
        let ramVillage = battleCalculator.getVillageRam()
        let catapultVillage = battleCalculator.getVillageCatapult()
        let snobVillage = battleCalculator.getVillageSnob()
        let knigthVillage = battleCalculator.getVillageKnight()
        let trebuchetVillage = battleCalculator.getVillageTrebuchet()
        let berserkerVillage = battleCalculator.getVillageBerserker()
        let lcVillage = battleCalculator.getVillageLc()
        let maVillage = battleCalculator.getVillageMa()
        let hcVillage = battleCalculator.getVillageHc()
        $scope.settings[SETTINGS.BATTLE_SPEAR_A] = spearVillage
        $scope.settings[SETTINGS.BATTLE_SWORD_A] = swordVillage
        $scope.settings[SETTINGS.BATTLE_AXE_A] = axeVillage
        $scope.settings[SETTINGS.BATTLE_ARCHER_A] = archerVillage
        $scope.settings[SETTINGS.BATTLE_RAM_A] = ramVillage
        $scope.settings[SETTINGS.BATTLE_CATAPULT_A] = catapultVillage
        $scope.settings[SETTINGS.BATTLE_SNOB_A] = snobVillage
        $scope.settings[SETTINGS.BATTLE_KNIGHT_A] = knigthVillage
        $scope.settings[SETTINGS.BATTLE_TREBUCHET_A] = trebuchetVillage
        $scope.settings[SETTINGS.BATTLE_DOPPELSOLDNER_A] = berserkerVillage
        $scope.settings[SETTINGS.BATTLE_LC_A] = lcVillage
        $scope.settings[SETTINGS.BATTLE_MA_A] = maVillage
        $scope.settings[SETTINGS.BATTLE_HC_A] = hcVillage
        settings.setAll(settings.decode($scope.settings))
    }
    const insertVillageDefender = function() {
        battleCalculator.getVillageUnits()
        settings.setAll(settings.decode($scope.settings))
        let spearVillage = battleCalculator.getVillageSpear()
        let swordVillage = battleCalculator.getVillageSword()
        let axeVillage = battleCalculator.getVillageAxe()
        let archerVillage = battleCalculator.getVillageArcher()
        let ramVillage = battleCalculator.getVillageRam()
        let catapultVillage = battleCalculator.getVillageCatapult()
        let snobVillage = battleCalculator.getVillageSnob()
        let knigthVillage = battleCalculator.getVillageKnight()
        let trebuchetVillage = battleCalculator.getVillageTrebuchet()
        let berserkerVillage = battleCalculator.getVillageBerserker()
        let lcVillage = battleCalculator.getVillageLc()
        let maVillage = battleCalculator.getVillageMa()
        let hcVillage = battleCalculator.getVillageHc()
        $scope.settings[SETTINGS.BATTLE_SPEAR_D] = spearVillage
        $scope.settings[SETTINGS.BATTLE_SWORD_D] = swordVillage
        $scope.settings[SETTINGS.BATTLE_AXE_D] = axeVillage
        $scope.settings[SETTINGS.BATTLE_ARCHER_D] = archerVillage
        $scope.settings[SETTINGS.BATTLE_RAM_D] = ramVillage
        $scope.settings[SETTINGS.BATTLE_CATAPULT_D] = catapultVillage
        $scope.settings[SETTINGS.BATTLE_SNOB_D] = snobVillage
        $scope.settings[SETTINGS.BATTLE_KNIGHT_D] = knigthVillage
        $scope.settings[SETTINGS.BATTLE_TREBUCHET_D] = trebuchetVillage
        $scope.settings[SETTINGS.BATTLE_DOPPELSOLDNER_D] = berserkerVillage
        $scope.settings[SETTINGS.BATTLE_LC_D] = lcVillage
        $scope.settings[SETTINGS.BATTLE_MA_D] = maVillage
        $scope.settings[SETTINGS.BATTLE_HC_D] = hcVillage
        settings.setAll(settings.decode($scope.settings))
    }
    const showBashpoints = function() {
        settings.setAll(settings.decode($scope.settings))
        battleCalculator.calculateB()
        let bashpointsAtt = battleCalculator.getBashpointsAtt()
        let bashpointsDef = battleCalculator.getBashpointsDef()
        if (bashpointsAtt) {
            $scope.totalAtt = bashpointsDef
        }
        if (bashpointsDef) {
            $scope.totalDef = bashpointsAtt
        }
    }
    const clearBashpoints = function() {
        $scope.totalAtt = 0
        $scope.totalDef = 0
        $scope.settings[SETTINGS.BASHPOINTS_SPEAR] = 0
        $scope.settings[SETTINGS.BASHPOINTS_SWORD] = 0
        $scope.settings[SETTINGS.BASHPOINTS_AXE] = 0
        $scope.settings[SETTINGS.BASHPOINTS_ARCHER] = 0
        $scope.settings[SETTINGS.BASHPOINTS_RAM] = 0
        $scope.settings[SETTINGS.BASHPOINTS_CATAPULT] = 0
        $scope.settings[SETTINGS.BASHPOINTS_SNOB] = 0
        $scope.settings[SETTINGS.BASHPOINTS_KNIGHT] = 0
        $scope.settings[SETTINGS.BASHPOINTS_TREBUCHET] = 0
        $scope.settings[SETTINGS.BASHPOINTS_DOPPELSOLDNER] = 0
        $scope.settings[SETTINGS.BASHPOINTS_LC] = 0
        $scope.settings[SETTINGS.BASHPOINTS_MA] = 0
        $scope.settings[SETTINGS.BASHPOINTS_HC] = 0
        settings.setAll(settings.decode($scope.settings))
    }
    const clearBattle = function() {
        $scope.spearDamount = 0
        $scope.spearDlosses = 0
        $scope.spearDrevived = 0
        $scope.spearDsurvived = 0
        $scope.swordDamount = 0
        $scope.swordDlosses = 0
        $scope.swordDrevived = 0
        $scope.swordDsurvived = 0
        $scope.axeDamount = 0
        $scope.axeDlosses = 0
        $scope.axeDrevived = 0
        $scope.axeDsurvived = 0
        $scope.archerDamount = 0
        $scope.archerDlosses = 0
        $scope.archerDrevived = 0
        $scope.archerDsurvived = 0
        $scope.snobDamount = 0
        $scope.snobDlosses = 0
        $scope.snobDrevived = 0
        $scope.snobDsurvived = 0
        $scope.knightDamount = 0
        $scope.knightDlosses = 0
        $scope.knightDrevived = 0
        $scope.knightDsurvived = 0
        $scope.ramDamount = 0
        $scope.ramDlosses = 0
        $scope.ramDrevived = 0
        $scope.ramDsurvived = 0
        $scope.catapultDamount = 0
        $scope.catapultDlosses = 0
        $scope.catapultDrevived = 0
        $scope.catapultDsurvived = 0
        $scope.trebuchetDamount = 0
        $scope.trebuchetDlosses = 0
        $scope.trebuchetDrevived = 0
        $scope.trebuchetDsurvived = 0
        $scope.lcDamount = 0
        $scope.lcDlosses = 0
        $scope.lcDrevived = 0
        $scope.lcDsurvived = 0
        $scope.maDamount = 0
        $scope.maDlosses = 0
        $scope.maDrevived = 0
        $scope.maDsurvived = 0
        $scope.hcDamount = 0
        $scope.hcDlosses = 0
        $scope.hcDrevived = 0
        $scope.hcDsurvived = 0
        $scope.berserkerDamount = 0
        $scope.berserkerDlosses = 0
        $scope.berserkerDrevived = 0
        $scope.berserkerDsurvived = 0
        $scope.spearAamount = 0
        $scope.spearAlosses = 0
        $scope.spearArevived = 0
        $scope.spearAsurvived = 0
        $scope.swordAamount = 0
        $scope.swordAlosses = 0
        $scope.swordArevived = 0
        $scope.swordAsurvived = 0
        $scope.axeAamount = 0
        $scope.axeAlosses = 0
        $scope.axeArevived = 0
        $scope.axeAsurvived = 0
        $scope.archerAamount = 0
        $scope.archerAlosses = 0
        $scope.archerArevived = 0
        $scope.archerAsurvived = 0
        $scope.snobAamount = 0
        $scope.snobAlosses = 0
        $scope.snobArevived = 0
        $scope.snobAsurvived = 0
        $scope.knightAamount = 0
        $scope.knightAlosses = 0
        $scope.knightArevived = 0
        $scope.knightAsurvived = 0
        $scope.ramAamount = 0
        $scope.ramAlosses = 0
        $scope.ramArevived = 0
        $scope.ramAsurvived = 0
        $scope.catapultAamount = 0
        $scope.catapultAlosses = 0
        $scope.catapultArevived = 0
        $scope.catapultAsurvived = 0
        $scope.trebuchetAamount = 0
        $scope.trebuchetAlosses = 0
        $scope.trebuchetArevived = 0
        $scope.trebuchetAsurvived = 0
        $scope.lcAamount = 0
        $scope.lcAlosses = 0
        $scope.lcArevived = 0
        $scope.lcAsurvived = 0
        $scope.maAamount = 0
        $scope.maAlosses = 0
        $scope.maArevived = 0
        $scope.maAsurvived = 0
        $scope.hcAamount = 0
        $scope.hcAlosses = 0
        $scope.hcArevived = 0
        $scope.hcAsurvived = 0
        $scope.berserkerAamount = 0
        $scope.berserkerAlosses = 0
        $scope.berserkerArevived = 0
        $scope.berserkerAsurvived = 0
        $scope.availableBeds = 0
        $scope.target = 'Mur'
        $scope.buildingfrom = 0
        $scope.buildingto = 0
        $scope.wallfrom = 0
        $scope.wallto = 0
        $scope.wallfrompre = 0
        $scope.walltopre = 0
        $scope.defenceModifier = 0
        $scope.defenceProvisions = 0
        $scope.strentghDefend = 0
        $scope.defenceBashpoint = 0
        $scope.defenceKilledProvisions = 0
        $scope.strongestTypeDef = 0
        $scope.killrateD = 0
        $scope.defenceSurvivedProvisions = 0
        $scope.attackModifier = 0
        $scope.attackProvisions = 0
        $scope.strentghAttack = 0
        $scope.attackBashpoint = 0
        $scope.attackKilledProvisions = 0
        $scope.strongestTypeOff = 0
        $scope.killrateA = 0
        $scope.attackSurvivedProvisions = 0
        $scope.doubleStrength = 0
        $scope.settings[SETTINGS.BATTLE_SPEAR_D] = 0
        $scope.settings[SETTINGS.BATTLE_SWORD_D] = 0
        $scope.settings[SETTINGS.BATTLE_AXE_D] = 0
        $scope.settings[SETTINGS.BATTLE_ARCHER_D] = 0
        $scope.settings[SETTINGS.BATTLE_RAM_D] = 0
        $scope.settings[SETTINGS.BATTLE_CATAPULT_D] = 0
        $scope.settings[SETTINGS.BATTLE_SNOB_D] = 0
        $scope.settings[SETTINGS.BATTLE_KNIGHT_D] = 0
        $scope.settings[SETTINGS.BATTLE_TREBUCHET_D] = 0
        $scope.settings[SETTINGS.BATTLE_DOPPELSOLDNER_D] = 0
        $scope.settings[SETTINGS.BATTLE_LC_D] = 0
        $scope.settings[SETTINGS.BATTLE_MA_D] = 0
        $scope.settings[SETTINGS.BATTLE_HC_D] = 0
        $scope.settings[SETTINGS.BATTLE_SPEAR_A] = 0
        $scope.settings[SETTINGS.BATTLE_SWORD_A] = 0
        $scope.settings[SETTINGS.BATTLE_AXE_A] = 0
        $scope.settings[SETTINGS.BATTLE_ARCHER_A] = 0
        $scope.settings[SETTINGS.BATTLE_RAM_A] = 0
        $scope.settings[SETTINGS.BATTLE_CATAPULT_A] = 0
        $scope.settings[SETTINGS.BATTLE_SNOB_A] = 0
        $scope.settings[SETTINGS.BATTLE_KNIGHT_A] = 0
        $scope.settings[SETTINGS.BATTLE_TREBUCHET_A] = 0
        $scope.settings[SETTINGS.BATTLE_DOPPELSOLDNER_A] = 0
        $scope.settings[SETTINGS.BATTLE_LC_A] = 0
        $scope.settings[SETTINGS.BATTLE_MA_A] = 0
        $scope.settings[SETTINGS.BATTLE_HC_A] = 0
        $scope.settings[SETTINGS.BATTLE_MORALE] = 100
        $scope.settings[SETTINGS.BATTLE_LUCK] = 0
        $scope.settings[SETTINGS.BATTLE_TARGET_LEVEL] = 0
        $scope.settings[SETTINGS.BATTLE_WALL] = 'level_20'
        $scope.settings[SETTINGS.BATTLE_CHURCH_A] = 'level_1'
        $scope.settings[SETTINGS.BATTLE_CHURCH_D] = 'level_1'
        $scope.settings[SETTINGS.BATTLE_KNIGHT_ITEM_D1] = false
        $scope.settings[SETTINGS.BATTLE_KNIGHT_ITEM_D2] = false
        $scope.settings[SETTINGS.BATTLE_KNIGHT_ITEM_D3] = false
        $scope.settings[SETTINGS.BATTLE_KNIGHT_ITEM_A] = false
        $scope.settings[SETTINGS.BATTLE_ITEM_LEVEL_D1] = false
        $scope.settings[SETTINGS.BATTLE_ITEM_LEVEL_D2] = false
        $scope.settings[SETTINGS.BATTLE_ITEM_LEVEL_D3] = false
        $scope.settings[SETTINGS.BATTLE_ITEM_LEVEL_A] = false
        $scope.settings[SETTINGS.BATTLE_NIGHT_BONUS] = false
        $scope.settings[SETTINGS.BATTLE_OFFICER_LEADER] = false
        $scope.settings[SETTINGS.BATTLE_OFFICER_MEDIC] = false
        $scope.settings[SETTINGS.BATTLE_SKILL_MEDIC] = false
        $scope.settings[SETTINGS.BATTLE_SKILL_WEAPON_MASTER] = false
        $scope.settings[SETTINGS.BATTLE_SKILL_IRON_WALLS] = false
        $scope.settings[SETTINGS.BATTLE_SKILL_CLINIQUE] = false
        $scope.settings[SETTINGS.BATTLE_HOSPITAL] = false
        $scope.settings[SETTINGS.BATTLE_CATAPULT_TARGET] = false
        settings.setAll(settings.decode($scope.settings))
    }
    const clearTroops = function() {
        $scope.woodTotal = 0
        $scope.speedTotal = 0
        $scope.attackTotal = 0
        $scope.clayTotal = 0
        $scope.disciplineTotal = 0
        $scope.definfTotal = 0
        $scope.ironTotal = 0
        $scope.loadTotal = 0
        $scope.defcavTotal = 0
        $scope.foodTotal = 0
        $scope.buildtimeTotal = 0
        $scope.defarcTotal = 0
        $scope.attackinfTotal = 0
        $scope.attackcavTotal = 0
        $scope.attackarcTotal = 0
        $scope.settings[SETTINGS.TROOPS_SPEAR] = 0
        $scope.settings[SETTINGS.TROOPS_SWORD] = 0
        $scope.settings[SETTINGS.TROOPS_AXE] = 0
        $scope.settings[SETTINGS.TROOPS_ARCHER] = 0
        $scope.settings[SETTINGS.TROOPS_RAM] = 0
        $scope.settings[SETTINGS.TROOPS_CATAPULT] = 0
        $scope.settings[SETTINGS.TROOPS_SNOB] = 0
        $scope.settings[SETTINGS.TROOPS_KNIGHT] = 0
        $scope.settings[SETTINGS.TROOPS_TREBUCHET] = 0
        $scope.settings[SETTINGS.TROOPS_DOPPELSOLDNER] = 0
        $scope.settings[SETTINGS.TROOPS_LC] = 0
        $scope.settings[SETTINGS.TROOPS_MA] = 0
        $scope.settings[SETTINGS.TROOPS_HC] = 0
        $scope.settings[SETTINGS.TROOPS_BARRACKS] = 25
        $scope.settings[SETTINGS.TROOPS_PRECEPTORY] = 10
        $scope.settings[SETTINGS.TROOPS_ORDER] = false
        $scope.settings[SETTINGS.TROOPS_DOMINATION] = false
        $scope.settings[SETTINGS.TROOPS_TRAINING] = false
        settings.setAll(settings.decode($scope.settings))
    }
    const showBattleScore = function() {
        settings.setAll(settings.decode($scope.settings))
        battleCalculator.simulate()
        let target = battleCalculator.getTarget()
        let buildingfrom = battleCalculator.getBuildingfrom()
        let buildingto = battleCalculator.getBuildingto()
        let wallfrom = battleCalculator.getWallfrom()
        let wallto = battleCalculator.getWallto()
        let wallfrompre = battleCalculator.getWallfrompre()
        let walltopre = battleCalculator.getWalltopre()
        let defenceModifier = battleCalculator.getDefencemodifier() * 100
        let defenceProvisions = battleCalculator.getDefenceprovisions()
        let strentghDefend = battleCalculator.getStrentghdefend()
        let defenceBashpoint = -battleCalculator.getDefencebashpoint()
        let defenceKilledProvisions = -battleCalculator.getDefencekilledprovisions()
        let strongestTypeDef = battleCalculator.getStrongesttypedef()
        let killrateD = battleCalculator.getKillrated() * 100
        let defenceSurvivedProvisions = battleCalculator.getDefencesurvivedprovisions()
        let availableBeds = battleCalculator.getAvailablebeds()
        let attackModifier = battleCalculator.getAttackmodifier() * 100
        let attackProvisions = battleCalculator.getAttackprovisions()
        let strentghAttack = battleCalculator.getStrentghattack()
        let attackBashpoint = -battleCalculator.getAttackbashpoint()
        let attackKilledProvisions = -battleCalculator.getAttackkilledprovisions()
        let strongestTypeOff = battleCalculator.getStrongesttypeoff()
        let killrateA = battleCalculator.getKillratea() * 100
        let attackSurvivedProvisions = battleCalculator.getAttacksurvivedprovisions()
        let doubleStrength = battleCalculator.getDoublestrength()
        let spearDamount = battleCalculator.getSpeardAmount()
        let spearDlosses = -battleCalculator.getSpeardLosses()
        let spearDrevived = battleCalculator.getSpeardRevived()
        let spearDsurvived = battleCalculator.getSpeardSurvived()
        let swordDamount = battleCalculator.getSworddAmount()
        let swordDlosses = -battleCalculator.getSworddLosses()
        let swordDrevived = battleCalculator.getSworddRevived()
        let swordDsurvived = battleCalculator.getSworddSurvived()
        let axeDamount = battleCalculator.getAxedAmount()
        let axeDlosses = -battleCalculator.getAxedLosses()
        let axeDrevived = battleCalculator.getAxedRevived()
        let axeDsurvived = battleCalculator.getAxedSurvived()
        let archerDamount = battleCalculator.getArcherdAmount()
        let archerDlosses = -battleCalculator.getArcherdLosses()
        let archerDrevived = battleCalculator.getArcherdRevived()
        let archerDsurvived = battleCalculator.getArcherdSurvived()
        let snobDamount = battleCalculator.getSnobdAmount()
        let snobDlosses = -battleCalculator.getSnobdLosses()
        let snobDrevived = 0
        let snobDsurvived = battleCalculator.getSnobdSurvived()
        let knightDamount = battleCalculator.getKnightdAmount()
        let knightDlosses = -battleCalculator.getKnightdLosses()
        let knightDrevived = 0
        let knightDsurvived = battleCalculator.getKnightdSurvived()
        let ramDamount = battleCalculator.getRamdAmount()
        let ramDlosses = -battleCalculator.getRamdLosses()
        let ramDrevived = 0
        let ramDsurvived = battleCalculator.getRamdSurvived()
        let catapultDamount = battleCalculator.getCatapultdAmount()
        let catapultDlosses = -battleCalculator.getCatapultdLosses()
        let catapultDrevived = 0
        let catapultDsurvived = battleCalculator.getCatapultdSurvived()
        let trebuchetDamount = battleCalculator.getTrebuchetdAmount()
        let trebuchetDlosses = -battleCalculator.getTrebuchetdLosses()
        let trebuchetDrevived = 0
        let trebuchetDsurvived = battleCalculator.getTrebuchetdSurvived()
        let lcDamount = battleCalculator.getLcdAmount()
        let lcDlosses = -battleCalculator.getLcdLosses()
        let lcDrevived = battleCalculator.getLcdRevived()
        let lcDsurvived = battleCalculator.getLcdSurvived()
        let maDamount = battleCalculator.getMadAmount()
        let maDlosses = -battleCalculator.getMadLosses()
        let maDrevived = battleCalculator.getMadRevived()
        let maDsurvived = battleCalculator.getMadSurvived()
        let hcDamount = battleCalculator.getHcdAmount()
        let hcDlosses = -battleCalculator.getHcdLosses()
        let hcDrevived = battleCalculator.getHcdRevived()
        let hcDsurvived = battleCalculator.getHcdSurvived()
        let berserkerDamount = battleCalculator.getBerserkerdAmount()
        let berserkerDlosses = -battleCalculator.getBerserkerdLosses()
        let berserkerDrevived = 0
        let berserkerDsurvived = battleCalculator.getBerserkerdSurvived()
        let spearAamount = battleCalculator.getSpearaAmount()
        let spearAlosses = -battleCalculator.getSpearaLosses()
        let spearArevived = -battleCalculator.getSpearaRevived()
        let spearAsurvived = battleCalculator.getSpearaSurvived()
        let swordAamount = battleCalculator.getSwordaAmount()
        let swordAlosses = -battleCalculator.getSwordaLosses()
        let swordArevived = -battleCalculator.getSwordaRevived()
        let swordAsurvived = battleCalculator.getSwordaSurvived()
        let axeAamount = battleCalculator.getAxeaAmount()
        let axeAlosses = -battleCalculator.getAxeaLosses()
        let axeArevived = -battleCalculator.getAxeaRevived()
        let axeAsurvived = battleCalculator.getAxeaSurvived()
        let archerAamount = battleCalculator.getArcheraAmount()
        let archerAlosses = -battleCalculator.getArcheraLosses()
        let archerArevived = -battleCalculator.getArcheraRevived()
        let archerAsurvived = battleCalculator.getArcheraSurvived()
        let snobAamount = battleCalculator.getSnobaAmount()
        let snobAlosses = -battleCalculator.getSnobaLosses()
        let snobArevived = -battleCalculator.getSnobaRevived()
        let snobAsurvived = battleCalculator.getSnobaSurvived()
        let knightAamount = battleCalculator.getKnightaAmount()
        let knightAlosses = -battleCalculator.getKnightaLosses()
        let knightArevived = -battleCalculator.getKnightaRevived()
        let knightAsurvived = battleCalculator.getKnightaSurvived()
        let ramAamount = battleCalculator.getRamaAmount()
        let ramAlosses = -battleCalculator.getRamaLosses()
        let ramArevived = -battleCalculator.getRamaRevived()
        let ramAsurvived = battleCalculator.getRamaSurvived()
        let catapultAamount = battleCalculator.getCatapultaAmount()
        let catapultAlosses = -battleCalculator.getCatapultaLosses()
        let catapultArevived = -battleCalculator.getCatapultaRevived()
        let catapultAsurvived = battleCalculator.getCatapultaSurvived()
        let trebuchetAamount = battleCalculator.getTrebuchetaAmount()
        let trebuchetAlosses = -battleCalculator.getTrebuchetaLosses()
        let trebuchetArevived = -battleCalculator.getTrebuchetaRevived()
        let trebuchetAsurvived = battleCalculator.getTrebuchetaSurvived()
        let lcAamount = battleCalculator.getLcaAmount()
        let lcAlosses = -battleCalculator.getLcaLosses()
        let lcArevived = -battleCalculator.getLcaRevived()
        let lcAsurvived = battleCalculator.getLcaSurvived()
        let maAamount = battleCalculator.getMaaAmount()
        let maAlosses = -battleCalculator.getMaaLosses()
        let maArevived = -battleCalculator.getMaaRevived()
        let maAsurvived = battleCalculator.getMaaSurvived()
        let hcAamount = battleCalculator.getHcaAmount()
        let hcAlosses = -battleCalculator.getHcaLosses()
        let hcArevived = -battleCalculator.getHcaRevived()
        let hcAsurvived = battleCalculator.getHcaSurvived()
        let berserkerAamount = battleCalculator.getBerserkeraAmount()
        let berserkerAlosses = -battleCalculator.getBerserkeraLosses()
        let berserkerArevived = -battleCalculator.getBerserkeraRevived()
        let berserkerAsurvived = battleCalculator.getBerserkeraSurvived()
        $scope.spearDamount = spearDamount
        $scope.spearDlosses = spearDlosses
        $scope.spearDrevived = spearDrevived
        $scope.spearDsurvived = spearDsurvived
        $scope.swordDamount = swordDamount
        $scope.swordDlosses = swordDlosses
        $scope.swordDrevived = swordDrevived
        $scope.swordDsurvived = swordDsurvived
        $scope.axeDamount = axeDamount
        $scope.axeDlosses = axeDlosses
        $scope.axeDrevived = axeDrevived
        $scope.axeDsurvived = axeDsurvived
        $scope.archerDamount = archerDamount
        $scope.archerDlosses = archerDlosses
        $scope.archerDrevived = archerDrevived
        $scope.archerDsurvived = archerDsurvived
        $scope.snobDamount = snobDamount
        $scope.snobDlosses = snobDlosses
        $scope.snobDrevived = snobDrevived
        $scope.snobDsurvived = snobDsurvived
        $scope.knightDamount = knightDamount
        $scope.knightDlosses = knightDlosses
        $scope.knightDrevived = knightDrevived
        $scope.knightDsurvived = knightDsurvived
        $scope.ramDamount = ramDamount
        $scope.ramDlosses = ramDlosses
        $scope.ramDrevived = ramDrevived
        $scope.ramDsurvived = ramDsurvived
        $scope.catapultDamount = catapultDamount
        $scope.catapultDlosses = catapultDlosses
        $scope.catapultDrevived = catapultDrevived
        $scope.catapultDsurvived = catapultDsurvived
        $scope.trebuchetDamount = trebuchetDamount
        $scope.trebuchetDlosses = trebuchetDlosses
        $scope.trebuchetDrevived = trebuchetDrevived
        $scope.trebuchetDsurvived = trebuchetDsurvived
        $scope.lcDamount = lcDamount
        $scope.lcDlosses = lcDlosses
        $scope.lcDrevived = lcDrevived
        $scope.lcDsurvived = lcDsurvived
        $scope.maDamount = maDamount
        $scope.maDlosses = maDlosses
        $scope.maDrevived = maDrevived
        $scope.maDsurvived = maDsurvived
        $scope.hcDamount = hcDamount
        $scope.hcDlosses = hcDlosses
        $scope.hcDrevived = hcDrevived
        $scope.hcDsurvived = hcDsurvived
        $scope.berserkerDamount = berserkerDamount
        $scope.berserkerDlosses = berserkerDlosses
        $scope.berserkerDrevived = berserkerDrevived
        $scope.berserkerDsurvived = berserkerDsurvived
        $scope.spearAamount = spearAamount
        $scope.spearAlosses = spearAlosses
        $scope.spearArevived = spearArevived
        $scope.spearAsurvived = spearAsurvived
        $scope.swordAamount = swordAamount
        $scope.swordAlosses = swordAlosses
        $scope.swordArevived = swordArevived
        $scope.swordAsurvived = swordAsurvived
        $scope.axeAamount = axeAamount
        $scope.axeAlosses = axeAlosses
        $scope.axeArevived = axeArevived
        $scope.axeAsurvived = axeAsurvived
        $scope.archerAamount = archerAamount
        $scope.archerAlosses = archerAlosses
        $scope.archerArevived = archerArevived
        $scope.archerAsurvived = archerAsurvived
        $scope.snobAamount = snobAamount
        $scope.snobAlosses = snobAlosses
        $scope.snobArevived = snobArevived
        $scope.snobAsurvived = snobAsurvived
        $scope.knightAamount = knightAamount
        $scope.knightAlosses = knightAlosses
        $scope.knightArevived = knightArevived
        $scope.knightAsurvived = knightAsurvived
        $scope.ramAamount = ramAamount
        $scope.ramAlosses = ramAlosses
        $scope.ramArevived = ramArevived
        $scope.ramAsurvived = ramAsurvived
        $scope.catapultAamount = catapultAamount
        $scope.catapultAlosses = catapultAlosses
        $scope.catapultArevived = catapultArevived
        $scope.catapultAsurvived = catapultAsurvived
        $scope.trebuchetAamount = trebuchetAamount
        $scope.trebuchetAlosses = trebuchetAlosses
        $scope.trebuchetArevived = trebuchetArevived
        $scope.trebuchetAsurvived = trebuchetAsurvived
        $scope.lcAamount = lcAamount
        $scope.lcAlosses = lcAlosses
        $scope.lcArevived = lcArevived
        $scope.lcAsurvived = lcAsurvived
        $scope.maAamount = maAamount
        $scope.maAlosses = maAlosses
        $scope.maArevived = maArevived
        $scope.maAsurvived = maAsurvived
        $scope.hcAamount = hcAamount
        $scope.hcAlosses = hcAlosses
        $scope.hcArevived = hcArevived
        $scope.hcAsurvived = hcAsurvived
        $scope.berserkerAamount = berserkerAamount
        $scope.berserkerAlosses = berserkerAlosses
        $scope.berserkerArevived = berserkerArevived
        $scope.berserkerAsurvived = berserkerAsurvived
        $scope.availableBeds = availableBeds
        $scope.target = target
        $scope.buildingfrom = buildingfrom
        $scope.buildingto = buildingto
        $scope.wallfrom = wallfrom
        $scope.wallto = wallto
        $scope.wallfrompre = wallfrompre
        $scope.walltopre = walltopre
        $scope.defenceModifier = defenceModifier
        $scope.defenceProvisions = defenceProvisions
        $scope.strentghDefend = strentghDefend
        $scope.defenceBashpoint = defenceBashpoint
        $scope.defenceKilledProvisions = defenceKilledProvisions
        $scope.strongestTypeDef = strongestTypeDef
        $scope.killrateD = killrateD
        $scope.defenceSurvivedProvisions = defenceSurvivedProvisions
        $scope.attackModifier = attackModifier
        $scope.attackProvisions = attackProvisions
        $scope.strentghAttack = strentghAttack
        $scope.attackBashpoint = attackBashpoint
        $scope.attackKilledProvisions = attackKilledProvisions
        $scope.strongestTypeOff = strongestTypeOff
        $scope.killrateA = killrateA
        $scope.attackSurvivedProvisions = attackSurvivedProvisions
        $scope.doubleStrength = doubleStrength
    }
    const showTroops = function() {
        settings.setAll(settings.decode($scope.settings))
        battleCalculator.calculateT()
        let troopsWood = battleCalculator.getWoodAmount()
        let troopsClay = battleCalculator.getClayAmount()
        let troopsIron = battleCalculator.getIronAmount()
        let troopsLoad = battleCalculator.getLoadAmount()
        let troopsFood = battleCalculator.getFoodAmount()
        let troopsDI = battleCalculator.getDefInf()
        let troopsDC = battleCalculator.getDefCav()
        let troopsDA = battleCalculator.getDefArc()
        let troopsAI = battleCalculator.getAttInf()
        let troopsAC = battleCalculator.getAttCav()
        let troopsAA = battleCalculator.getAttArc()
        let troopsSpeed = battleCalculator.getSpeed()
        let troopsBuild = battleCalculator.getBuildTime()
        let troopsDiscipline = battleCalculator.getDiscipline()
        let troopsPower = battleCalculator.getPower()
        if (troopsWood) {
            $scope.woodTotal = troopsWood
            $scope.speedTotal = troopsSpeed
            $scope.attackTotal = troopsPower
            $scope.clayTotal = troopsClay
            $scope.disciplineTotal = troopsDiscipline
            $scope.definfTotal = troopsDI
            $scope.ironTotal = troopsIron
            $scope.loadTotal = troopsLoad
            $scope.defcavTotal = troopsDC
            $scope.foodTotal = troopsFood
            $scope.buildtimeTotal = troopsBuild
            $scope.defarcTotal = troopsDA
            $scope.attackinfTotal = troopsAI
            $scope.attackcavTotal = troopsAC
            $scope.attackarcTotal = troopsAA
        }
    }
    const eventHandlers = {
        updatePresets: function() {
            $scope.presets = Settings.encodeList(presetList.getPresets(), {
                disabled: false,
                type: 'presets'
            })
        },
        autoCompleteSelected: function(event, id, data, type) {
            if (id !== 'battlecalculator_village_search') {
                return false
            }
            battleVillage[type] = {
                id: data.raw.id,
                x: data.raw.x,
                y: data.raw.y,
                name: data.raw.name
            }
            $scope.settings[SETTINGS.BATTLE_VILLAGE_ID] = battleVillage.id
            $scope.searchQuery[type] = ''
            settings.setAll(settings.decode($scope.settings))
        },
        onAutoCompleteVillage: function(data) {
            battleVillage.origin = {
                id: data.id,
                x: data.x,
                y: data.y,
                name: data.name
            }
            $scope.settings[SETTINGS.BATTLE_VILLAGE_ID] = data.id
            settings.setAll(settings.decode($scope.settings))
        },
        start: function() {
            $scope.running = true
            $button.classList.remove('btn-orange')
            $button.classList.add('btn-red')
            utils.notif('success', 'battleCalculator started')
        },
        stop: function() {
            $scope.running = false
            $button.classList.remove('btn-red')
            $button.classList.add('btn-orange')
            utils.notif('success', 'battleCalculator stopped')
        }
    }
    const init = function() {
        settings = battleCalculator.getSettings()
        battleVillage = {
            origin: false
        }
        $button = interfaceOverflow.addMenuButton4('Kalkulator', 10, $filter('i18n')('description', $rootScope.loc.ale, 'battle_calculator'))
        $button.addEventListener('click', buildWindow)
        $rootScope.$on(eventTypeProvider.SHOW_CONTEXT_MENU, setMapSelectedVillage)
        $rootScope.$on(eventTypeProvider.DESTROY_CONTEXT_MENU, unsetMapSelectedVillage)
        interfaceOverflow.addTemplate('twoverflow_battle_calculator_window', `___battle_calculator_html_main`)
        interfaceOverflow.addStyle('___battle_calculator_css_style')
    }
    const buildWindow = function() {
        $scope = $rootScope.$new()
        $scope.SETTINGS = SETTINGS
        $scope.TAB_TYPES = TAB_TYPES
        $scope.running = battleCalculator.isRunning()
        $scope.selectedTab = TAB_TYPES.BATTLE
        $scope.settingsMap = SETTINGS_MAP
        $scope.autoCompleteVillage = {
            type: ['village'],
            placeholder: $filter('i18n')('battle.add_village_search', $rootScope.loc.ale, 'battle_calculator'),
            onEnter: eventHandlers.onAutoCompleteVillage,
            tooltip: $filter('i18n')('battle.add_origin', $rootScope.loc.ale, 'battle_calculator'),
            dropDown: true
        }
        $scope.catapulttarget = Settings.encodeList(B_CAT_TARGET, {
            textObject: 'battle_calculator',
            disabled: true
        })
        $scope.knightitem = Settings.encodeList(B_ITEMS, {
            textObject: 'battle_calculator',
            disabled: true
        })
        $scope.itemlevel = Settings.encodeList(B_ITEMS_LEVELS, {
            textObject: 'battle_calculator',
            disabled: true
        })
        $scope.order = Settings.encodeList(T_ORDER_TYPE, {
            textObject: 'battle_calculator',
            disabled: true
        })
        $scope.wall = Settings.encodeList(B_WALLS, {
            textObject: 'battle_calculator'
        })
        $scope.church = Settings.encodeList(B_CHURCHES, {
            textObject: 'battle_calculator'
        })
        $scope.weaponmaster = Settings.encodeList(B_SKILL_WEAPON_MASTER_LEVEL, {
            textObject: 'battle_calculator',
            disabled: true
        })
        $scope.ironwalls = Settings.encodeList(B_SKILL_IRON_WALLS_LEVEL, {
            textObject: 'battle_calculator',
            disabled: true
        })
        $scope.clinique = Settings.encodeList(B_SKILL_CLINIQUE_LEVEL, {
            textObject: 'battle_calculator',
            disabled: true
        })
        $scope.hospital = Settings.encodeList(B_HOSPITAL_LEVEL, {
            textObject: 'battle_calculator',
            disabled: true
        })
        $scope.training = Settings.encodeList(T_TRAINING_LEVEL, {
            textObject: 'battle_calculator',
            disabled: true
        })
        settings.injectScope($scope)
        eventHandlers.updatePresets()
        $scope.selectTab = selectTab
        $scope.battleVillage = battleVillage
        $scope.insertSurvived = insertSurvived
        $scope.insertPA = insertPresetAttacker
        $scope.insertPD = insertPresetDefender
        $scope.insertVA = insertVillageAttacker
        $scope.insertVD = insertVillageDefender
        $scope.calculateB = showBashpoints
        $scope.clearB = clearBashpoints
        $scope.totalDef = 0
        $scope.totalAtt = 0
        $scope.calculateT = showTroops
        $scope.clearT = clearTroops
        $scope.woodTotal = 0
        $scope.speedTotal = 0
        $scope.attackTotal = 0
        $scope.clayTotal = 0
        $scope.disciplineTotal = 0
        $scope.definfTotal = 0
        $scope.ironTotal = 0
        $scope.loadTotal = 0
        $scope.defcavTotal = 0
        $scope.foodTotal = 0
        $scope.buildtimeTotal = 0
        $scope.defarcTotal = 0
        $scope.attackinfTotal = 0
        $scope.attackcavTotal = 0
        $scope.attackarcTotal = 0
        $scope.simulate = showBattleScore
        $scope.clear = clearBattle
        $scope.target = 0
        $scope.buildingfrom = 0
        $scope.buildingto = 0
        $scope.wallfrom = 0
        $scope.wallto = 0
        $scope.wallfrompre = 0
        $scope.walltopre = 0
        $scope.defenceModifier = 0
        $scope.defenceProvisions = 0
        $scope.strentghDefend = 0
        $scope.defenceBashpoint = 0
        $scope.defenceKilledProvisions = 0
        $scope.strongestTypeDef = 0
        $scope.killrateD = 0
        $scope.defenceSurvivedProvisions = 0
        $scope.availableBeds = 0
        $scope.attackModifier = 0
        $scope.attackProvisions = 0
        $scope.strentghAttack = 0
        $scope.attackBashpoint = 0
        $scope.attackKilledProvisions = 0
        $scope.strongestTypeOff = 0
        $scope.killrateA = 0
        $scope.attackSurvivedProvisions = 0
        $scope.doubleStrength = 0
        $scope.spearDamount = 0
        $scope.spearDlosses = 0
        $scope.spearDrevived = 0
        $scope.spearDsurvived = 0
        $scope.swordDamount = 0
        $scope.swordDlosses = 0
        $scope.swordDrevived = 0
        $scope.swordDsurvived = 0
        $scope.axeDamount = 0
        $scope.axeDlosses = 0
        $scope.axeDrevived = 0
        $scope.axeDsurvived = 0
        $scope.archerDamount = 0
        $scope.archerDlosses = 0
        $scope.archerDrevived = 0
        $scope.archerDsurvived = 0
        $scope.snobDamount = 0
        $scope.snobDlosses = 0
        $scope.snobDrevived = 0
        $scope.snobDsurvived = 0
        $scope.knightDamount = 0
        $scope.knightDlosses = 0
        $scope.knightDrevived = 0
        $scope.knightDsurvived = 0
        $scope.ramDamount = 0
        $scope.ramDlosses = 0
        $scope.ramDrevived = 0
        $scope.ramDsurvived = 0
        $scope.catapultDamount = 0
        $scope.catapultDlosses = 0
        $scope.catapultDrevived = 0
        $scope.catapultDsurvived = 0
        $scope.trebuchetDamount = 0
        $scope.trebuchetDlosses = 0
        $scope.trebuchetDrevived = 0
        $scope.trebuchetDsurvived = 0
        $scope.lcDamount = 0
        $scope.lcDlosses = 0
        $scope.lcDrevived = 0
        $scope.lcDsurvived = 0
        $scope.maDamount = 0
        $scope.maDlosses = 0
        $scope.maDrevived = 0
        $scope.maDsurvived = 0
        $scope.hcDamount = 0
        $scope.hcDlosses = 0
        $scope.hcDrevived = 0
        $scope.hcDsurvived = 0
        $scope.berserkerDamount = 0
        $scope.berserkerDlosses = 0
        $scope.berserkerDrevived = 0
        $scope.berserkerDsurvived = 0
        $scope.spearAamount = 0
        $scope.spearAlosses = 0
        $scope.spearArevived = 0
        $scope.spearAsurvived = 0
        $scope.swordAamount = 0
        $scope.swordAlosses = 0
        $scope.swordArevived = 0
        $scope.swordAsurvived = 0
        $scope.axeAamount = 0
        $scope.axeAlosses = 0
        $scope.axeArevived = 0
        $scope.axeAsurvived = 0
        $scope.archerAamount = 0
        $scope.archerAlosses = 0
        $scope.archerArevived = 0
        $scope.archerAsurvived = 0
        $scope.snobAamount = 0
        $scope.snobAlosses = 0
        $scope.snobArevived = 0
        $scope.snobAsurvived = 0
        $scope.knightAamount = 0
        $scope.knightAlosses = 0
        $scope.knightArevived = 0
        $scope.knightAsurvived = 0
        $scope.ramAamount = 0
        $scope.ramAlosses = 0
        $scope.ramArevived = 0
        $scope.ramAsurvived = 0
        $scope.catapultAamount = 0
        $scope.catapultAlosses = 0
        $scope.catapultArevived = 0
        $scope.catapultAsurvived = 0
        $scope.trebuchetAamount = 0
        $scope.trebuchetAlosses = 0
        $scope.trebuchetArevived = 0
        $scope.trebuchetAsurvived = 0
        $scope.lcAamount = 0
        $scope.lcAlosses = 0
        $scope.lcArevived = 0
        $scope.lcAsurvived = 0
        $scope.maAamount = 0
        $scope.maAlosses = 0
        $scope.maArevived = 0
        $scope.maAsurvived = 0
        $scope.hcAamount = 0
        $scope.hcAlosses = 0
        $scope.hcArevived = 0
        $scope.hcAsurvived = 0
        $scope.berserkerAamount = 0
        $scope.berserkerAlosses = 0
        $scope.berserkerArevived = 0
        $scope.berserkerAsurvived = 0
        $scope.switchState = switchState
        $scope.addMapSelected = addMapSelected
        let eventScope = new EventScope('twoverflow_battle_calculator_window', function onDestroy() {
            console.log('battleCalculator window closed')
        })
        eventScope.register(eventTypeProvider.SELECT_SELECTED, eventHandlers.autoCompleteSelected, true)
        eventScope.register(eventTypeProvider.ARMY_PRESET_UPDATE, eventHandlers.updatePresets, true)
        eventScope.register(eventTypeProvider.ARMY_PRESET_DELETED, eventHandlers.updatePresets, true)
        eventScope.register(eventTypeProvider.BATTLE_CALCULATOR_START, eventHandlers.start)
        eventScope.register(eventTypeProvider.BATTLE_CALCULATOR_STOP, eventHandlers.stop)
        windowManagerService.getScreenWithInjectedScope('!twoverflow_battle_calculator_window', $scope)
    }
    return init
})
define('two/battleCalculator/settings', [], function () {
    return {
        BATTLE_VILLAGE_ID: 'battle_village_id',
        BATTLE_SPEAR_D: 'battle_spear_d',
        BATTLE_SWORD_D: 'battle_sword_d',
        BATTLE_AXE_D: 'battle_axe_d',
        BATTLE_ARCHER_D: 'battle_archer_d',
        BATTLE_LC_D: 'battle_lc_d',
        BATTLE_MA_D: 'battle_ma_d',
        BATTLE_HC_D: 'battle_hc_d',
        BATTLE_RAM_D: 'battle_ram_d',
        BATTLE_CATAPULT_D: 'battle_catapult_d',
        BATTLE_DOPPELSOLDNER_D: 'battle_doppelsoldner_d',
        BATTLE_TREBUCHET_D: 'battle_trebuchet_d',
        BATTLE_SNOB_D: 'battle_snob_d',
        BATTLE_KNIGHT_D: 'battle_knight_d',
        BATTLE_SPEAR_A: 'battle_spear_a',
        BATTLE_SWORD_A: 'battle_sword_a',
        BATTLE_AXE_A: 'battle_axe_a',
        BATTLE_ARCHER_A: 'battle_archer_a',
        BATTLE_LC_A: 'battle_lc_a',
        BATTLE_MA_A: 'battle_ma_a',
        BATTLE_HC_A: 'battle_hc_a',
        BATTLE_RAM_A: 'battle_ram_a',
        BATTLE_CATAPULT_A: 'battle_catapult_a',
        BATTLE_DOPPELSOLDNER_A: 'battle_doppelsoldner_a',
        BATTLE_TREBUCHET_A: 'battle_trebuchet_a',
        BATTLE_SNOB_A: 'battle_snob_a',
        BATTLE_KNIGHT_A: 'battle_knight_a',
        BATTLE_CHURCH_A: 'battle_church_a',
        BATTLE_KNIGHT_ITEM_D1: 'battle_knight_item_d1',
        BATTLE_KNIGHT_ITEM_D2: 'battle_knight_item_d2',
        BATTLE_KNIGHT_ITEM_D3: 'battle_knight_item_d3',
        BATTLE_KNIGHT_ITEM_A: 'battle_knight_item_a',
        BATTLE_ITEM_LEVEL_D1: 'battle_item_level_d1',
        BATTLE_ITEM_LEVEL_D2: 'battle_item_level_d2',
        BATTLE_ITEM_LEVEL_D3: 'battle_item_level_d3',
        BATTLE_ITEM_LEVEL_A: 'battle_item_level_a',
        BATTLE_CATAPULT_TARGET: 'battle_catapult_target',
        BATTLE_TARGET_LEVEL: 'battle_target_level',
        BATTLE_CHURCH_D: 'battle_church_d',
        BATTLE_MORALE: 'battle_morale',
        BATTLE_LUCK: 'battle_luck',
        BATTLE_WALL: 'battle_wall',
        BATTLE_NIGHT_BONUS: 'battle_night_bonus',
        BATTLE_OFFICER_LEADER: 'battle_officer_leader',
        BATTLE_OFFICER_MEDIC: 'battle_officer_medic',
        BATTLE_SKILL_MEDIC: 'battle_skill_medic',
        BATTLE_SKILL_WEAPON_MASTER: 'battle_skill_weapon_master',
        BATTLE_SKILL_IRON_WALLS: 'battle_skill_iron_walls',
        BATTLE_SKILL_CLINIQUE: 'battle_skill_clinique',
        BATTLE_HOSPITAL: 'battle_hospital',
        TROOPS_BARRACKS: 'troops_barracks',
        TROOPS_PRECEPTORY: 'troops_preceptory',
        TROOPS_ORDER: 'troops_order',
        TROOPS_DOMINATION: 'troops_domination',
        TROOPS_TRAINING: 'troops_training',
        TROOPS_SPEAR: 'troops_spear',
        TROOPS_SWORD: 'troops_sword',
        TROOPS_AXE: 'troops_axe',
        TROOPS_ARCHER: 'troops_archer',
        TROOPS_LC: 'troops_lc',
        TROOPS_MA: 'troops_ma',
        TROOPS_HC: 'troops_hc',
        TROOPS_RAM: 'troops_ram',
        TROOPS_CATAPULT: 'troops_catapult',
        TROOPS_KNIGHT: 'troops_knight',
        TROOPS_SNOB: 'troops_snob',
        TROOPS_DOPPELSOLDNER: 'troops_doppelsoldner',
        TROOPS_TREBUCHET: 'troops_trebuchet',
        BASHPOINTS_SPEAR: 'bashpoints_spear',
        BASHPOINTS_SWORD: 'bashpoints_sword',
        BASHPOINTS_AXE: 'bashpoints_axe',
        BASHPOINTS_ARCHER: 'bashpoints_archer',
        BASHPOINTS_LC: 'bashpoints_lc',
        BASHPOINTS_MA: 'bashpoints_ma',
        BASHPOINTS_HC: 'bashpoints_hc',
        BASHPOINTS_RAM: 'bashpoints_ram',
        BASHPOINTS_CATAPULT: 'bashpoints_catapult',
        BASHPOINTS_KNIGHT: 'bashpoints_knight',
        BASHPOINTS_SNOB: 'bashpoints_snob',
        BASHPOINTS_DOPPELSOLDNER: 'bashpoints_doppelsoldner',
        BASHPOINTS_TREBUCHET: 'bashpoints_trebuchet',
        PRESET: 'preset'
    }
})

define('two/battleCalculator/settings/updates', function () {
    return {
        PRESETS: 'presets'
    }
})

define('two/battleCalculator/settings/map', [
    'two/battleCalculator/settings',
    'two/battleCalculator/settings/updates'
], function (
    SETTINGS,
    UPDATES
) {
    return {
        [SETTINGS.BATTLE_VILLAGE_ID]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_SPEAR_D]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_SWORD_D]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_AXE_D]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_ARCHER_D]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_LC_D]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_MA_D]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_HC_D]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_RAM_D]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_CATAPULT_D]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_SNOB_D]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_KNIGHT_D]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_TREBUCHET_D]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_DOPPELSOLDNER_D]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_SPEAR_A]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_SWORD_A]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_AXE_A]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_ARCHER_A]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_LC_A]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_MA_A]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_HC_A]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_RAM_A]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_CATAPULT_A]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_SNOB_A]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_KNIGHT_A]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_TREBUCHET_A]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_DOPPELSOLDNER_A]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.PRESET]: {
            default: [],
            updates: [
                UPDATES.PRESETS
            ],
            disabledOption: true,
            inputType: 'select',
            multiSelect: false,
            type: 'presets'
        },
        [SETTINGS.BATTLE_CATAPULT_TARGET]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.BATTLE_ITEM_LEVEL_D1]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.BATTLE_ITEM_LEVEL_D2]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.BATTLE_ITEM_LEVEL_D3]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.BATTLE_ITEM_LEVEL_A]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.BATTLE_KNIGHT_ITEM_D1]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.BATTLE_KNIGHT_ITEM_D2]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.BATTLE_KNIGHT_ITEM_D3]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.BATTLE_KNIGHT_ITEM_A]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.BATTLE_CHURCH_A]: {
            default: '1',
            inputType: 'select'
        },
        [SETTINGS.BATTLE_CHURCH_D]: {
            default: '1',
            inputType: 'select'
        },
        [SETTINGS.BATTLE_WALL]: {
            default: '20',
            inputType: 'select'
        },
        [SETTINGS.BATTLE_NIGHT_BONUS]: {
            default: false,
            inputType: 'checkbox'
        },
        [SETTINGS.BATTLE_OFFICER_LEADER]: {
            default: false,
            inputType: 'checkbox'
        },
        [SETTINGS.BATTLE_OFFICER_MEDIC]: {
            default: false,
            inputType: 'checkbox'
        },
        [SETTINGS.BATTLE_SKILL_MEDIC]: {
            default: false,
            inputType: 'checkbox'
        },
        [SETTINGS.BATTLE_SKILL_WEAPON_MASTER]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.BATTLE_SKILL_IRON_WALLS]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.BATTLE_SKILL_CLINIQUE]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.BATTLE_HOSPITAL]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.BATTLE_TARGET_LEVEL]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_LUCK]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BATTLE_MORALE]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BASHPOINTS_SPEAR]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BASHPOINTS_SWORD]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BASHPOINTS_AXE]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BASHPOINTS_ARCHER]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BASHPOINTS_LC]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BASHPOINTS_MA]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BASHPOINTS_HC]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BASHPOINTS_RAM]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BASHPOINTS_CATAPULT]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BASHPOINTS_SNOB]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BASHPOINTS_KNIGHT]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BASHPOINTS_TREBUCHET]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.BASHPOINTS_DOPPELSOLDNER]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.TROOPS_SPEAR]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.TROOPS_SWORD]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.TROOPS_AXE]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.TROOPS_ARCHER]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.TROOPS_LC]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.TROOPS_MA]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.TROOPS_HC]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.TROOPS_RAM]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.TROOPS_CATAPULT]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.TROOPS_SNOB]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.TROOPS_KNIGHT]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.TROOPS_TREBUCHET]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.TROOPS_DOPPELSOLDNER]: {
            default: 0,
            inputType: 'number'
        },
        [SETTINGS.TROOPS_PRECEPTORY]: {
            default: 10,
            inputType: 'number',
            min: 0,
            max: 10
        },
        [SETTINGS.TROOPS_BARRACKS]: {
            default: 25,
            inputType: 'number',
            min: 1,
            max: 25
        },
        [SETTINGS.TROOPS_ORDER]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.TROOPS_DOMINATION]: {
            default: false,
            inputType: 'checkbox'
        },
        [SETTINGS.TROOPS_TRAINING]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        }
    }
})
define('two/battleCalculator/types/item', [], function () {
    return {
        HALBERD_OF_GUAN_YU: 'battle.halberd',
        PARACELSUS_LONGSWORD: 'battle.longsword',
        THORGARDS_BATTLE_AXE: 'battle.battleaxe',
        NIMRODS_LONGBOW: 'battle.longbow',
        MIESZKOS_LANCE: 'battle.lance',
        NIMRODS_COMPOSITE_BOW: 'battle.compositebow',
        BAPTISTES_BANNER: 'battle.banner',
        CAROLS_MORNING_STAR: 'battle.star',
        ALETHEIAS_BONFIRE: 'battle.bonfire',
        VASCOS_SCEPTER: 'battle.scepter'
    }
})

define('two/battleCalculator/types/level', [], function () {
    return {
        LEVEL_1: 'level_1',
        LEVEL_2: 'level_2',
        LEVEL_3: 'level_3'
    }
})

define('two/battleCalculator/types/catapult-target', [], function () {
    return {
        HEADQUARTER: 'headquarter',
        WAREHOUSE: 'warehouse',
        FARM: 'farm',
        RALLY_POINT: 'rally_point',
        STATUE: 'statue',
        WALL: 'wall',
        TAVERN: 'tavern',
        BARRACKS: 'barracks',
        PRECEPTORY: 'preceptory',
        HOSPITAL: 'hospital',
        CLAY_PIT: 'clay_pit',
        IRON_MINE: 'iron_mine',
        TIMBER_CAMP: 'timber_camp',
        CHAPEL: 'chapel',
        CHURCH: 'church',
        MARKET: 'market',
        ACADEMY: 'academy'
    }
})

define('two/battleCalculator/types/order', [], function () {
    return {
        TEUTONIC_ORDER: 'troops.teutonic',
        TEMPLAR_ORDER: 'troops.templars'
    }
})

define('two/battleCalculator/types/church', [], function () {
    return {
        NO_CHURCH: 'without',
        LEVEL_1: 'level_1',
        LEVEL_2: 'level_2',
        LEVEL_3: 'level_3'
    }
})

define('two/battleCalculator/types/wall', [], function () {
    return {
        NO_WALL: 'without',
        LEVEL_1: 'level_1',
        LEVEL_2: 'level_2',
        LEVEL_3: 'level_3',
        LEVEL_4: 'level_4',
        LEVEL_5: 'level_5',
        LEVEL_6: 'level_6',
        LEVEL_7: 'level_7',
        LEVEL_8: 'level_8',
        LEVEL_9: 'level_9',
        LEVEL_10: 'level_10',
        LEVEL_11: 'level_11',
        LEVEL_12: 'level_12',
        LEVEL_13: 'level_13',
        LEVEL_14: 'level_14',
        LEVEL_15: 'level_15',
        LEVEL_16: 'level_16',
        LEVEL_17: 'level_17',
        LEVEL_18: 'level_18',
        LEVEL_19: 'level_19',
        LEVEL_20: 'level_20'
    }
})

define('two/battleCalculator/types/weapon-master', [], function () {
    return {
        LEVEL_1: 'level_1',
        LEVEL_2: 'level_2',
        LEVEL_3: 'level_3',
        LEVEL_4: 'level_4',
        LEVEL_5: 'level_5'
    }
})

define('two/battleCalculator/types/iron-walls', [], function () {
    return {
        LEVEL_1: 'level_1',
        LEVEL_2: 'level_2',
        LEVEL_3: 'level_3',
        LEVEL_4: 'level_4',
        LEVEL_5: 'level_5'
    }
})

define('two/battleCalculator/types/clinique', [], function () {
    return {
        LEVEL_1: 'level_1',
        LEVEL_2: 'level_2',
        LEVEL_3: 'level_3',
        LEVEL_4: 'level_4',
        LEVEL_5: 'level_5',
        LEVEL_6: 'level_6',
        LEVEL_7: 'level_7',
        LEVEL_8: 'level_8',
        LEVEL_9: 'level_9',
        LEVEL_10: 'level_10'
    }
})

define('two/battleCalculator/types/hospital', [], function () {
    return {
        LEVEL_1: 'level_1',
        LEVEL_2: 'level_2',
        LEVEL_3: 'level_3',
        LEVEL_4: 'level_4',
        LEVEL_5: 'level_5',
        LEVEL_6: 'level_6',
        LEVEL_7: 'level_7',
        LEVEL_8: 'level_8',
        LEVEL_9: 'level_9',
        LEVEL_10: 'level_10'
    }
})

define('two/battleCalculator/types/training', [], function () {
    return {
        LEVEL_1: 'level_1',
        LEVEL_2: 'level_2',
        LEVEL_3: 'level_3',
        LEVEL_4: 'level_4',
        LEVEL_5: 'level_5'
    }
})
require([
    'two/ready',
    'two/battleCalculator',
    'two/battleCalculator/ui',
    'two/battleCalculator/events'
], function (
    ready,
    battleCalculator,
    battleCalculatorInterface
) {
    if (battleCalculator.isInitialized()) {
        return false
    }

    ready(function () {
        battleCalculator.init()
        battleCalculatorInterface()
    }, ['map', 'presets'])
})

define('two/builderQueue', [
    'two/ready',
    'two/utils',
    'two/Settings',
    'two/builderQueue/settings',
    'two/builderQueue/settings/map',
    'two/builderQueue/settings/updates',
    'two/builderQueue/sequenceStatus',
    'conf/upgradeabilityStates',
    'conf/buildingTypes',
    'conf/locationTypes',
    'queues/EventQueue',
    'Lockr',
    'helper/time'
], function(
    ready,
    utils,
    Settings,
    SETTINGS,
    SETTINGS_MAP,
    UPDATES,
    SEQUENCE_STATUS,
    UPGRADEABILITY_STATES,
    BUILDING_TYPES,
    LOCATION_TYPES,
    eventQueue,
    Lockr,
    timeHelper
) {
    let buildingService = injector.get('buildingService')
    let premiumActionService = injector.get('premiumActionService')
    let buildingQueueService = injector.get('buildingQueueService')
    let initialized = false
    let running = false
    let intervalCheckId
    let intervalInstantCheckId
    let buildingSequenceLimit
    const ANALYSES_PER_MINUTE = 1
    const ANALYSES_PER_MINUTE_INSTANT_FINISH = 10
    const VILLAGE_BUILDINGS = {}
    const LOGS_LIMIT = 500
    let groupList
    let $player
    let logs
    let sequencesAvail = true
    let settings
    let builderSettings
    const STORAGE_KEYS = {
        LOGS: 'builder_queue_log',
        SETTINGS: 'builder_queue_settings'
    }
    const analyseVillages = function() {
        const villageIds = getVillageIds()
        if (!sequencesAvail) {
            builderQueue.stop()
            return false
        }
        villageIds.forEach(function(villageId) {
            const village = $player.getVillage(villageId)
            const readyState = village.checkReadyState()
            const queue = village.buildingQueue
            const jobs = queue.getAmountJobs()
            if (jobs === queue.getUnlockedSlots()) {
                return false
            }
            if (!readyState.buildingQueue || !readyState.buildings) {
                return false
            }
            analyseVillageBuildings(village)
        })
    }
    const analyseVillagesInstantFinish = function() {
        const villageIds = getVillageIds()
        villageIds.forEach(function(villageId) {
            const village = $player.getVillage(villageId)
            const queue = village.buildingQueue
            if (queue.getAmountJobs()) {
                const jobs = queue.getQueue()
                jobs.forEach(function(job) {
                    if (buildingQueueService.canBeFinishedForFree(job, village)) {
                        premiumActionService.instantBuild(job, LOCATION_TYPES.MASS_SCREEN, true, villageId)
                    }
                })
            }
        })
    }
    const initializeAllVillages = function() {
        const villageIds = getVillageIds()
        villageIds.forEach(function(villageId) {
            const village = $player.getVillage(villageId)
            if (!village.isInitialized()) {
                villageService.initializeVillage(village)
            }
        })
    }
    const getVillageIds = function() {
        const groupVillages = builderSettings[SETTINGS.GROUP_VILLAGES]
        let villages = []
        if (groupVillages) {
            villages = groupList.getGroupVillageIds(groupVillages)
            villages = villages.filter(function(vid) {
                return $player.getVillage(vid)
            })
        } else {
            utils.each($player.getVillages(), function(village) {
                villages.push(village.getId())
            })
        }
        return villages
    }
    const analyseVillageBuildings = function(village) {
        let buildingLevels = angular.copy(village.buildingData.getBuildingLevels())
        const currentQueue = village.buildingQueue.getQueue()
        let sequence = angular.copy(VILLAGE_BUILDINGS)
        const sequences = builderSettings[SETTINGS.BUILDING_SEQUENCES]
        const activeSequenceId = builderSettings[SETTINGS.ACTIVE_SEQUENCE]
        const activeSequence = sequences[activeSequenceId]
        currentQueue.forEach(function(job) {
            buildingLevels[job.building]++
        })
        if (checkVillageBuildingLimit(buildingLevels)) {
            return false
        }
        activeSequence.some(function(buildingName) {
            if (++sequence[buildingName] > buildingLevels[buildingName]) {
                buildingService.compute(village)
                checkAndUpgradeBuilding(village, buildingName, function(jobAdded, data) {
                    if (jobAdded && data.job) {
                        eventQueue.trigger(eventTypeProvider.BUILDER_QUEUE_JOB_STARTED, data.job)
                        addLog(village.getId(), data.job)
                    }
                })
                return true
            }
        })
    }
    const checkAndUpgradeBuilding = function(village, buildingName, callback) {
        const upgradeability = checkBuildingUpgradeability(village, buildingName)
        if (upgradeability === UPGRADEABILITY_STATES.POSSIBLE) {
            upgradeBuilding(village, buildingName, function(data) {
                callback(true, data)
            })
        } else if (upgradeability === UPGRADEABILITY_STATES.NOT_ENOUGH_FOOD) {
            if (builderSettings[SETTINGS.PRIORIZE_FARM]) {
                const limitFarm = buildingSequenceLimit[BUILDING_TYPES.FARM]
                const villageFarm = village.getBuildingData().getDataForBuilding(BUILDING_TYPES.FARM)
                if (villageFarm.level < limitFarm) {
                    upgradeBuilding(village, BUILDING_TYPES.FARM, function(data) {
                        callback(true, data)
                    })
                }
            }
        }
        callback(false)
    }
    const upgradeBuilding = function(village, buildingName, callback) {
        socketService.emit(routeProvider.VILLAGE_UPGRADE_BUILDING, {
            building: buildingName,
            village_id: village.getId(),
            location: LOCATION_TYPES.MASS_SCREEN,
            premium: false
        }, callback)
    }
    const checkBuildingUpgradeability = function(village, buildingName) {
        const buildingData = village.getBuildingData().getDataForBuilding(buildingName)
        if (buildingData.upgradeability === UPGRADEABILITY_STATES.POSSIBLE) {
            const nextLevelCosts = buildingData.nextLevelCosts
            const resources = village.getResources().getComputed()
            if (
                resources.clay.currentStock - builderSettings[SETTINGS.PRESERVE_CLAY] < nextLevelCosts.clay ||
                resources.iron.currentStock - builderSettings[SETTINGS.PRESERVE_IRON] < nextLevelCosts.iron ||
                resources.wood.currentStock - builderSettings[SETTINGS.PRESERVE_WOOD] < nextLevelCosts.wood
            ) {
                return UPGRADEABILITY_STATES.NOT_ENOUGH_RESOURCES
            }
        }
        return buildingData.upgradeability
    }
    const checkVillageBuildingLimit = function(buildingLevels) {
        for (let buildingName in buildingLevels) {
            if (buildingLevels[buildingName] < buildingSequenceLimit[buildingName]) {
                return false
            }
        }
        return true
    }
    const validSequence = function(sequence) {
        const buildingData = modelDataService.getGameData().getBuildings()
        for (let i = 0; i < sequence.length; i++) {
            let building = sequence[i]
            if (++sequence[building] > buildingData[building].max_level) {
                return false
            }
        }
        return true
    }
    const getSequenceLimit = function(sequenceId) {
        const sequences = builderSettings[SETTINGS.BUILDING_SEQUENCES]
        const sequence = sequences[sequenceId]
        let sequenceLimit = angular.copy(VILLAGE_BUILDINGS)
        sequence.forEach(function(buildingName) {
            sequenceLimit[buildingName]++
        })
        return sequenceLimit
    }
    const addLog = function(villageId, jobData) {
        let data = {
            time: timeHelper.gameTime(),
            villageId: villageId,
            building: jobData.building,
            level: jobData.level
        }
        logs.unshift(data)
        if (logs.length > LOGS_LIMIT) {
            logs.splice(logs.length - LOGS_LIMIT, logs.length)
        }
        Lockr.set(STORAGE_KEYS.LOGS, logs)
        return true
    }
    let builderQueue = {}
    builderQueue.start = function() {
        if (!sequencesAvail) {
            eventQueue.trigger(eventTypeProvider.BUILDER_QUEUE_NO_SEQUENCES)
            return false
        }
        running = true
        intervalCheckId = setInterval(analyseVillages, 60000 / ANALYSES_PER_MINUTE)
        intervalInstantCheckId = setInterval(analyseVillagesInstantFinish, 60000 / ANALYSES_PER_MINUTE_INSTANT_FINISH)
        ready(function() {
            initializeAllVillages()
            analyseVillages()
            analyseVillagesInstantFinish()
        }, ['all_villages_ready'])
        eventQueue.trigger(eventTypeProvider.BUILDER_QUEUE_START)
    }
    builderQueue.stop = function() {
        running = false
        clearInterval(intervalCheckId)
        clearInterval(intervalInstantCheckId)
        eventQueue.trigger(eventTypeProvider.BUILDER_QUEUE_STOP)
    }
    builderQueue.isRunning = function() {
        return running
    }
    builderQueue.isInitialized = function() {
        return initialized
    }
    builderQueue.getSettings = function() {
        return settings
    }
    builderQueue.getLogs = function() {
        return logs
    }
    builderQueue.clearLogs = function() {
        logs = []
        Lockr.set(STORAGE_KEYS.LOGS, logs)
        eventQueue.trigger(eventTypeProvider.BUILDER_QUEUE_CLEAR_LOGS)
    }
    builderQueue.addBuildingSequence = function(id, sequence) {
        let sequences = builderSettings[SETTINGS.BUILDING_SEQUENCES]
        if (id in sequences) {
            return SEQUENCE_STATUS.SEQUENCE_EXISTS
        }
        if (!Array.isArray(sequence)) {
            return SEQUENCE_STATUS.SEQUENCE_INVALID
        }
        sequences[id] = sequence
        settings.set(SETTINGS.BUILDING_SEQUENCES, sequences, {
            quiet: true
        })
        eventQueue.trigger(eventTypeProvider.BUILDER_QUEUE_BUILDING_SEQUENCES_ADDED, id)
        return SEQUENCE_STATUS.SEQUENCE_SAVED
    }
    builderQueue.updateBuildingSequence = function(id, sequence) {
        let sequences = builderSettings[SETTINGS.BUILDING_SEQUENCES]
        if (!(id in sequences)) {
            return SEQUENCE_STATUS.SEQUENCE_NO_EXISTS
        }
        if (!Array.isArray(sequence) || !validSequence(sequence)) {
            return SEQUENCE_STATUS.SEQUENCE_INVALID
        }
        sequences[id] = sequence
        settings.set(SETTINGS.BUILDING_SEQUENCES, sequences, {
            quiet: true
        })
        eventQueue.trigger(eventTypeProvider.BUILDER_QUEUE_BUILDING_SEQUENCES_UPDATED, id)
        return SEQUENCE_STATUS.SEQUENCE_SAVED
    }
    builderQueue.removeSequence = function(id) {
        let sequences = builderSettings[SETTINGS.BUILDING_SEQUENCES]
        if (!(id in sequences)) {
            return SEQUENCE_STATUS.SEQUENCE_NO_EXISTS
        }
        delete sequences[id]
        settings.set(SETTINGS.BUILDING_SEQUENCES, sequences, {
            quiet: true
        })
        eventQueue.trigger(eventTypeProvider.BUILDER_QUEUE_BUILDING_SEQUENCES_REMOVED, id)
    }
    builderQueue.init = function() {
        initialized = true
        logs = Lockr.get(STORAGE_KEYS.LOGS, [], true)
        $player = modelDataService.getSelectedCharacter()
        groupList = modelDataService.getGroupList()
        settings = new Settings({
            settingsMap: SETTINGS_MAP,
            storageKey: STORAGE_KEYS.SETTINGS
        })
        settings.onChange(function(changes, updates, opt) {
            builderSettings = settings.getAll()
            if (running) {
                if (updates[UPDATES.ANALYSE]) {
                    analyseVillages()
                }
            }
            if (!opt.quiet) {
                eventQueue.trigger(eventTypeProvider.BUILDER_QUEUE_SETTINGS_CHANGE)
            }
        })
        builderSettings = settings.getAll()
        for (let buildingName in BUILDING_TYPES) {
            VILLAGE_BUILDINGS[BUILDING_TYPES[buildingName]] = 0
        }
        sequencesAvail = Object.keys(builderSettings[SETTINGS.BUILDING_SEQUENCES]).length
        buildingSequenceLimit = sequencesAvail ? getSequenceLimit(builderSettings[SETTINGS.ACTIVE_SEQUENCE]) : false
        $rootScope.$on(eventTypeProvider.BUILDING_LEVEL_CHANGED, function(event, data) {
            if (!running) {
                return false
            }
            setTimeout(function() {
                let village = $player.getVillage(data.village_id)
                analyseVillageBuildings(village)
            }, 1000)
        })
    }
    return builderQueue
})
define('two/builderQueue/defaultOrders', [
    'conf/buildingTypes'
], function(
    BUILDING_TYPES
) {
    let defaultSequences = {}
    const shuffle = function(array) {
        array.sort(() => Math.random() - 0.5)
    }
    const parseSequence = function(rawSequence) {
        let parsed = []
        for (let i = 0; i < rawSequence.length; i++) {
            let item = rawSequence[i]
            if (Array.isArray(item)) {
                shuffle(item)
                parsed = parsed.concat(item)
            } else {
                parsed.push(item)
            }
        }
        return parsed
    }
    const parseSequences = function(rawSequences) {
        let parsed = {}
        for (let i in rawSequences) {
            if (hasOwn.call(rawSequences, i)) {
                parsed[i] = parseSequence(rawSequences[i])
            }
        }
        return parsed
    }
    defaultSequences['Essential'] = [
        BUILDING_TYPES.HEADQUARTER, // 1
        BUILDING_TYPES.FARM, // 1
        BUILDING_TYPES.WAREHOUSE, // 1
        BUILDING_TYPES.RALLY_POINT, // 1
        BUILDING_TYPES.BARRACKS, // 1
        [
            // Quest: The Resources
            BUILDING_TYPES.TIMBER_CAMP, // 1
            BUILDING_TYPES.TIMBER_CAMP, // 2
            BUILDING_TYPES.CLAY_PIT, // 1
            BUILDING_TYPES.IRON_MINE, // 1
            BUILDING_TYPES.HEADQUARTER, // 2
            BUILDING_TYPES.RALLY_POINT, // 2
        ],
        [
            // Quest: First Steps
            BUILDING_TYPES.FARM, // 2
            BUILDING_TYPES.WAREHOUSE, // 2
            // Quest: Laying Down Foundation
            BUILDING_TYPES.CLAY_PIT, // 2
            BUILDING_TYPES.IRON_MINE, // 2
        ],
        [
            // Quest: More Resources
            BUILDING_TYPES.TIMBER_CAMP, // 3
            BUILDING_TYPES.CLAY_PIT, // 3
            BUILDING_TYPES.IRON_MINE, // 3
            // Quest: Resource Building
            BUILDING_TYPES.WAREHOUSE, // 3
            BUILDING_TYPES.TIMBER_CAMP, // 4
            BUILDING_TYPES.CLAY_PIT, // 4
            BUILDING_TYPES.IRON_MINE, // 4
        ],
        [
            // Quest: Get an Overview
            BUILDING_TYPES.WAREHOUSE, // 4
            BUILDING_TYPES.TIMBER_CAMP, // 5
            BUILDING_TYPES.CLAY_PIT, // 5
            BUILDING_TYPES.IRON_MINE, // 5
            // Quest: Capital
            BUILDING_TYPES.FARM, // 3
            BUILDING_TYPES.WAREHOUSE, // 5
            BUILDING_TYPES.HEADQUARTER, // 3
        ],
        [
            // Quest: The Hero
            BUILDING_TYPES.STATUE, // 1
            // Quest: Resource Expansions
            BUILDING_TYPES.TIMBER_CAMP, // 6
            BUILDING_TYPES.CLAY_PIT, // 6
            BUILDING_TYPES.IRON_MINE, // 6
        ],
        [
            // Quest: Military
            BUILDING_TYPES.BARRACKS, // 2
            // Quest: The Hospital
            BUILDING_TYPES.HOSPITAL, // 1
            BUILDING_TYPES.HEADQUARTER, // 4
            BUILDING_TYPES.TIMBER_CAMP, // 7
            BUILDING_TYPES.CLAY_PIT, // 7
            BUILDING_TYPES.IRON_MINE, // 7
            BUILDING_TYPES.FARM, // 4
        ],
        [
            // Quest: Resources
            BUILDING_TYPES.TIMBER_CAMP, // 8
            BUILDING_TYPES.CLAY_PIT, // 8
            BUILDING_TYPES.IRON_MINE, // 8
        ],
        // Quest: The Wall
        BUILDING_TYPES.WAREHOUSE, // 6
        BUILDING_TYPES.HEADQUARTER, // 5
        BUILDING_TYPES.WALL, // 1
        [
            // Quest: Village Improvements
            BUILDING_TYPES.TIMBER_CAMP, // 9
            BUILDING_TYPES.CLAY_PIT, // 9
            BUILDING_TYPES.IRON_MINE, // 9
            BUILDING_TYPES.TIMBER_CAMP, // 10
            BUILDING_TYPES.CLAY_PIT, // 10
            BUILDING_TYPES.IRON_MINE, // 10
            BUILDING_TYPES.FARM, // 5
        ],
        BUILDING_TYPES.FARM, // 6
        BUILDING_TYPES.FARM, // 7
        [
            // Quest: Hard work
            BUILDING_TYPES.TIMBER_CAMP, // 11
            BUILDING_TYPES.CLAY_PIT, // 11
            BUILDING_TYPES.IRON_MINE, // 11
            BUILDING_TYPES.TIMBER_CAMP, // 12
            BUILDING_TYPES.CLAY_PIT, // 12
            BUILDING_TYPES.IRON_MINE, // 12
        ],
        [
            // Quest: The way of defence
            BUILDING_TYPES.BARRACKS, // 3
            BUILDING_TYPES.WAREHOUSE, // 7
            BUILDING_TYPES.WAREHOUSE, // 8
            BUILDING_TYPES.FARM, // 8
            BUILDING_TYPES.WAREHOUSE, // 9
            BUILDING_TYPES.WAREHOUSE, // 10
        ],
        [
            // Quest: Market Barker
            BUILDING_TYPES.HEADQUARTER, // 6
            BUILDING_TYPES.MARKET, // 1
            // Quest: Preparations
            BUILDING_TYPES.BARRACKS, // 4
            BUILDING_TYPES.WALL, // 2
            BUILDING_TYPES.WALL, // 3
        ],
        [
            BUILDING_TYPES.FARM, // 9
            BUILDING_TYPES.FARM, // 10
            BUILDING_TYPES.BARRACKS, // 5
            BUILDING_TYPES.WAREHOUSE, // 11
            BUILDING_TYPES.FARM, // 11
        ],
        [
            BUILDING_TYPES.BARRACKS, // 6
            BUILDING_TYPES.WAREHOUSE, // 12
            BUILDING_TYPES.FARM, // 12
            BUILDING_TYPES.BARRACKS, // 7
            BUILDING_TYPES.WAREHOUSE, // 13
            BUILDING_TYPES.FARM, // 13
        ],
        [
            BUILDING_TYPES.WALL, // 4
            BUILDING_TYPES.WALL, // 5
            BUILDING_TYPES.WALL, // 6
            BUILDING_TYPES.MARKET, // 2
            BUILDING_TYPES.MARKET, // 3
            BUILDING_TYPES.MARKET, // 4
        ],
        [
            BUILDING_TYPES.BARRACKS, // 8
            BUILDING_TYPES.BARRACKS, // 9
            BUILDING_TYPES.HEADQUARTER, // 7
            BUILDING_TYPES.HEADQUARTER, // 8
        ],
        [
            BUILDING_TYPES.TAVERN, // 1
            BUILDING_TYPES.TAVERN, // 2
            BUILDING_TYPES.TAVERN, // 3
            BUILDING_TYPES.RALLY_POINT, // 3
        ],
        [
            BUILDING_TYPES.BARRACKS, // 10
            BUILDING_TYPES.BARRACKS, // 11
            BUILDING_TYPES.WAREHOUSE, // 14
            BUILDING_TYPES.FARM, // 14
        ],
        [
            BUILDING_TYPES.WAREHOUSE, // 15
            BUILDING_TYPES.FARM, // 15
            BUILDING_TYPES.BARRACKS, // 12
            BUILDING_TYPES.BARRACKS, // 13
        ],
        [
            BUILDING_TYPES.STATUE, // 2
            BUILDING_TYPES.STATUE, // 3
            BUILDING_TYPES.WALL, // 7
            BUILDING_TYPES.WALL, // 8
        ],
        [
            BUILDING_TYPES.HEADQUARTER, // 9
            BUILDING_TYPES.HEADQUARTER, // 10
            BUILDING_TYPES.WAREHOUSE, // 16
            BUILDING_TYPES.FARM, // 16
            BUILDING_TYPES.FARM, // 17
        ],
        [
            BUILDING_TYPES.IRON_MINE, // 13
            BUILDING_TYPES.IRON_MINE, // 14
            BUILDING_TYPES.IRON_MINE, // 15
            BUILDING_TYPES.WAREHOUSE, // 17
        ],
        [
            BUILDING_TYPES.BARRACKS, // 14
            BUILDING_TYPES.BARRACKS, // 15
            BUILDING_TYPES.WAREHOUSE, // 18
            BUILDING_TYPES.FARM, // 18
        ],
        [
            BUILDING_TYPES.WALL, // 9
            BUILDING_TYPES.WALL, // 10
            BUILDING_TYPES.TAVERN, // 4
            BUILDING_TYPES.TAVERN, // 5
            BUILDING_TYPES.TAVERN, // 6
        ],
        [
            BUILDING_TYPES.MARKET, // 5
            BUILDING_TYPES.MARKET, // 6
            BUILDING_TYPES.MARKET, // 7
            BUILDING_TYPES.WAREHOUSE, // 19
            BUILDING_TYPES.FARM, // 19
            BUILDING_TYPES.WAREHOUSE, // 20
            BUILDING_TYPES.FARM, // 20
            BUILDING_TYPES.WAREHOUSE, // 21
            BUILDING_TYPES.FARM, // 21
        ],
        [
            BUILDING_TYPES.IRON_MINE, // 16
            BUILDING_TYPES.IRON_MINE, // 17
            BUILDING_TYPES.IRON_MINE, // 18
            BUILDING_TYPES.RALLY_POINT, // 4
        ],
        [
            BUILDING_TYPES.BARRACKS, // 16
            BUILDING_TYPES.BARRACKS, // 17
            BUILDING_TYPES.FARM, // 22
            BUILDING_TYPES.FARM, // 23
            BUILDING_TYPES.FARM, // 24
            BUILDING_TYPES.FARM, // 25
        ],
        [
            BUILDING_TYPES.WAREHOUSE, // 22
            BUILDING_TYPES.WAREHOUSE, // 23
            BUILDING_TYPES.HEADQUARTER, // 11
            BUILDING_TYPES.HEADQUARTER, // 12
        ],
        [
            BUILDING_TYPES.STATUE, // 4
            BUILDING_TYPES.STATUE, // 5
            BUILDING_TYPES.FARM, // 26
            BUILDING_TYPES.BARRACKS, // 18
        ],
        [
            BUILDING_TYPES.HEADQUARTER, // 14
            BUILDING_TYPES.HEADQUARTER, // 15
            BUILDING_TYPES.FARM, // 27
            BUILDING_TYPES.BARRACKS, // 19
        ],
        [
            BUILDING_TYPES.HEADQUARTER, // 15
            BUILDING_TYPES.HEADQUARTER, // 16
            BUILDING_TYPES.BARRACKS, // 20
            BUILDING_TYPES.HEADQUARTER, // 17
            BUILDING_TYPES.HEADQUARTER, // 18
            BUILDING_TYPES.HEADQUARTER, // 19
            BUILDING_TYPES.HEADQUARTER, // 20
        ],
        [
            BUILDING_TYPES.ACADEMY, // 1
            BUILDING_TYPES.FARM, // 28
            BUILDING_TYPES.WAREHOUSE, // 23
            BUILDING_TYPES.WAREHOUSE, // 24
            BUILDING_TYPES.WAREHOUSE, // 25
        ],
        [
            BUILDING_TYPES.MARKET, // 8
            BUILDING_TYPES.MARKET, // 9
            BUILDING_TYPES.MARKET, // 10
            BUILDING_TYPES.TIMBER_CAMP, // 13
            BUILDING_TYPES.CLAY_PIT, // 13
            BUILDING_TYPES.IRON_MINE, // 19
        ],
        [
            BUILDING_TYPES.TIMBER_CAMP, // 14
            BUILDING_TYPES.CLAY_PIT, // 14
            BUILDING_TYPES.TIMBER_CAMP, // 15
            BUILDING_TYPES.CLAY_PIT, // 15
            BUILDING_TYPES.TIMBER_CAMP, // 16
            BUILDING_TYPES.TIMBER_CAMP, // 17
        ],
        [
            BUILDING_TYPES.WALL, // 11
            BUILDING_TYPES.WALL, // 12
            BUILDING_TYPES.MARKET, // 11
            BUILDING_TYPES.MARKET, // 12
            BUILDING_TYPES.MARKET, // 13
        ],
        [
            BUILDING_TYPES.TIMBER_CAMP, // 18
            BUILDING_TYPES.CLAY_PIT, // 16
            BUILDING_TYPES.TIMBER_CAMP, // 19
            BUILDING_TYPES.CLAY_PIT, // 17
            BUILDING_TYPES.TAVERN, // 7
            BUILDING_TYPES.TAVERN, // 8
            BUILDING_TYPES.TAVERN, // 9
        ],
        [
            BUILDING_TYPES.WALL, // 13
            BUILDING_TYPES.WALL, // 14
            BUILDING_TYPES.TIMBER_CAMP, // 20
            BUILDING_TYPES.CLAY_PIT, // 18
            BUILDING_TYPES.IRON_MINE, // 20
        ],
        [
            BUILDING_TYPES.TIMBER_CAMP, // 21
            BUILDING_TYPES.CLAY_PIT, // 19
            BUILDING_TYPES.IRON_MINE, // 21
            BUILDING_TYPES.BARRACKS, // 21
            BUILDING_TYPES.BARRACKS, // 22
            BUILDING_TYPES.BARRACKS, // 23
        ],
        [
            BUILDING_TYPES.FARM, // 29
            BUILDING_TYPES.WAREHOUSE, // 26
            BUILDING_TYPES.WAREHOUSE, // 27
            BUILDING_TYPES.TAVERN, // 10
            BUILDING_TYPES.TAVERN, // 11
            BUILDING_TYPES.TAVERN, // 12
        ],
        [
            BUILDING_TYPES.TIMBER_CAMP, // 22
            BUILDING_TYPES.CLAY_PIT, // 20
            BUILDING_TYPES.IRON_MINE, // 22
            BUILDING_TYPES.TIMBER_CAMP, // 23
            BUILDING_TYPES.CLAY_PIT, // 21
            BUILDING_TYPES.IRON_MINE, // 23
        ],
        [
            BUILDING_TYPES.TIMBER_CAMP, // 24
            BUILDING_TYPES.CLAY_PIT, // 22
            BUILDING_TYPES.IRON_MINE, // 24
            BUILDING_TYPES.BARRACKS, // 24
            BUILDING_TYPES.BARRACKS, // 25
        ],
        [
            BUILDING_TYPES.FARM, // 30
            BUILDING_TYPES.WAREHOUSE, // 28
            BUILDING_TYPES.WAREHOUSE, // 29
            BUILDING_TYPES.WALL, // 15
            BUILDING_TYPES.WALL, // 16
            BUILDING_TYPES.WALL, // 17
            BUILDING_TYPES.WALL, // 18
        ],
        [
            BUILDING_TYPES.TAVERN, // 13
            BUILDING_TYPES.TAVERN, // 14
            BUILDING_TYPES.RALLY_POINT, // 5
            BUILDING_TYPES.TIMBER_CAMP, // 25
            BUILDING_TYPES.CLAY_PIT, // 23
            BUILDING_TYPES.IRON_MINE, // 25
        ],
        [
            BUILDING_TYPES.TIMBER_CAMP, // 26
            BUILDING_TYPES.CLAY_PIT, // 24
            BUILDING_TYPES.IRON_MINE, // 26
            BUILDING_TYPES.TIMBER_CAMP, // 27
            BUILDING_TYPES.CLAY_PIT, // 25
            BUILDING_TYPES.IRON_MINE, // 27
        ],
        [
            BUILDING_TYPES.TIMBER_CAMP, // 28
            BUILDING_TYPES.CLAY_PIT, // 26
            BUILDING_TYPES.IRON_MINE, // 28
            BUILDING_TYPES.TIMBER_CAMP, // 29
            BUILDING_TYPES.CLAY_PIT, // 27
            BUILDING_TYPES.CLAY_PIT, // 28
            BUILDING_TYPES.IRON_MINE, // 29
        ],
        [
            BUILDING_TYPES.TIMBER_CAMP, // 30
            BUILDING_TYPES.CLAY_PIT, // 29
            BUILDING_TYPES.CLAY_PIT, // 30
            BUILDING_TYPES.IRON_MINE, // 30
            BUILDING_TYPES.WALL, // 19
            BUILDING_TYPES.WALL, // 20
        ]
    ]
    defaultSequences['Pełna rozbudowa'] = [
        [
            BUILDING_TYPES.HOSPITAL, // 2
            BUILDING_TYPES.HOSPITAL, // 3
            BUILDING_TYPES.HOSPITAL, // 4
            BUILDING_TYPES.HOSPITAL, // 5
            BUILDING_TYPES.MARKET, // 14
            BUILDING_TYPES.MARKET, // 15
            BUILDING_TYPES.MARKET, // 16
            BUILDING_TYPES.MARKET, // 17
        ],
        [
            BUILDING_TYPES.HEADQUARTER, // 21
            BUILDING_TYPES.HEADQUARTER, // 22
            BUILDING_TYPES.HEADQUARTER, // 23
            BUILDING_TYPES.HEADQUARTER, // 24
            BUILDING_TYPES.HEADQUARTER, // 25
            BUILDING_TYPES.PRECEPTORY, // 1
            BUILDING_TYPES.HOSPITAL, // 6
            BUILDING_TYPES.HOSPITAL, // 7
            BUILDING_TYPES.HOSPITAL, // 8
            BUILDING_TYPES.HOSPITAL, // 9
            BUILDING_TYPES.HOSPITAL, // 10
        ],
        [
            BUILDING_TYPES.MARKET, // 18
            BUILDING_TYPES.MARKET, // 19
            BUILDING_TYPES.MARKET, // 20
            BUILDING_TYPES.MARKET, // 21
            BUILDING_TYPES.PRECEPTORY, // 2
            BUILDING_TYPES.PRECEPTORY, // 3
            BUILDING_TYPES.MARKET, // 22
            BUILDING_TYPES.MARKET, // 23
            BUILDING_TYPES.MARKET, // 24
            BUILDING_TYPES.MARKET, // 25
        ],
        [
            BUILDING_TYPES.HEADQUARTER, // 26
            BUILDING_TYPES.HEADQUARTER, // 27
            BUILDING_TYPES.HEADQUARTER, // 28
            BUILDING_TYPES.HEADQUARTER, // 29
            BUILDING_TYPES.HEADQUARTER, // 30
            BUILDING_TYPES.PRECEPTORY, // 4
            BUILDING_TYPES.PRECEPTORY, // 5
            BUILDING_TYPES.PRECEPTORY, // 6
            BUILDING_TYPES.PRECEPTORY, // 7
            BUILDING_TYPES.PRECEPTORY, // 8
            BUILDING_TYPES.PRECEPTORY, // 9
            BUILDING_TYPES.PRECEPTORY, // 10
        ]
    ]
    Array.prototype.unshift.apply(
        defaultSequences['Pełna rozbudowa'],
        defaultSequences['Essential']
    )
    defaultSequences['Essential bez murów'] =
        defaultSequences['Essential'].filter(function(building) {
            return building !== BUILDING_TYPES.WALL
        })
    defaultSequences['DirtyStyle'] = [
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.RALLY_POINT,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.RALLY_POINT,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.STATUE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.HOSPITAL,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.MARKET,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.MARKET,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.TAVERN,
        BUILDING_TYPES.TAVERN,
        BUILDING_TYPES.TAVERN,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.ACADEMY,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.RALLY_POINT,
        BUILDING_TYPES.MARKET,
        BUILDING_TYPES.MARKET,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.STATUE,
        BUILDING_TYPES.STATUE,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.TAVERN,
        BUILDING_TYPES.TAVERN,
        BUILDING_TYPES.TAVERN,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.MARKET,
        BUILDING_TYPES.MARKET,
        BUILDING_TYPES.MARKET,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.RALLY_POINT,
        BUILDING_TYPES.STATUE,
        BUILDING_TYPES.STATUE,
        BUILDING_TYPES.MARKET,
        BUILDING_TYPES.MARKET,
        BUILDING_TYPES.MARKET,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.MARKET,
        BUILDING_TYPES.MARKET,
        BUILDING_TYPES.MARKET,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.TAVERN,
        BUILDING_TYPES.TAVERN,
        BUILDING_TYPES.TAVERN,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TAVERN,
        BUILDING_TYPES.TAVERN,
        BUILDING_TYPES.TAVERN,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.TAVERN,
        BUILDING_TYPES.TAVERN,
        BUILDING_TYPES.RALLY_POINT,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL
    ]
    defaultSequences['IrooStyle'] = [
        BUILDING_TYPES.HEADQUARTER, // 1
        BUILDING_TYPES.FARM, // 1
        BUILDING_TYPES.WAREHOUSE, // 1
        BUILDING_TYPES.RALLY_POINT, // 1
        BUILDING_TYPES.BARRACKS, // 1
        // Quest: The Resources
        BUILDING_TYPES.TIMBER_CAMP, // 1
        BUILDING_TYPES.TIMBER_CAMP, // 2
        BUILDING_TYPES.CLAY_PIT, // 1
        BUILDING_TYPES.IRON_MINE, // 1
        BUILDING_TYPES.HEADQUARTER, // 2
        BUILDING_TYPES.RALLY_POINT, // 2
        // Quest: First Steps
        BUILDING_TYPES.FARM, // 2
        BUILDING_TYPES.WAREHOUSE, // 2
        // Quest: Laying Down Foundation
        BUILDING_TYPES.CLAY_PIT, // 2
        BUILDING_TYPES.IRON_MINE, // 2
        // Quest: More Resources
        BUILDING_TYPES.TIMBER_CAMP, // 3
        BUILDING_TYPES.CLAY_PIT, // 3
        BUILDING_TYPES.IRON_MINE, // 3
        // Quest: Resource Building
        BUILDING_TYPES.WAREHOUSE, // 3
        BUILDING_TYPES.TIMBER_CAMP, // 4
        BUILDING_TYPES.CLAY_PIT, // 4
        BUILDING_TYPES.IRON_MINE, // 4
        // Quest: Get an Overview
        BUILDING_TYPES.WAREHOUSE, // 4
        BUILDING_TYPES.TIMBER_CAMP, // 5
        BUILDING_TYPES.CLAY_PIT, // 5
        BUILDING_TYPES.IRON_MINE, // 5
        // Quest: Capital
        BUILDING_TYPES.FARM, // 3
        BUILDING_TYPES.WAREHOUSE, // 5
        BUILDING_TYPES.HEADQUARTER, // 3
        // Quest: The Hero
        BUILDING_TYPES.STATUE, // 1
        // Quest: Resource Expansions
        BUILDING_TYPES.TIMBER_CAMP, // 6
        BUILDING_TYPES.CLAY_PIT, // 6
        BUILDING_TYPES.IRON_MINE, // 6
        // Quest: Military
        BUILDING_TYPES.BARRACKS, // 2
        // Quest: The Hospital
        BUILDING_TYPES.HEADQUARTER, // 4
        BUILDING_TYPES.TIMBER_CAMP, // 7
        BUILDING_TYPES.CLAY_PIT, // 7
        BUILDING_TYPES.IRON_MINE, // 7
        BUILDING_TYPES.FARM, // 4
        BUILDING_TYPES.HOSPITAL, // 1
        // Quest: Resources
        BUILDING_TYPES.TIMBER_CAMP, // 8
        BUILDING_TYPES.CLAY_PIT, // 8
        BUILDING_TYPES.IRON_MINE, // 8
        // Quest: The Wall
        BUILDING_TYPES.WAREHOUSE, // 6
        BUILDING_TYPES.HEADQUARTER, // 5
        BUILDING_TYPES.WALL, // 1
        BUILDING_TYPES.WAREHOUSE, // 7
        // Quest: Village Improvements
        BUILDING_TYPES.TIMBER_CAMP, // 9
        BUILDING_TYPES.CLAY_PIT, // 9
        BUILDING_TYPES.IRON_MINE, // 9
        BUILDING_TYPES.TIMBER_CAMP, // 10
        BUILDING_TYPES.CLAY_PIT, // 10
        BUILDING_TYPES.IRON_MINE, // 10
        BUILDING_TYPES.WAREHOUSE, // 8
        BUILDING_TYPES.FARM, // 5
        // Quest: Hard work
        BUILDING_TYPES.TIMBER_CAMP, // 11
        BUILDING_TYPES.CLAY_PIT, // 11
        BUILDING_TYPES.IRON_MINE, // 11
        BUILDING_TYPES.TIMBER_CAMP, // 12
        BUILDING_TYPES.CLAY_PIT, // 12
        BUILDING_TYPES.IRON_MINE, // 12
        // Quest: The way of defence
        BUILDING_TYPES.BARRACKS, // 3
        BUILDING_TYPES.FARM, // 6
        BUILDING_TYPES.WAREHOUSE, // 7
        BUILDING_TYPES.FARM, // 7
        BUILDING_TYPES.WAREHOUSE, // 8
        BUILDING_TYPES.HEADQUARTER, // 6
        BUILDING_TYPES.FARM, // 8
        BUILDING_TYPES.WAREHOUSE, // 9
        BUILDING_TYPES.MARKET, // 1
        // Quest: Preparations
        BUILDING_TYPES.BARRACKS, // 4
        BUILDING_TYPES.WALL, // 2
        BUILDING_TYPES.WALL, // 3
        BUILDING_TYPES.FARM, // 9
        BUILDING_TYPES.FARM, // 10
        BUILDING_TYPES.BARRACKS, // 5
        BUILDING_TYPES.WAREHOUSE, // 11
        BUILDING_TYPES.FARM, // 11
        BUILDING_TYPES.BARRACKS, // 6
        BUILDING_TYPES.WAREHOUSE, // 12
        BUILDING_TYPES.FARM, // 12
        BUILDING_TYPES.BARRACKS, // 7
        BUILDING_TYPES.WAREHOUSE, // 13
        BUILDING_TYPES.FARM, // 13
        BUILDING_TYPES.WALL, // 4
        BUILDING_TYPES.WALL, // 5
        BUILDING_TYPES.WALL, // 6
        BUILDING_TYPES.MARKET, // 2
        BUILDING_TYPES.MARKET, // 3
        BUILDING_TYPES.MARKET, // 4
        BUILDING_TYPES.BARRACKS, // 8
        BUILDING_TYPES.HEADQUARTER, // 6
        BUILDING_TYPES.BARRACKS, // 9
        BUILDING_TYPES.HEADQUARTER, // 8
        BUILDING_TYPES.TAVERN, // 1
        BUILDING_TYPES.TAVERN, // 2
        BUILDING_TYPES.TAVERN, // 3
        BUILDING_TYPES.IRON_MINE, // 13
        BUILDING_TYPES.IRON_MINE, // 14
        BUILDING_TYPES.IRON_MINE, // 15
        BUILDING_TYPES.RALLY_POINT, // 3
        BUILDING_TYPES.BARRACKS, // 10
        BUILDING_TYPES.BARRACKS, // 11
        BUILDING_TYPES.WAREHOUSE, // 14
        BUILDING_TYPES.FARM, // 14
        BUILDING_TYPES.BARRACKS, // 12
        BUILDING_TYPES.BARRACKS, // 13
        BUILDING_TYPES.STATUE, // 2
        BUILDING_TYPES.WAREHOUSE, // 16
        BUILDING_TYPES.FARM, // 16
        BUILDING_TYPES.WAREHOUSE, // 16
        BUILDING_TYPES.BARRACKS, // 14
        BUILDING_TYPES.TIMBER_CAMP, // 13
        BUILDING_TYPES.CLAY_PIT, // 13
        BUILDING_TYPES.BARRACKS, // 20
        BUILDING_TYPES.WAREHOUSE, // 23
        BUILDING_TYPES.FARM, // 28
        BUILDING_TYPES.HEADQUARTER, // 17
        BUILDING_TYPES.TIMBER_CAMP, // 13
        BUILDING_TYPES.CLAY_PIT, // 13
        BUILDING_TYPES.HEADQUARTER, // 17
        BUILDING_TYPES.WAREHOUSE, // 14
        BUILDING_TYPES.FARM, // 16
        BUILDING_TYPES.HEADQUARTER, // 17
        BUILDING_TYPES.HEADQUARTER, // 17
        BUILDING_TYPES.TIMBER_CAMP, // 13
        BUILDING_TYPES.CLAY_PIT, // 13
        BUILDING_TYPES.CLAY_PIT, // 13
        BUILDING_TYPES.IRON_MINE, // 15
        BUILDING_TYPES.HEADQUARTER, // 17
        BUILDING_TYPES.WAREHOUSE, // 16
        BUILDING_TYPES.HEADQUARTER, // 17
        BUILDING_TYPES.TIMBER_CAMP, // 13
        BUILDING_TYPES.HEADQUARTER, // 17
        BUILDING_TYPES.WAREHOUSE, // 14
        BUILDING_TYPES.HEADQUARTER, // 17
        BUILDING_TYPES.WAREHOUSE, // 14
        BUILDING_TYPES.HEADQUARTER, // 17
        BUILDING_TYPES.WAREHOUSE, // 14
        BUILDING_TYPES.HEADQUARTER, // 17
        BUILDING_TYPES.HEADQUARTER, // 17
        BUILDING_TYPES.WAREHOUSE, // 14
        BUILDING_TYPES.HEADQUARTER, // 17
        BUILDING_TYPES.WAREHOUSE, // 14
        BUILDING_TYPES.ACADEMY // 1
    ]
    defaultSequences['Mury'] = [
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL,
        BUILDING_TYPES.WALL // 20
    ]
    defaultSequences['Farma'] = [
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM // 30
    ]
    defaultSequences['War Build'] = [
        BUILDING_TYPES.HEADQUARTER, // 1
        BUILDING_TYPES.FARM, // 1
        BUILDING_TYPES.WAREHOUSE, // 1
        BUILDING_TYPES.RALLY_POINT, // 1
        BUILDING_TYPES.BARRACKS, // 1
        // Quest: The Resources
        BUILDING_TYPES.TIMBER_CAMP, // 1
        BUILDING_TYPES.TIMBER_CAMP, // 2
        BUILDING_TYPES.CLAY_PIT, // 1
        BUILDING_TYPES.IRON_MINE, // 1
        BUILDING_TYPES.HEADQUARTER, // 2
        BUILDING_TYPES.RALLY_POINT, // 2
        // Quest: First Steps
        BUILDING_TYPES.FARM, // 2
        BUILDING_TYPES.WAREHOUSE, // 2
        // Quest: Laying Down Foundation
        BUILDING_TYPES.CLAY_PIT, // 2
        BUILDING_TYPES.IRON_MINE, // 2
        // Quest: More Resources
        BUILDING_TYPES.TIMBER_CAMP, // 3
        BUILDING_TYPES.CLAY_PIT, // 3
        BUILDING_TYPES.IRON_MINE, // 3
        // Quest: Resource Building
        BUILDING_TYPES.WAREHOUSE, // 3
        BUILDING_TYPES.TIMBER_CAMP, // 4
        BUILDING_TYPES.CLAY_PIT, // 4
        BUILDING_TYPES.IRON_MINE, // 4
        // Quest: Get an Overview
        BUILDING_TYPES.WAREHOUSE, // 4
        BUILDING_TYPES.TIMBER_CAMP, // 5
        BUILDING_TYPES.CLAY_PIT, // 5
        BUILDING_TYPES.IRON_MINE, // 5
        // Quest: Capital
        BUILDING_TYPES.FARM, // 3
        BUILDING_TYPES.WAREHOUSE, // 5
        BUILDING_TYPES.HEADQUARTER, // 3
        // Quest: The Hero
        BUILDING_TYPES.STATUE, // 1
        // Quest: Resource Expansions
        BUILDING_TYPES.TIMBER_CAMP, // 6
        BUILDING_TYPES.CLAY_PIT, // 6
        BUILDING_TYPES.IRON_MINE, // 6
        // Quest: Military
        BUILDING_TYPES.BARRACKS, // 2
        // Quest: The Hospital
        BUILDING_TYPES.HEADQUARTER, // 4
        BUILDING_TYPES.TIMBER_CAMP, // 7
        BUILDING_TYPES.CLAY_PIT, // 7
        BUILDING_TYPES.IRON_MINE, // 7
        BUILDING_TYPES.FARM, // 4
        BUILDING_TYPES.HOSPITAL, // 1
        // Quest: Resources
        BUILDING_TYPES.TIMBER_CAMP, // 8
        BUILDING_TYPES.CLAY_PIT, // 8
        BUILDING_TYPES.IRON_MINE, // 8
        // Quest: The Wall
        BUILDING_TYPES.WAREHOUSE, // 6
        BUILDING_TYPES.HEADQUARTER, // 5
        BUILDING_TYPES.WALL, // 1
        // Quest: Village Improvements
        BUILDING_TYPES.TIMBER_CAMP, // 9
        BUILDING_TYPES.CLAY_PIT, // 9
        BUILDING_TYPES.IRON_MINE, // 9
        BUILDING_TYPES.TIMBER_CAMP, // 10
        BUILDING_TYPES.CLAY_PIT, // 10
        BUILDING_TYPES.IRON_MINE, // 10
        BUILDING_TYPES.FARM, // 5
        // Quest: Hard work
        BUILDING_TYPES.TIMBER_CAMP, // 11
        BUILDING_TYPES.CLAY_PIT, // 11
        BUILDING_TYPES.IRON_MINE, // 11
        BUILDING_TYPES.TIMBER_CAMP, // 12
        BUILDING_TYPES.CLAY_PIT, // 12
        BUILDING_TYPES.IRON_MINE, // 12
        // Quest: The way of defence
        BUILDING_TYPES.BARRACKS, // 3
        BUILDING_TYPES.FARM, // 6
        BUILDING_TYPES.WAREHOUSE, // 7
        BUILDING_TYPES.FARM, // 7
        BUILDING_TYPES.WAREHOUSE, // 8
        BUILDING_TYPES.FARM, // 8
        BUILDING_TYPES.WAREHOUSE, // 9
        BUILDING_TYPES.WAREHOUSE, // 10
        // Quest: Market Barker
        BUILDING_TYPES.HEADQUARTER, // 6
        BUILDING_TYPES.MARKET, // 1
        // Quest: Preparations
        BUILDING_TYPES.BARRACKS, // 4
        BUILDING_TYPES.WALL, // 2
        BUILDING_TYPES.WALL, // 3
        BUILDING_TYPES.FARM, // 9
        BUILDING_TYPES.FARM, // 10
        BUILDING_TYPES.BARRACKS, // 5
        BUILDING_TYPES.WAREHOUSE, // 11
        BUILDING_TYPES.FARM, // 11
        BUILDING_TYPES.BARRACKS, // 6
        BUILDING_TYPES.WAREHOUSE, // 12
        BUILDING_TYPES.FARM, // 12
        BUILDING_TYPES.BARRACKS, // 7
        BUILDING_TYPES.WAREHOUSE, // 13
        BUILDING_TYPES.FARM, // 13
        BUILDING_TYPES.WALL, // 4
        BUILDING_TYPES.WALL, // 5
        BUILDING_TYPES.WALL, // 6
        BUILDING_TYPES.MARKET, // 2
        BUILDING_TYPES.MARKET, // 3
        BUILDING_TYPES.MARKET, // 4
        BUILDING_TYPES.BARRACKS, // 8
        BUILDING_TYPES.BARRACKS, // 9
        BUILDING_TYPES.HEADQUARTER, // 7
        BUILDING_TYPES.HEADQUARTER, // 8
        BUILDING_TYPES.TAVERN, // 1
        BUILDING_TYPES.TAVERN, // 2
        BUILDING_TYPES.TAVERN, // 3
        BUILDING_TYPES.RALLY_POINT, // 3
        BUILDING_TYPES.BARRACKS, // 10
        BUILDING_TYPES.BARRACKS, // 11
        BUILDING_TYPES.WAREHOUSE, // 14
        BUILDING_TYPES.FARM, // 14
        BUILDING_TYPES.WAREHOUSE, // 15
        BUILDING_TYPES.FARM, // 15
        BUILDING_TYPES.BARRACKS, // 12
        BUILDING_TYPES.BARRACKS, // 13
        BUILDING_TYPES.STATUE, // 2
        BUILDING_TYPES.STATUE, // 3
        BUILDING_TYPES.WALL, // 7
        BUILDING_TYPES.WALL, // 8
        BUILDING_TYPES.HEADQUARTER, // 9
        BUILDING_TYPES.HEADQUARTER, // 10
        BUILDING_TYPES.WAREHOUSE, // 16
        BUILDING_TYPES.FARM, // 16
        BUILDING_TYPES.FARM, // 17
        BUILDING_TYPES.IRON_MINE, // 13
        BUILDING_TYPES.IRON_MINE, // 14
        BUILDING_TYPES.IRON_MINE, // 15
        BUILDING_TYPES.WAREHOUSE, // 17
        BUILDING_TYPES.BARRACKS, // 14
        BUILDING_TYPES.BARRACKS, // 15
        BUILDING_TYPES.WAREHOUSE, // 18
        BUILDING_TYPES.FARM, // 18
        BUILDING_TYPES.WALL, // 9
        BUILDING_TYPES.WALL, // 10
        BUILDING_TYPES.TAVERN, // 4
        BUILDING_TYPES.TAVERN, // 5
        BUILDING_TYPES.TAVERN, // 6
        BUILDING_TYPES.MARKET, // 5
        BUILDING_TYPES.MARKET, // 6
        BUILDING_TYPES.MARKET, // 7
        BUILDING_TYPES.WAREHOUSE, // 19
        BUILDING_TYPES.FARM, // 19
        BUILDING_TYPES.WAREHOUSE, // 20
        BUILDING_TYPES.FARM, // 20
        BUILDING_TYPES.WAREHOUSE, // 21
        BUILDING_TYPES.FARM, // 21
        BUILDING_TYPES.IRON_MINE, // 16
        BUILDING_TYPES.IRON_MINE, // 17
        BUILDING_TYPES.IRON_MINE, // 18
        BUILDING_TYPES.RALLY_POINT, // 4
        BUILDING_TYPES.BARRACKS, // 16
        BUILDING_TYPES.BARRACKS, // 17
        BUILDING_TYPES.FARM, // 22
        BUILDING_TYPES.FARM, // 23
        BUILDING_TYPES.FARM, // 24
        BUILDING_TYPES.FARM, // 25
        BUILDING_TYPES.WAREHOUSE, // 22
        BUILDING_TYPES.WAREHOUSE, // 23
        BUILDING_TYPES.HEADQUARTER, // 11
        BUILDING_TYPES.HEADQUARTER, // 12
        BUILDING_TYPES.STATUE, // 4
        BUILDING_TYPES.STATUE, // 5
        BUILDING_TYPES.FARM, // 26
        BUILDING_TYPES.BARRACKS, // 18
        BUILDING_TYPES.HEADQUARTER, // 14
        BUILDING_TYPES.HEADQUARTER, // 15
        BUILDING_TYPES.FARM, // 27
        BUILDING_TYPES.BARRACKS, // 19
        BUILDING_TYPES.HEADQUARTER, // 15
        BUILDING_TYPES.HEADQUARTER, // 16
        BUILDING_TYPES.BARRACKS, // 20
        BUILDING_TYPES.HEADQUARTER, // 17
        BUILDING_TYPES.HEADQUARTER, // 18
        BUILDING_TYPES.HEADQUARTER, // 19
        BUILDING_TYPES.HEADQUARTER, // 20
        BUILDING_TYPES.ACADEMY, // 1
        BUILDING_TYPES.HEADQUARTER, // 21
        BUILDING_TYPES.HEADQUARTER, // 22
        BUILDING_TYPES.HEADQUARTER, // 23
        BUILDING_TYPES.HEADQUARTER, // 24
        BUILDING_TYPES.HEADQUARTER, // 25
        BUILDING_TYPES.PRECEPTORY, // 1
        BUILDING_TYPES.FARM, // 28
        BUILDING_TYPES.WAREHOUSE, // 23
        BUILDING_TYPES.WAREHOUSE, // 24
        BUILDING_TYPES.WAREHOUSE, // 25
        BUILDING_TYPES.MARKET, // 8
        BUILDING_TYPES.MARKET, // 9
        BUILDING_TYPES.MARKET, // 10
        BUILDING_TYPES.TIMBER_CAMP, // 13
        BUILDING_TYPES.CLAY_PIT, // 13
        BUILDING_TYPES.IRON_MINE, // 19
        BUILDING_TYPES.TIMBER_CAMP, // 14
        BUILDING_TYPES.CLAY_PIT, // 14
        BUILDING_TYPES.TIMBER_CAMP, // 15
        BUILDING_TYPES.CLAY_PIT, // 15
        BUILDING_TYPES.TIMBER_CAMP, // 16
        BUILDING_TYPES.TIMBER_CAMP, // 17
        BUILDING_TYPES.WALL, // 11
        BUILDING_TYPES.WALL, // 12
        BUILDING_TYPES.MARKET, // 11
        BUILDING_TYPES.MARKET, // 12
        BUILDING_TYPES.MARKET, // 13
        BUILDING_TYPES.TIMBER_CAMP, // 18
        BUILDING_TYPES.CLAY_PIT, // 16
        BUILDING_TYPES.TIMBER_CAMP, // 19
        BUILDING_TYPES.CLAY_PIT, // 17
        BUILDING_TYPES.TAVERN, // 7
        BUILDING_TYPES.TAVERN, // 8
        BUILDING_TYPES.TAVERN, // 9
        BUILDING_TYPES.WALL, // 13
        BUILDING_TYPES.WALL, // 14
        BUILDING_TYPES.TIMBER_CAMP, // 20
        BUILDING_TYPES.CLAY_PIT, // 18
        BUILDING_TYPES.IRON_MINE, // 20
        BUILDING_TYPES.TIMBER_CAMP, // 21
        BUILDING_TYPES.CLAY_PIT, // 19
        BUILDING_TYPES.IRON_MINE, // 21
        BUILDING_TYPES.BARRACKS, // 21
        BUILDING_TYPES.BARRACKS, // 22
        BUILDING_TYPES.BARRACKS, // 23
        BUILDING_TYPES.FARM, // 29
        BUILDING_TYPES.WAREHOUSE, // 26
        BUILDING_TYPES.WAREHOUSE, // 27
        BUILDING_TYPES.TAVERN, // 10
        BUILDING_TYPES.TAVERN, // 11
        BUILDING_TYPES.TAVERN, // 12
        BUILDING_TYPES.TIMBER_CAMP, // 22
        BUILDING_TYPES.CLAY_PIT, // 20
        BUILDING_TYPES.IRON_MINE, // 22
        BUILDING_TYPES.CLAY_PIT, // 21
        BUILDING_TYPES.CLAY_PIT, // 22
        BUILDING_TYPES.BARRACKS, // 24
        BUILDING_TYPES.BARRACKS, // 25
        BUILDING_TYPES.FARM, // 30
        BUILDING_TYPES.WAREHOUSE, // 28
        BUILDING_TYPES.WAREHOUSE, // 29
        BUILDING_TYPES.WALL, // 15
        BUILDING_TYPES.WALL, // 16
        BUILDING_TYPES.WALL, // 17
        BUILDING_TYPES.WALL, // 18
        BUILDING_TYPES.TAVERN, // 13
        BUILDING_TYPES.TAVERN, // 14
        BUILDING_TYPES.RALLY_POINT, // 5
        BUILDING_TYPES.WALL, // 19
        BUILDING_TYPES.WALL, // 20
    ]
    defaultSequences['Komturia'] = [
        BUILDING_TYPES.HEADQUARTER, // 21
        BUILDING_TYPES.HEADQUARTER, // 22
        BUILDING_TYPES.HEADQUARTER, // 23
        BUILDING_TYPES.HEADQUARTER, // 24
        BUILDING_TYPES.HEADQUARTER, // 25
        BUILDING_TYPES.HEADQUARTER, // 21
        BUILDING_TYPES.HEADQUARTER, // 22
        BUILDING_TYPES.HEADQUARTER, // 23
        BUILDING_TYPES.HEADQUARTER, // 24
        BUILDING_TYPES.HEADQUARTER, // 25
        BUILDING_TYPES.HEADQUARTER, // 21
        BUILDING_TYPES.HEADQUARTER, // 22
        BUILDING_TYPES.HEADQUARTER, // 23
        BUILDING_TYPES.HEADQUARTER, // 24
        BUILDING_TYPES.HEADQUARTER, // 25
        BUILDING_TYPES.HEADQUARTER, // 21
        BUILDING_TYPES.HEADQUARTER, // 22
        BUILDING_TYPES.HEADQUARTER, // 23
        BUILDING_TYPES.HEADQUARTER, // 24
        BUILDING_TYPES.HEADQUARTER, // 25
        BUILDING_TYPES.HEADQUARTER, // 21
        BUILDING_TYPES.HEADQUARTER, // 22
        BUILDING_TYPES.HEADQUARTER, // 23
        BUILDING_TYPES.HEADQUARTER, // 24
        BUILDING_TYPES.HEADQUARTER, // 25
        BUILDING_TYPES.PRECEPTORY, // 1
        BUILDING_TYPES.PRECEPTORY, // 2
        BUILDING_TYPES.PRECEPTORY, // 3
        BUILDING_TYPES.PRECEPTORY, // 4
        BUILDING_TYPES.PRECEPTORY, // 5
        BUILDING_TYPES.PRECEPTORY, // 6
        BUILDING_TYPES.PRECEPTORY, // 7
        BUILDING_TYPES.PRECEPTORY, // 8
        BUILDING_TYPES.PRECEPTORY, // 9
        BUILDING_TYPES.PRECEPTORY // 10
    ]
    defaultSequences['Rynek'] = [
        BUILDING_TYPES.MARKET, // 14
        BUILDING_TYPES.MARKET, // 14
        BUILDING_TYPES.MARKET, // 15
        BUILDING_TYPES.MARKET, // 16
        BUILDING_TYPES.MARKET, // 17
        BUILDING_TYPES.MARKET, // 18
        BUILDING_TYPES.MARKET, // 19
        BUILDING_TYPES.MARKET, // 20
        BUILDING_TYPES.MARKET, // 21
        BUILDING_TYPES.MARKET, // 22
        BUILDING_TYPES.MARKET, // 23
        BUILDING_TYPES.MARKET, // 24
        BUILDING_TYPES.MARKET, // 25
        BUILDING_TYPES.MARKET, // 14
        BUILDING_TYPES.MARKET, // 15
        BUILDING_TYPES.MARKET, // 16
        BUILDING_TYPES.MARKET, // 17
        BUILDING_TYPES.MARKET, // 18
        BUILDING_TYPES.MARKET, // 19
        BUILDING_TYPES.MARKET, // 20
        BUILDING_TYPES.MARKET, // 21
        BUILDING_TYPES.MARKET, // 22
        BUILDING_TYPES.MARKET, // 23
        BUILDING_TYPES.MARKET, // 24
        BUILDING_TYPES.MARKET, // 25
    ]
    defaultSequences['Koszary'] = [
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS
    ]
    defaultSequences['Szpital'] = [
        BUILDING_TYPES.HOSPITAL, // 1
        BUILDING_TYPES.HOSPITAL, // 2
        BUILDING_TYPES.HOSPITAL, // 3
        BUILDING_TYPES.HOSPITAL, // 4
        BUILDING_TYPES.HOSPITAL, // 5
        BUILDING_TYPES.HOSPITAL, // 6
        BUILDING_TYPES.HOSPITAL, // 7
        BUILDING_TYPES.HOSPITAL, // 8
        BUILDING_TYPES.HOSPITAL, // 9
        BUILDING_TYPES.HOSPITAL // 10
    ]
    defaultSequences['FARM-K'] = [
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.HEADQUARTER,
        BUILDING_TYPES.ACADEMY,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.BARRACKS,
        BUILDING_TYPES.FARM,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE
    ]
    defaultSequences['Eko'] = [
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.WAREHOUSE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE,
        BUILDING_TYPES.TIMBER_CAMP,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.CLAY_PIT,
        BUILDING_TYPES.IRON_MINE
    ]
    return parseSequences(defaultSequences)
})
define('two/builderQueue/events', [], function () {
    angular.extend(eventTypeProvider, {
        BUILDER_QUEUE_JOB_STARTED: 'builder_queue_job_started',
        BUILDER_QUEUE_START: 'builder_queue_start',
        BUILDER_QUEUE_STOP: 'builder_queue_stop',
        BUILDER_QUEUE_UNKNOWN_SETTING: 'builder_queue_settings_unknown_setting',
        BUILDER_QUEUE_CLEAR_LOGS: 'builder_queue_clear_logs',
        BUILDER_QUEUE_BUILDING_SEQUENCES_UPDATED: 'builder_queue_building_orders_updated',
        BUILDER_QUEUE_BUILDING_SEQUENCES_ADDED: 'builder_queue_building_orders_added',
        BUILDER_QUEUE_BUILDING_SEQUENCES_REMOVED: 'builder_queue_building_orders_removed',
        BUILDER_QUEUE_SETTINGS_CHANGE: 'builder_queue_settings_change',
        BUILDER_QUEUE_NO_SEQUENCES: 'builder_queue_no_sequences',
        COMMAND_QUEUE_ADD_INVALID_OFFICER: 'command_queue_add_invalid_officer',
        COMMAND_QUEUE_ADD_RELOCATE_DISABLED: 'command_queue_add_relocate_disabled'
    })
})
define('two/builderQueue/ui', [
    'two/ui',
    'two/builderQueue',
    'two/utils',
    'two/ready',
    'two/Settings',
    'two/builderQueue/settings',
    'two/builderQueue/settings/map',
    'two/builderQueue/sequenceStatus',
    'conf/buildingTypes',
    'two/EventScope',
    'queues/EventQueue',
    'helper/time'
], function(
    interfaceOverflow,
    builderQueue,
    utils,
    ready,
    Settings,
    SETTINGS,
    SETTINGS_MAP,
    SEQUENCE_STATUS,
    BUILDING_TYPES,
    EventScope,
    eventQueue,
    timeHelper
) {
    let $scope
    let $button
    let groupList = modelDataService.getGroupList()
    let buildingsLevelPoints = {}
    let running = false
    let gameDataBuildings
    let editorView = {
        sequencesAvail: true,
        modal: {}
    }
    let settings
    let settingsView = {
        sequencesAvail: true
    }
    let logsView = {}
    const TAB_TYPES = {
        SETTINGS: 'settings',
        SEQUENCES: 'sequences',
        LOGS: 'logs'
    }
    let villagesInfo = {}
    let villagesLabel = {}
    let unsavedChanges = false
    let oldCloseWindow
    let ignoreInputChange = false
    const loadVillageInfo = function(villageId) {
        if (villagesInfo[villageId]) {
            return villagesInfo[villageId]
        }
        villagesInfo[villageId] = true
        villagesLabel[villageId] = 'ŁADOWANIE...'
        socketService.emit(routeProvider.MAP_GET_VILLAGE_DETAILS, {
            my_village_id: modelDataService.getSelectedVillage().getId(),
            village_id: villageId,
            num_reports: 1
        }, function(data) {
            villagesInfo[villageId] = {
                x: data.village_x,
                y: data.village_y,
                name: data.village_name,
                last_report: data.last_reports[0]
            }
            villagesLabel[villageId] = `${data.village_name} (${data.village_x}|${data.village_y})`
        })
    }
    const buildingLevelReached = function(building, level) {
        const buildingData = modelDataService.getSelectedVillage().getBuildingData()
        return buildingData.getBuildingLevel(building) >= level
    }
    const buildingLevelProgress = function(building, level) {
        const queue = modelDataService.getSelectedVillage().getBuildingQueue().getQueue()
        let progress = false
        queue.some(function(job) {
            if (job.building === building && job.level === level) {
                return progress = true
            }
        })
        return progress
    }
    const getLevelScale = function(factor, base, level) {
        return level ? parseInt(Math.round(factor * Math.pow(base, level - 1)), 10) : 0
    }
    const moveArrayItem = function(obj, oldIndex, newIndex) {
        if (newIndex >= obj.length) {
            let i = newIndex - obj.length + 1
            while (i--) {
                obj.push(undefined)
            }
        }
        obj.splice(newIndex, 0, obj.splice(oldIndex, 1)[0])
    }
    const parseBuildingSequence = function(sequence) {
        return sequence.map(function(item) {
            return item.building
        })
    }
    const createBuildingSequence = function(sequenceId, sequence) {
        const status = builderQueue.addBuildingSequence(sequenceId, sequence)
        switch (status) {
            case SEQUENCE_STATUS.SEQUENCE_SAVED: {
                return true
            }
            case SEQUENCE_STATUS.SEQUENCE_EXISTS: {
                utils.notif('error', $filter('i18n')('error_sequence_exists', $rootScope.loc.ale, 'builder_queue'))
                return false
            }
            case SEQUENCE_STATUS.SEQUENCE_INVALID: {
                utils.notif('error', $filter('i18n')('error_sequence_invalid', $rootScope.loc.ale, 'builder_queue'))
                return false
            }
        }
    }
    const selectSome = function(obj) {
        for (let i in obj) {
            if (hasOwn.call(obj, i)) {
                return i
            }
        }
        return false
    }
    settingsView.generateSequences = function() {
        const sequences = settings.get(SETTINGS.BUILDING_SEQUENCES)
        const sequencesAvail = Object.keys(sequences).length
        settingsView.sequencesAvail = sequencesAvail
        if (!sequencesAvail) {
            return false
        }
        settingsView.generateBuildingSequence()
        settingsView.generateBuildingSequenceFinal()
        settingsView.updateVisibleBuildingSequence()
    }
    settingsView.generateBuildingSequence = function() {
        const sequenceId = $scope.settings[SETTINGS.ACTIVE_SEQUENCE].value
        const buildingSequenceRaw = $scope.settings[SETTINGS.BUILDING_SEQUENCES][sequenceId]
        const buildingData = modelDataService.getGameData().getBuildings()
        let buildingLevels = {}
        settingsView.sequencesAvail = !!buildingSequenceRaw
        if (!settingsView.sequencesAvail) {
            return false
        }
        for (let building in BUILDING_TYPES) {
            buildingLevels[BUILDING_TYPES[building]] = 0
        }
        settingsView.buildingSequence = buildingSequenceRaw.map(function(building) {
            let level = ++buildingLevels[building]
            let price = buildingData[building].individual_level_costs[level]
            let state = 'not-reached'
            if (buildingLevelReached(building, level)) {
                state = 'reached'
            } else if (buildingLevelProgress(building, level)) {
                state = 'progress'
            }
            return {
                level: level,
                price: buildingData[building].individual_level_costs[level],
                building: building,
                duration: timeHelper.readableSeconds(price.build_time),
                levelPoints: buildingsLevelPoints[building][level - 1],
                state: state
            }
        })
    }
    settingsView.generateBuildingSequenceFinal = function(_sequenceId) {
        const selectedSequence = $scope.settings[SETTINGS.ACTIVE_SEQUENCE].value
        const sequenceBuildings = $scope.settings[SETTINGS.BUILDING_SEQUENCES][_sequenceId || selectedSequence]
        let sequenceObj = {}
        let sequence = []
        for (let building in gameDataBuildings) {
            sequenceObj[building] = {
                level: 0,
                order: gameDataBuildings[building].order,
                resources: {
                    wood: 0,
                    clay: 0,
                    iron: 0,
                    food: 0
                },
                points: 0,
                build_time: 0
            }
        }
        sequenceBuildings.forEach(function(building) {
            let level = ++sequenceObj[building].level
            let costs = gameDataBuildings[building].individual_level_costs[level]
            sequenceObj[building].resources.wood += parseInt(costs.wood, 10)
            sequenceObj[building].resources.clay += parseInt(costs.clay, 10)
            sequenceObj[building].resources.iron += parseInt(costs.iron, 10)
            sequenceObj[building].resources.food += parseInt(costs.food, 10)
            sequenceObj[building].build_time += parseInt(costs.build_time, 10)
            sequenceObj[building].points += buildingsLevelPoints[building][level - 1]
        })
        for (let building in sequenceObj) {
            if (sequenceObj[building].level !== 0) {
                sequence.push({
                    building: building,
                    level: sequenceObj[building].level,
                    order: sequenceObj[building].order,
                    resources: sequenceObj[building].resources,
                    points: sequenceObj[building].points,
                    build_time: sequenceObj[building].build_time
                })
            }
        }
        settingsView.buildingSequenceFinal = sequence
    }
    settingsView.updateVisibleBuildingSequence = function() {
        const offset = $scope.pagination.buildingSequence.offset
        const limit = $scope.pagination.buildingSequence.limit
        settingsView.visibleBuildingSequence = settingsView.buildingSequence.slice(offset, offset + limit)
        $scope.pagination.buildingSequence.count = settingsView.buildingSequence.length
    }
    settingsView.generateBuildingsLevelPoints = function() {
        const $gameData = modelDataService.getGameData()
        let buildingTotalPoints
        for (let buildingName in $gameData.data.buildings) {
            let buildingData = $gameData.getBuildingDataForBuilding(buildingName)
            buildingTotalPoints = 0
            buildingsLevelPoints[buildingName] = []
            for (let level = 1; level <= buildingData.max_level; level++) {
                let currentLevelPoints = getLevelScale(buildingData.points, buildingData.points_factor, level)
                let levelPoints = currentLevelPoints - buildingTotalPoints
                buildingTotalPoints += levelPoints
                buildingsLevelPoints[buildingName].push(levelPoints)
            }
        }
    }
    editorView.moveUp = function() {
        let copy = angular.copy(editorView.buildingSequence)
        let changed = false
        for (let i = 0; i < copy.length; i++) {
            let item = copy[i]
            if (!item.checked) {
                continue
            }
            if (i === 0) {
                continue
            }
            if (copy[i - 1].checked) {
                continue
            }
            if (copy[i - 1].building === item.building) {
                copy[i - 1].level++
                item.level--
                changed = true
            }
            moveArrayItem(copy, i, i - 1)
        }
        editorView.buildingSequence = copy
        editorView.updateVisibleBuildingSequence()
        if (changed) {
            unsavedChanges = true
        }
    }
    editorView.moveDown = function() {
        let copy = angular.copy(editorView.buildingSequence)
        let changed = false
        for (let i = copy.length - 1; i >= 0; i--) {
            let item = copy[i]
            if (!item.checked) {
                continue
            }
            if (i === copy.length - 1) {
                continue
            }
            if (copy[i + 1].checked) {
                continue
            }
            if (copy[i + 1].building === item.building) {
                copy[i + 1].level--
                item.level++
                changed = true
            }
            moveArrayItem(copy, i, i + 1)
        }
        editorView.buildingSequence = copy
        editorView.updateVisibleBuildingSequence()
        if (changed) {
            unsavedChanges = true
        }
    }
    editorView.addBuilding = function(building, position, amount = 1) {
        const index = position - 1
        let newSequence = editorView.buildingSequence.slice()
        let buildingData = {
            level: null,
            building: building,
            checked: false
        }
        for (let i = 0; i < amount; i++) {
            newSequence.splice(index, 0, buildingData)
        }
        editorView.buildingSequence = editorView.updateLevels(newSequence, building)
        editorView.updateVisibleBuildingSequence()
        unsavedChanges = true
        return true
    }
    editorView.removeBuilding = function(index) {
        const building = editorView.buildingSequence[index].building
        editorView.buildingSequence.splice(index, 1)
        editorView.buildingSequence = editorView.updateLevels(editorView.buildingSequence, building)
        editorView.updateVisibleBuildingSequence()
        unsavedChanges = true
    }
    editorView.updateLevels = function(sequence, building) {
        let buildingLevel = 0
        let modifiedSequence = []
        for (let i = 0; i < sequence.length; i++) {
            let item = sequence[i]
            if (item.building === building) {
                if (buildingLevel < gameDataBuildings[building].max_level) {
                    modifiedSequence.push({
                        level: ++buildingLevel,
                        building: building,
                        checked: false
                    })
                }
            } else {
                modifiedSequence.push(item)
            }
        }
        return modifiedSequence
    }
    editorView.generateBuildingSequence = function() {
        const sequences = settings.get(SETTINGS.BUILDING_SEQUENCES)
        const sequencesAvail = Object.keys(sequences).length
        editorView.sequencesAvail = sequencesAvail
        if (!sequencesAvail) {
            return false
        }
        const sequenceId = editorView.selectedSequence.value
        const buildingSequenceRaw = sequences[sequenceId]
        let buildingLevels = {}
        for (let building in BUILDING_TYPES) {
            buildingLevels[BUILDING_TYPES[building]] = 0
        }
        editorView.buildingSequence = buildingSequenceRaw.map(function(building) {
            return {
                level: ++buildingLevels[building],
                building: building,
                checked: false
            }
        })
        editorView.updateVisibleBuildingSequence()
    }
    editorView.updateVisibleBuildingSequence = function() {
        const offset = $scope.pagination.buildingSequenceEditor.offset
        const limit = $scope.pagination.buildingSequenceEditor.limit
        editorView.visibleBuildingSequence = editorView.buildingSequence.slice(offset, offset + limit)
        $scope.pagination.buildingSequenceEditor.count = editorView.buildingSequence.length
    }
    editorView.updateBuildingSequence = function() {
        const selectedSequence = editorView.selectedSequence.value
        const parsedSequence = parseBuildingSequence(editorView.buildingSequence)
        const status = builderQueue.updateBuildingSequence(selectedSequence, parsedSequence)
        switch (status) {
            case SEQUENCE_STATUS.SEQUENCE_SAVED: {
                unsavedChanges = false
                break
            }
            case SEQUENCE_STATUS.SEQUENCE_NO_EXISTS: {
                utils.notif('error', $filter('i18n')('error_sequence_no_exits', $rootScope.loc.ale, 'builder_queue'))
                break
            }
            case SEQUENCE_STATUS.SEQUENCE_INVALID: {
                utils.notif('error', $filter('i18n')('error_sequence_invalid', $rootScope.loc.ale, 'builder_queue'))
                break
            }
        }
    }
    editorView.modal.removeSequence = function() {
        let modalScope = $rootScope.$new()
        modalScope.title = $filter('i18n')('title', $rootScope.loc.ale, 'builder_queue_remove_sequence_modal')
        modalScope.text = $filter('i18n')('text', $rootScope.loc.ale, 'builder_queue_remove_sequence_modal')
        modalScope.submitText = $filter('i18n')('remove', $rootScope.loc.ale, 'common')
        modalScope.cancelText = $filter('i18n')('cancel', $rootScope.loc.ale, 'common')
        modalScope.switchColors = true
        modalScope.submit = function() {
            modalScope.closeWindow()
            builderQueue.removeSequence(editorView.selectedSequence.value)
            unsavedChanges = false
        }
        modalScope.cancel = function() {
            modalScope.closeWindow()
        }
        windowManagerService.getModal('modal_attention', modalScope)
    }
    editorView.modal.addBuilding = function() {
        let modalScope = $rootScope.$new()
        modalScope.buildings = []
        modalScope.position = editorView.lastAddedIndex
        modalScope.indexLimit = editorView.buildingSequence.length + 1
        modalScope.buildingsData = modelDataService.getGameData().getBuildings()
        modalScope.amount = 1
        modalScope.selectedBuilding = {
            name: $filter('i18n')(editorView.lastAddedBuilding, $rootScope.loc.ale, 'building_names'),
            value: editorView.lastAddedBuilding
        }
        for (let building in gameDataBuildings) {
            modalScope.buildings.push({
                name: $filter('i18n')(building, $rootScope.loc.ale, 'building_names'),
                value: building
            })
        }
        modalScope.add = function() {
            const building = modalScope.selectedBuilding.value
            const position = modalScope.position
            const amount = modalScope.amount
            const buildingName = $filter('i18n')(building, $rootScope.loc.ale, 'building_names')
            const buildingLimit = gameDataBuildings[building].max_level
            editorView.lastAddedBuilding = building
            editorView.lastAddedIndex = position
            if (editorView.addBuilding(building, position, amount)) {
                modalScope.closeWindow()
                utils.notif('success', $filter('i18n')('add_building_success', $rootScope.loc.ale, 'builder_queue', buildingName, position))
            } else {
                utils.notif('error', $filter('i18n')('add_building_limit_exceeded', $rootScope.loc.ale, 'builder_queue', buildingName, buildingLimit))
            }
        }
        windowManagerService.getModal('!twoverflow_builder_queue_add_building_modal', modalScope)
    }
    editorView.modal.nameSequence = function() {
        const nameSequence = function() {
            let modalScope = $rootScope.$new()
            const selectedSequenceName = editorView.selectedSequence.name
            const selectedSequence = $scope.settings[SETTINGS.BUILDING_SEQUENCES][selectedSequenceName]
            modalScope.name = selectedSequenceName
            modalScope.submit = function() {
                if (modalScope.name.length < 3) {
                    utils.notif('error', $filter('i18n')('name_sequence_min_lenght', $rootScope.loc.ale, 'builder_queue'))
                    return false
                }
                if (createBuildingSequence(modalScope.name, selectedSequence)) {
                    modalScope.closeWindow()
                }
            }
            windowManagerService.getModal('!twoverflow_builder_queue_name_sequence_modal', modalScope)
        }
        if (unsavedChanges) {
            let modalScope = $rootScope.$new()
            modalScope.title = $filter('i18n')('clone_warn_changed_sequence_title', $rootScope.loc.ale, 'builder_queue')
            modalScope.text = $filter('i18n')('clone_warn_changed_sequence_text', $rootScope.loc.ale, 'builder_queue')
            modalScope.submitText = $filter('i18n')('clone', $rootScope.loc.ale, 'builder_queue')
            modalScope.cancelText = $filter('i18n')('cancel', $rootScope.loc.ale, 'common')
            modalScope.submit = function() {
                modalScope.closeWindow()
                nameSequence()
            }
            modalScope.cancel = function() {
                modalScope.closeWindow()
            }
            windowManagerService.getModal('modal_attention', modalScope)
        } else {
            nameSequence()
        }
    }
    logsView.updateVisibleLogs = function() {
        const offset = $scope.pagination.logs.offset
        const limit = $scope.pagination.logs.limit
        logsView.visibleLogs = logsView.logs.slice(offset, offset + limit)
        $scope.pagination.logs.count = logsView.logs.length
        logsView.visibleLogs.forEach(function(log) {
            if (log.villageId) {
                loadVillageInfo(log.villageId)
            }
        })
    }
    logsView.clearLogs = function() {
        builderQueue.clearLogs()
    }
    const createSequence = function() {
        let modalScope = $rootScope.$new()
        const initialSequence = [BUILDING_TYPES.HEADQUARTER]
        modalScope.name = ''
        modalScope.submit = function() {
            if (modalScope.name.length < 3) {
                utils.notif('error', $filter('i18n')('name_sequence_min_lenght', $rootScope.loc.ale, 'builder_queue'))
                return false
            }
            if (createBuildingSequence(modalScope.name, initialSequence)) {
                $scope.settings[SETTINGS.ACTIVE_SEQUENCE] = {
                    name: modalScope.name,
                    value: modalScope.name
                }
                $scope.settings[SETTINGS.BUILDING_SEQUENCES][modalScope.name] = initialSequence
                saveSettings()
                settingsView.selectedSequence = {
                    name: modalScope.name,
                    value: modalScope.name
                }
                editorView.selectedSequence = {
                    name: modalScope.name,
                    value: modalScope.name
                }
                settingsView.generateSequences()
                editorView.generateBuildingSequence()
                modalScope.closeWindow()
                selectTab(TAB_TYPES.SEQUENCES)
            }
        }
        windowManagerService.getModal('!twoverflow_builder_queue_name_sequence_modal', modalScope)
    }
    const selectTab = function(tabType) {
        $scope.selectedTab = tabType
    }
    const saveSettings = function() {
        settings.setAll(settings.decode($scope.settings))
        unsavedChanges = false
    }
    const switchBuilder = function() {
        if (builderQueue.isRunning()) {
            builderQueue.stop()
        } else {
            builderQueue.start()
        }
    }
    const confirmDiscardModal = function(onDiscard, onCancel) {
        let modalScope = $rootScope.$new()
        modalScope.title = $filter('i18n')('discard_changes_title', $rootScope.loc.ale, 'builder_queue')
        modalScope.text = $filter('i18n')('discard_changes_text', $rootScope.loc.ale, 'builder_queue')
        modalScope.submitText = $filter('i18n')('discard', $rootScope.loc.ale, 'common')
        modalScope.cancelText = $filter('i18n')('cancel', $rootScope.loc.ale, 'common')
        modalScope.switchColors = true
        modalScope.submit = function() {
            modalScope.closeWindow()
            onDiscard && onDiscard()
        }
        modalScope.cancel = function() {
            modalScope.closeWindow()
            onCancel && onCancel()
        }
        windowManagerService.getModal('modal_attention', modalScope)
    }
    const confirmCloseWindow = function() {
        if (unsavedChanges) {
            confirmDiscardModal(function onDiscard() {
                oldCloseWindow()
            })
        } else {
            oldCloseWindow()
        }
    }
    const eventHandlers = {
        updateGroups: function() {
            $scope.groups = Settings.encodeList(groupList.getGroups(), {
                type: 'groups',
                disabled: true
            })
        },
        updateSequences: function() {
            const sequences = settings.get(SETTINGS.BUILDING_SEQUENCES)
            $scope.sequences = Settings.encodeList(sequences, {
                type: 'keys',
                disabled: false
            })
        },
        generateBuildingSequences: function() {
            settingsView.generateSequences()
        },
        generateBuildingSequencesEditor: function() {
            editorView.generateBuildingSequence()
        },
        updateLogs: function() {
            $scope.logs = builderQueue.getLogs()
            logsView.updateVisibleLogs()
        },
        clearLogs: function() {
            utils.notif('success', $filter('i18n')('logs_cleared', $rootScope.loc.ale, 'builder_queue'))
            eventHandlers.updateLogs()
        },
        buildingSequenceUpdate: function(event, sequenceId) {
            const sequences = settings.get(SETTINGS.BUILDING_SEQUENCES)
            $scope.settings[SETTINGS.BUILDING_SEQUENCES][sequenceId] = sequences[sequenceId]
            if ($scope.settings[SETTINGS.ACTIVE_SEQUENCE].value === sequenceId) {
                settingsView.generateSequences()
            }
            utils.notif('success', $filter('i18n')('sequence_updated', $rootScope.loc.ale, 'builder_queue', sequenceId))
        },
        buildingSequenceAdd: function(event, sequenceId) {
            const sequences = settings.get(SETTINGS.BUILDING_SEQUENCES)
            $scope.settings[SETTINGS.BUILDING_SEQUENCES][sequenceId] = sequences[sequenceId]
            eventHandlers.updateSequences()
            utils.notif('success', $filter('i18n')('sequence_created', $rootScope.loc.ale, 'builder_queue', sequenceId))
        },
        buildingSequenceRemoved: function(event, sequenceId) {
            delete $scope.settings[SETTINGS.BUILDING_SEQUENCES][sequenceId]
            const substituteSequence = selectSome($scope.settings[SETTINGS.BUILDING_SEQUENCES])
            editorView.selectedSequence = {
                name: substituteSequence,
                value: substituteSequence
            }
            eventHandlers.updateSequences()
            editorView.generateBuildingSequence()
            if (settings.get(SETTINGS.ACTIVE_SEQUENCE) === sequenceId) {
                settings.set(SETTINGS.ACTIVE_SEQUENCE, substituteSequence, {
                    quiet: true
                })
                settingsView.generateSequences()
            }
            utils.notif('success', $filter('i18n')('sequence_removed', $rootScope.loc.ale, 'builder_queue', sequenceId))
        },
        saveSettings: function() {
            utils.notif('success', $filter('i18n')('settings_saved', $rootScope.loc.ale, 'builder_queue'))
        },
        started: function() {
            $scope.running = true
        },
        stopped: function() {
            $scope.running = false
        }
    }
    const init = function() {
        gameDataBuildings = modelDataService.getGameData().getBuildings()
        settingsView.generateBuildingsLevelPoints()
        settings = builderQueue.getSettings()
        $button = interfaceOverflow.addMenuButton2('Budowniczy', 20, $filter('i18n')('general.description', $rootScope.loc.ale, 'builder_queue'))
        $button.addEventListener('click', buildWindow)
        eventQueue.register(eventTypeProvider.BUILDER_QUEUE_START, function() {
            running = true
            $button.classList.remove('btn-orange')
            $button.classList.add('btn-red')
            utils.notif('success', $filter('i18n')('started', $rootScope.loc.ale, 'builder_queue'))
        })
        eventQueue.register(eventTypeProvider.BUILDER_QUEUE_STOP, function() {
            running = false
            $button.classList.remove('btn-red')
            $button.classList.add('btn-orange')
            utils.notif('success', $filter('i18n')('stopped', $rootScope.loc.ale, 'builder_queue'))
        })
        interfaceOverflow.addTemplate('twoverflow_builder_queue_window', `___builder_queue_html_main`)
        interfaceOverflow.addTemplate('twoverflow_builder_queue_add_building_modal', `___builder_queue_html_modal-add-building`)
        interfaceOverflow.addTemplate('twoverflow_builder_queue_name_sequence_modal', `___builder_queue_html_modal-name-sequence`)
        interfaceOverflow.addStyle('___builder_queue_css_style')
    }
    const buildWindow = function() {
        const activeSequence = settings.get(SETTINGS.ACTIVE_SEQUENCE)
        $scope = $rootScope.$new()
        $scope.selectedTab = TAB_TYPES.SETTINGS
        $scope.TAB_TYPES = TAB_TYPES
        $scope.SETTINGS = SETTINGS
        $scope.running = running
        $scope.pagination = {}
        $scope.settingsMap = settings.settingsMap
        $scope.villagesLabel = villagesLabel
        $scope.villagesInfo = villagesInfo
        $scope.editorView = editorView
        $scope.editorView.buildingSequence = {}
        $scope.editorView.visibleBuildingSequence = []
        $scope.editorView.selectedSequence = {
            name: activeSequence,
            value: activeSequence
        }
        $scope.editorView.lastAddedBuilding = BUILDING_TYPES.HEADQUARTER
        $scope.editorView.lastAddedIndex = 1
        $scope.settingsView = settingsView
        $scope.settingsView.buildingSequence = {}
        $scope.settingsView.buildingSequenceFinal = {}
        $scope.logsView = logsView
        $scope.logsView.logs = builderQueue.getLogs()
        // methods
        $scope.selectTab = selectTab
        $scope.switchBuilder = switchBuilder
        $scope.saveSettings = saveSettings
        $scope.createSequence = createSequence
        $scope.openVillageInfo = windowDisplayService.openVillageInfo
        settings.injectScope($scope)
        eventHandlers.updateGroups()
        eventHandlers.updateSequences()
        $scope.pagination.buildingSequence = {
            count: settingsView.buildingSequence.length,
            offset: 0,
            loader: settingsView.updateVisibleBuildingSequence,
            limit: storageService.getPaginationLimit()
        }
        $scope.pagination.buildingSequenceEditor = {
            count: editorView.buildingSequence.length,
            offset: 0,
            loader: editorView.updateVisibleBuildingSequence,
            limit: storageService.getPaginationLimit()
        }
        $scope.pagination.logs = {
            count: logsView.logs.length,
            offset: 0,
            loader: logsView.updateVisibleLogs,
            limit: storageService.getPaginationLimit()
        }
        logsView.updateVisibleLogs()
        settingsView.generateSequences()
        editorView.generateBuildingSequence()
        let eventScope = new EventScope('twoverflow_builder_queue_window')
        eventScope.register(eventTypeProvider.GROUPS_UPDATED, eventHandlers.updateGroups, true)
        eventScope.register(eventTypeProvider.GROUPS_CREATED, eventHandlers.updateGroups, true)
        eventScope.register(eventTypeProvider.GROUPS_DESTROYED, eventHandlers.updateGroups, true)
        eventScope.register(eventTypeProvider.VILLAGE_SELECTED_CHANGED, eventHandlers.generateBuildingSequences, true)
        eventScope.register(eventTypeProvider.BUILDING_UPGRADING, eventHandlers.generateBuildingSequences, true)
        eventScope.register(eventTypeProvider.BUILDING_LEVEL_CHANGED, eventHandlers.generateBuildingSequences, true)
        eventScope.register(eventTypeProvider.BUILDING_TEARING_DOWN, eventHandlers.generateBuildingSequences, true)
        eventScope.register(eventTypeProvider.VILLAGE_BUILDING_QUEUE_CHANGED, eventHandlers.generateBuildingSequences, true)
        eventScope.register(eventTypeProvider.BUILDER_QUEUE_JOB_STARTED, eventHandlers.updateLogs)
        eventScope.register(eventTypeProvider.BUILDER_QUEUE_CLEAR_LOGS, eventHandlers.clearLogs)
        eventScope.register(eventTypeProvider.BUILDER_QUEUE_BUILDING_SEQUENCES_UPDATED, eventHandlers.buildingSequenceUpdate)
        eventScope.register(eventTypeProvider.BUILDER_QUEUE_BUILDING_SEQUENCES_ADDED, eventHandlers.buildingSequenceAdd)
        eventScope.register(eventTypeProvider.BUILDER_QUEUE_BUILDING_SEQUENCES_REMOVED, eventHandlers.buildingSequenceRemoved)
        eventScope.register(eventTypeProvider.BUILDER_QUEUE_SETTINGS_CHANGE, eventHandlers.saveSettings)
        eventScope.register(eventTypeProvider.BUILDER_QUEUE_START, eventHandlers.started)
        eventScope.register(eventTypeProvider.BUILDER_QUEUE_STOP, eventHandlers.stopped)
        windowManagerService.getScreenWithInjectedScope('!twoverflow_builder_queue_window', $scope)
        oldCloseWindow = $scope.closeWindow
        $scope.closeWindow = confirmCloseWindow
        $scope.$watch('settings[SETTINGS.ACTIVE_SEQUENCE].value', function(newValue, oldValue) {
            if (newValue !== oldValue) {
                eventHandlers.generateBuildingSequences()
            }
        })
        $scope.$watch('editorView.selectedSequence.value', function(newValue, oldValue) {
            if (ignoreInputChange) {
                ignoreInputChange = false
                return
            }
            if (newValue !== oldValue) {
                if (unsavedChanges) {
                    confirmDiscardModal(function onDiscard() {
                        eventHandlers.generateBuildingSequencesEditor()
                        unsavedChanges = false
                    }, function onCancel() {
                        $scope.editorView.selectedSequence = {
                            name: oldValue,
                            value: oldValue
                        }
                        ignoreInputChange = true
                    })
                } else {
                    eventHandlers.generateBuildingSequencesEditor()
                }
            }
        })
    }
    return init
})
define('two/builderQueue/settings', [], function() {
    return {
        GROUP_VILLAGES: 'group_villages',
        ACTIVE_SEQUENCE: 'building_sequence',
        BUILDING_SEQUENCES: 'building_orders',
        PRESERVE_WOOD: 'preserve_wood',
        PRESERVE_CLAY: 'preserve_clay',
        PRESERVE_IRON: 'preserve_iron',
        PRIORIZE_FARM: 'priorize_farm'
    }
})
define('two/builderQueue/settings/updates', [], function() {
    return {
        ANALYSE: 'analyse'
    }
})
define('two/builderQueue/settings/map', [
    'two/builderQueue/defaultOrders',
    'two/builderQueue/settings',
    'two/builderQueue/settings/updates'
], function(
    DEFAULT_ORDERS,
    SETTINGS,
    UPDATES
) {
    return {
        [SETTINGS.GROUP_VILLAGES]: {
            default: false,
            inputType: 'select',
            disabledOption: true,
            type: 'groups',
            updates: [UPDATES.ANALYSE]
        },
        [SETTINGS.ACTIVE_SEQUENCE]: {
            default: 'Essential',
            inputType: 'select',
            updates: [UPDATES.ANALYSE]
        },
        [SETTINGS.BUILDING_SEQUENCES]: {
            default: DEFAULT_ORDERS,
            inputType: 'buildingOrder',
            updates: [UPDATES.ANALYSE]
        },
        [SETTINGS.PRESERVE_WOOD]: {
            default: 0,
            updates: [UPDATES.ANALYSE],
            inputType: 'number',
            min: 0,
            max: 600000
        },
        [SETTINGS.PRESERVE_CLAY]: {
            default: 0,
            updates: [UPDATES.ANALYSE],
            inputType: 'number',
            min: 0,
            max: 600000
        },
        [SETTINGS.PRESERVE_IRON]: {
            default: 0,
            updates: [UPDATES.ANALYSE],
            inputType: 'number',
            min: 0,
            max: 600000
        },
        [SETTINGS.PRIORIZE_FARM]: {
            default: true,
            inputType: 'checkbox',
            updates: [UPDATES.ANALYSE]
        }
    }
})
define('two/builderQueue/sequenceStatus', [], function () {
    return {
        SEQUENCE_NO_EXISTS: 'sequence_no_exists',
        SEQUENCE_EXISTS: 'sequence_exists',
        SEQUENCE_INVALID: 'sequence_invalid',
        SEQUENCE_SAVED: 'sequence_saved'
    }
})
require([
    'two/ready',
    'two/builderQueue',
    'two/builderQueue/ui',
    'two/builderQueue/events'
], function(
    ready,
    builderQueue,
    builderQueueInterface
) {
    if (builderQueue.isInitialized()) {
        return false
    }
    ready(function() {
        builderQueue.init()
        builderQueueInterface()
    })
})
define('two/commandQueue', [
    'two/utils',
    'two/commandQueue/types/dates',
    'two/commandQueue/types/events',
    'two/commandQueue/types/filters',
    'two/commandQueue/types/commands',
    'two/commandQueue/storageKeys',
    'two/commandQueue/errorCodes',
    'queues/EventQueue',
    'helper/time',
    'helper/math',
    'struct/MapData',
    'Lockr',
    'conf/buildingTypes',
    'conf/officerTypes',
    'conf/unitTypes'
], function (
    utils,
    DATE_TYPES,
    EVENT_CODES,
    FILTER_TYPES,
    COMMAND_TYPES,
    STORAGE_KEYS,
    ERROR_CODES,
    eventQueue,
    timeHelper,
    $math,
    mapData,
    Lockr,
    BUILDING_TYPES,
    OFFICER_TYPES,
    UNIT_TYPES
) {
    const CHECKS_PER_SECOND = 10
    const COMMAND_TYPE_LIST = Object.values(COMMAND_TYPES)
    const DATE_TYPE_LIST = Object.values(DATE_TYPES)
    const UNIT_TYPE_LIST = Object.values(UNIT_TYPES)
    const OFFICER_TYPE_LIST = Object.values(OFFICER_TYPES)
    const BUILDING_TYPE_LIST = Object.values(BUILDING_TYPES)
    let waitingCommands = []
    let waitingCommandsObject = {}
    let sentCommands = []
    let expiredCommands = []
    let running = false
    let timeOffset

    const commandFilters = {
        [FILTER_TYPES.SELECTED_VILLAGE]: function (command) {
            return command.origin.id === modelDataService.getSelectedVillage().getId()
        },
        [FILTER_TYPES.BARBARIAN_TARGET]: function (command) {
            return !command.target.character_id
        },
        [FILTER_TYPES.ALLOWED_TYPES]: function (command, options) {
            return options[FILTER_TYPES.ALLOWED_TYPES][command.type]
        },
        [FILTER_TYPES.ATTACK]: function (command) {
            return command.type !== COMMAND_TYPES.ATTACK
        },
        [FILTER_TYPES.SUPPORT]: function (command) {
            return command.type !== COMMAND_TYPES.SUPPORT
        },
        [FILTER_TYPES.RELOCATE]: function (command) {
            return command.type !== COMMAND_TYPES.RELOCATE
        },
        [FILTER_TYPES.TEXT_MATCH]: function (command, options) {
            let show = true
            const keywords = options[FILTER_TYPES.TEXT_MATCH].toLowerCase().split(/\W/)

            const searchString = [
                command.origin.name,
                command.origin.x + '|' + command.origin.y,
                command.origin.character_name || '',
                command.target.name,
                command.target.x + '|' + command.target.y,
                command.target.character_name || '',
                command.target.tribe_name || '',
                command.target.tribe_tag || ''
            ].join('').toLowerCase()

            keywords.some(function (keyword) {
                if (keyword.length && !searchString.includes(keyword)) {
                    show = false
                    return true
                }
            })

            return show
        }
    }

    const timeToSend = function (sendTime) {
        return sendTime < (timeHelper.gameTime() + timeOffset)
    }

    const sortWaitingQueue = function () {
        waitingCommands = waitingCommands.sort(function (a, b) {
            return a.sendTime - b.sendTime
        })
    }

    const pushWaitingCommand = function (command) {
        waitingCommands.push(command)
    }

    const pushCommandObject = function (command) {
        waitingCommandsObject[command.id] = command
    }

    const pushSentCommand = function (command) {
        sentCommands.push(command)
    }

    const pushExpiredCommand = function (command) {
        expiredCommands.push(command)
    }

    const storeWaitingQueue = function () {
        Lockr.set(STORAGE_KEYS.QUEUE_COMMANDS, waitingCommands)
    }

    const storeSentQueue = function () {
        Lockr.set(STORAGE_KEYS.QUEUE_SENT, sentCommands)
    }

    const storeExpiredQueue = function () {
        Lockr.set(STORAGE_KEYS.QUEUE_EXPIRED, expiredCommands)
    }

    const loadStoredCommands = function () {
        const storedQueue = Lockr.get(STORAGE_KEYS.QUEUE_COMMANDS, [], true)

        utils.each(storedQueue, function (command) {
            if (timeHelper.gameTime() > command.sendTime) {
                commandQueue.expireCommand(command, EVENT_CODES.TIME_LIMIT)
            } else {
                pushWaitingCommand(command)
                pushCommandObject(command)
            }
        })
    }
    
    

    const parseDynamicUnits = function (command) {
        const playerVillages = modelDataService.getVillages()
        const village = playerVillages[command.origin.id]

        if (!village) {
            return EVENT_CODES.NOT_OWN_VILLAGE
        }

        const villageUnits = village.unitInfo.units
        let parsedUnits = {}
        let error = false

        utils.each(command.units, function (amount, unit) {
            if (amount === '*') {
                amount = villageUnits[unit].available

                if (amount === 0) {
                    return
                }
            } else if (amount < 0) {
                amount = villageUnits[unit].available - Math.abs(amount)

                if (amount < 0) {
                    error = EVENT_CODES.NOT_ENOUGH_UNITS
                    return false
                }
            } else if (amount > 0) {
                if (amount > villageUnits[unit].available) {
                    error = EVENT_CODES.NOT_ENOUGH_UNITS
                    return false
                }
            }

            parsedUnits[unit] = amount
        })

        if (angular.equals({}, parsedUnits)) {
            error = EVENT_CODES.NOT_ENOUGH_UNITS
        }

        return error || parsedUnits
    }

    const listenCommands = function () {
        setInterval(function () {
            if (!waitingCommands.length) {
                return
            }

            waitingCommands.some(function (command) {
                if (timeToSend(command.sendTime)) {
                    if (running) {
                        commandQueue.sendCommand(command)
                    } else {
                        commandQueue.expireCommand(command, EVENT_CODES.TIME_LIMIT)
                    }
                } else {
                    return true
                }
            })
        }, 1000 / CHECKS_PER_SECOND)
    }

    const validAxisCoord = function (input) {
        return !isNaN(input) && input > 0 && input < 1000
    }

    const validCoords = function (input) {
        return hasOwn.call(input, 'x') && hasOwn.call(input, 'y') && validAxisCoord(input.x) && validAxisCoord(input.y)
    }

    let commandQueue = {
        initialized: false
    }

    commandQueue.init = function () {
        timeOffset = utils.getTimeOffset()
        commandQueue.initialized = true
        sentCommands = Lockr.get(STORAGE_KEYS.QUEUE_SENT, [], true)
        expiredCommands = Lockr.get(STORAGE_KEYS.QUEUE_EXPIRED, [], true)

        loadStoredCommands()
        listenCommands()

        window.addEventListener('beforeunload', function (event) {
            if (running && waitingCommands.length) {
                event.returnValue = true
            }
        })
    }

    commandQueue.sendCommand = function (command) {
        const units = parseDynamicUnits(command)

        // units === EVENT_CODES.*
        if (typeof units === 'string') {
            return commandQueue.expireCommand(command, units)
        }

        command.units = units

        socketService.emit(routeProvider.SEND_CUSTOM_ARMY, {
            start_village: command.origin.id,
            target_village: command.target.id,
            type: command.type,
            units: command.units,
            icon: 0,
            officers: command.officers,
            catapult_target: command.catapultTarget
        })

        pushSentCommand(command)
        storeSentQueue()

        commandQueue.removeCommand(command, EVENT_CODES.COMMAND_SENT)
        eventQueue.trigger(eventTypeProvider.COMMAND_QUEUE_SEND, command)
    }

    commandQueue.expireCommand = function (command, eventCode) {
        pushExpiredCommand(command)
        storeExpiredQueue()

        commandQueue.removeCommand(command, eventCode)
    }

    commandQueue.addCommand = function (origin, target, date, dateType, units, officers, commandType, catapultTarget) {
        let parsedUnits = {}
        let parsedOfficers = {}

        return new Promise(function (resolve, reject) {
            if (!validCoords(origin)) {
                return reject(ERROR_CODES.INVALID_ORIGIN)
            }

            if (!validCoords(target)) {
                return reject(ERROR_CODES.INVALID_TARGET)
            }

            if (!utils.isValidDateTime(date)) {
                return reject(ERROR_CODES.INVALID_DATE)
            }

            if (angular.isObject(units)) {
                const validUnitType = utils.each(units, function (amount, unitName) {
                    if (!UNIT_TYPE_LIST.includes(unitName)) {
                        return false
                    }

                    amount = isNaN(amount) ? amount : parseInt(amount, 10)

                    if (amount === '*' || typeof amount === 'number' && amount !== 0) {
                        parsedUnits[unitName] = amount
                    }
                })

                if (!validUnitType) {
                    return reject(ERROR_CODES.INVALID_UNIT_TYPE)
                }
            }

            if (angular.equals(parsedUnits, {})) {
                return reject(ERROR_CODES.NO_UNITS)
            }

            if (angular.isObject(officers)) {
                const validOfficerType = utils.each(officers, function (status, officerName) {
                    if (!OFFICER_TYPE_LIST.includes(officerName)) {
                        return false
                    }

                    if (officers[officerName]) {
                        parsedOfficers[officerName] = true
                    }
                })

                if (!validOfficerType) {
                    return reject(ERROR_CODES.INVALID_OFFICER_TYPE)
                }
            }

            if (!COMMAND_TYPE_LIST.includes(commandType)) {
                return reject(ERROR_CODES.INVALID_COMMAND_TYPE)
            }

            if (commandType === COMMAND_TYPES.RELOCATE && !modelDataService.getWorldConfig().isRelocateUnitsEnabled()) {
                return reject(ERROR_CODES.RELOCATE_DISABLED)
            }

            if (commandType === COMMAND_TYPES.ATTACK && parsedOfficers[OFFICER_TYPES.SUPPORTER]) {
                delete parsedOfficers[OFFICER_TYPES.SUPPORTER]
            }

            if (typeof catapultTarget === 'string' && !BUILDING_TYPE_LIST.includes(catapultTarget)) {
                return reject(ERROR_CODES.INVALID_CATAPULT_TARGET)
            }

            if (commandType === COMMAND_TYPES.ATTACK && parsedUnits[UNIT_TYPES.CATAPULT]) {
                catapultTarget = catapultTarget || BUILDING_TYPES.HEADQUARTER
            } else {
                catapultTarget = false
            }

            if (!DATE_TYPE_LIST.includes(dateType)) {
                return reject(ERROR_CODES.INVALID_DATE_TYPE)
            }

            Promise.all([
                new Promise((resolve) => mapData.loadTownDataAsync(origin.x, origin.y, 1, 1, resolve)),
                new Promise((resolve) => mapData.loadTownDataAsync(target.x, target.y, 1, 1, resolve))
            ]).then(function (villages) {
                origin = villages[0]
                target = villages[1]

                if (!origin) {
                    return reject(ERROR_CODES.INVALID_ORIGIN)
                }

                if (!target) {
                    return reject(ERROR_CODES.INVALID_TARGET)
                }

                const inputTime = utils.getTimeFromString(date)
                const travelTime = utils.getTravelTime(origin, target, parsedUnits, commandType, parsedOfficers, true)
                const sendTime = dateType === DATE_TYPES.ARRIVE ? (inputTime - travelTime) : inputTime
                const arriveTime = dateType === DATE_TYPES.ARRIVE ? inputTime : (inputTime + travelTime)

                if (timeToSend(sendTime)) {
                    return reject(ERROR_CODES.ALREADY_SENT)
                }

                const command = {
                    id: utils.guid(),
                    travelTime: travelTime,
                    arriveTime: arriveTime,
                    sendTime: sendTime,
                    origin: origin,
                    target: target,
                    date: date,
                    dateType: dateType,
                    units: parsedUnits,
                    officers: parsedOfficers,
                    type: commandType,
                    catapultTarget: catapultTarget,
                    countdown: sendTime - timeHelper.gameTime(),
                }

                pushWaitingCommand(command)
                pushCommandObject(command)
                sortWaitingQueue()
                storeWaitingQueue()
                resolve(command)
            })
        })
    }

    commandQueue.removeCommand = function (command, eventCode) {
        delete waitingCommandsObject[command.id]

        const removed = waitingCommands.some(function (waitingCommand, index) {
            if (waitingCommand.id == command.id) {
                waitingCommands.splice(index, 1)
                storeWaitingQueue()
                return true
            }
        })

        if (removed) {
            switch (eventCode) {
                case EVENT_CODES.TIME_LIMIT: {
                    eventQueue.trigger(eventTypeProvider.COMMAND_QUEUE_SEND_TIME_LIMIT, command)
                    break
                }
                case EVENT_CODES.NOT_OWN_VILLAGE: {
                    eventQueue.trigger(eventTypeProvider.COMMAND_QUEUE_SEND_NOT_OWN_VILLAGE, command)
                    break
                }
                case EVENT_CODES.NOT_ENOUGH_UNITS: {
                    eventQueue.trigger(eventTypeProvider.COMMAND_QUEUE_SEND_NO_UNITS_ENOUGH, command)
                    break
                }
                case EVENT_CODES.COMMAND_REMOVED: {
                    eventQueue.trigger(eventTypeProvider.COMMAND_QUEUE_REMOVE, command)
                    break
                }
            }
        } else {
            eventQueue.trigger(eventTypeProvider.COMMAND_QUEUE_REMOVE_ERROR, command)
        }

        return removed
    }

    commandQueue.clearWaitings = function () {
        Lockr.set(STORAGE_KEYS.QUEUE_COMMANDS, [])
        waitingCommands = []
        waitingCommandsObject = {}
    }

    commandQueue.clearRegisters = function () {
        Lockr.set(STORAGE_KEYS.QUEUE_EXPIRED, [])
        Lockr.set(STORAGE_KEYS.QUEUE_SENT, [])
        expiredCommands = []
        sentCommands = []
    }

    commandQueue.start = function (disableNotif) {
        running = true
        eventQueue.trigger(eventTypeProvider.COMMAND_QUEUE_START, {
            disableNotif: !!disableNotif
        })
    }

    commandQueue.stop = function () {
        running = false
        eventQueue.trigger(eventTypeProvider.COMMAND_QUEUE_STOP)
    }

    commandQueue.isRunning = function () {
        return running
    }

    commandQueue.getWaitingCommands = function () {
        return waitingCommands
    }

    commandQueue.getWaitingCommandsObject = function () {
        return waitingCommandsObject
    }

    commandQueue.getSentCommands = function () {
        return sentCommands
    }

    commandQueue.getExpiredCommands = function () {
        return expiredCommands
    }

    /**
     * @param {Array} _deep - recursive command list
     */
    commandQueue.filterCommands = function (filterId, filterArgs, _deep) {
        const filter = commandFilters[filterId]
        const commands = _deep || waitingCommands

        return commands.filter(function (command) {
            return filter(command, filterArgs)
        })
    }

    return commandQueue
})

define('two/commandQueue/events', [], function () {
    angular.extend(eventTypeProvider, {
        COMMAND_QUEUE_SEND: 'commandqueue_send',
        COMMAND_QUEUE_SEND_TIME_LIMIT: 'commandqueue_send_time_limit',
        COMMAND_QUEUE_SEND_NOT_OWN_VILLAGE: 'commandqueue_send_not_own_village',
        COMMAND_QUEUE_SEND_NO_UNITS_ENOUGH: 'commandqueue_send_no_units_enough',
        COMMAND_QUEUE_ADD: 'commandqueue_add',
        COMMAND_QUEUE_ADD_INVALID_ORIGIN: 'commandqueue_add_invalid_origin',
        COMMAND_QUEUE_ADD_INVALID_TARGET: 'commandqueue_add_invalid_target',
        COMMAND_QUEUE_ADD_INVALID_DATE: 'commandqueue_add_invalid_date',
        COMMAND_QUEUE_ADD_NO_UNITS: 'commandqueue_add_no_units',
        COMMAND_QUEUE_ADD_ALREADY_SENT: 'commandqueue_add_already_sent',
        COMMAND_QUEUE_ADD_RELOCATE_DISABLED: 'command_queue_add_relocate_disabled',
        COMMAND_QUEUE_REMOVE: 'commandqueue_remove',
        COMMAND_QUEUE_REMOVE_ERROR: 'commandqueue_remove_error',
        COMMAND_QUEUE_START: 'commandqueue_start',
        COMMAND_QUEUE_STOP: 'commandqueue_stop'
    })
})

define('two/commandQueue/ui', [
    'two/ui',
    'two/commandQueue',
    'two/EventScope',
    'two/utils',
    'two/commandQueue/types/dates',
    'two/commandQueue/types/events',
    'two/commandQueue/types/filters',
    'two/commandQueue/types/commands',
    'two/commandQueue/storageKeys',
    'two/commandQueue/errorCodes',
    'queues/EventQueue',
    'struct/MapData',
    'helper/time',
    'helper/util',
    'Lockr'
], function (
    interfaceOverflow,
    commandQueue,
    EventScope,
    utils,
    DATE_TYPES,
    EVENT_CODES,
    FILTER_TYPES,
    COMMAND_TYPES,
    STORAGE_KEYS,
    ERROR_CODES,
    eventQueue,
    mapData,
    $timeHelper,
    util,
    Lockr
) {
    let $scope
    let $button
    let $gameData = modelDataService.getGameData()
    let $player
    let orderedUnitNames = $gameData.getOrderedUnitNames()
    let orderedOfficerNames = $gameData.getOrderedOfficerNames()
    let presetList = modelDataService.getPresetList()
    let mapSelectedVillage = false
    let unitOrder
    let commandData
    const TAB_TYPES = {
        ADD: 'add',
        WAITING: 'waiting',
        LOGS: 'logs'
    }
    const DEFAULT_TAB = TAB_TYPES.ADD
    const DEFAULT_CATAPULT_TARGET = 'wall'
    let attackableBuildingsList = []
    let unitList = {}
    let officerList = {}
    let timeOffset
    let activeFilters
    let filtersData
    const travelTimeArmy = {
        light_cavalry: { light_cavalry: 1 },
        heavy_cavalry: { heavy_cavalry: 1 },
        archer: { archer: 1 },
        sword: { sword: 1 },
        ram: { ram: 1 },
        snob: { snob: 1 },
        trebuchet: { trebuchet: 1 }
    }
    const FILTER_ORDER = [
        FILTER_TYPES.SELECTED_VILLAGE,
        FILTER_TYPES.BARBARIAN_TARGET,
        FILTER_TYPES.ALLOWED_TYPES,
        FILTER_TYPES.TEXT_MATCH
    ]

    const setMapSelectedVillage = function (event, menu) {
        mapSelectedVillage = menu.data
    }

    const unsetMapSelectedVillage = function () {
        mapSelectedVillage = false
    }

    /**
     * @param {Number=} _ms - Optional time to be formated instead of the game date.
     * @return {String}
     */
    const formatedDate = function (_ms) {
        const date = new Date(_ms || ($timeHelper.gameTime() + utils.getTimeOffset()))

        const rawMS = date.getMilliseconds()
        const ms = $timeHelper.zerofill(rawMS - (rawMS % 100), 3)
        const sec = $timeHelper.zerofill(date.getSeconds(), 2)
        const min = $timeHelper.zerofill(date.getMinutes(), 2)
        const hour = $timeHelper.zerofill(date.getHours(), 2)
        const day = $timeHelper.zerofill(date.getDate(), 2)
        const month = $timeHelper.zerofill(date.getMonth() + 1, 2)
        const year = date.getFullYear()

        return hour + ':' + min + ':' + sec + ':' + ms + ' ' + day + '/' + month + '/' + year
    }

    const addDateDiff = function (date, diff) {
        if (!utils.isValidDateTime(date)) {
            return ''
        }

        date = utils.getTimeFromString(date)
        date += diff

        return formatedDate(date)
    }

    const updateTravelTimes = function () {
        $scope.isValidDate = utils.isValidDateTime(commandData.date)

        if (!commandData.origin || !commandData.target) {
            return
        }

        const commandTime = $scope.isValidDate ? utils.getTimeFromString(commandData.date) : false
        const isArrive = $scope.selectedDateType.value === DATE_TYPES.ARRIVE

        utils.each(COMMAND_TYPES, function (commandType) {
            utils.each(travelTimeArmy, function (army, unit) {
                const travelTime = utils.getTravelTime(commandData.origin, commandData.target, army, commandType, commandData.officers, true)
                
                $scope.travelTimes[commandType][unit].travelTime = $filter('readableMillisecondsFilter')(travelTime)
                $scope.travelTimes[commandType][unit].status = commandTime ? sendTimeStatus(isArrive ? commandTime - travelTime : commandTime) : 'neutral'
            })
        })
    }

    /**
     * @param  {Number}  time - Command date input in milliseconds.
     * @return {Boolean}
     */
    const sendTimeStatus = function (time) {
        if (!time || !$scope.isValidDate) {
            return 'neutral'
        }

        return ($timeHelper.gameTime() + timeOffset) < time  ? 'valid' : 'invalid'
    }

    const updateDateType = function () {
        commandData.dateType = $scope.selectedDateType.value
        Lockr.set(STORAGE_KEYS.LAST_DATE_TYPE, $scope.selectedDateType.value)
        updateTravelTimes()
    }

    const updateCatapultTarget = function () {
        commandData.catapultTarget = $scope.catapultTarget.value
    }

    const insertPreset = function () {
        const selectedPreset = $scope.selectedInsertPreset.value

        if (!selectedPreset) {
            return false
        }

        const presets = modelDataService.getPresetList().getPresets()
        const preset = presets[selectedPreset]

        // reset displayed value
        $scope.selectedInsertPreset = {
            name: $filter('i18n')('add_insert_preset', $rootScope.loc.ale, 'command_queue'),
            value: null
        }

        commandData.units = angular.copy(preset.units)
        commandData.officers = angular.copy(preset.officers)

        if (preset.catapult_target) {
            commandData.catapultTarget = preset.catapult_target
            $scope.catapultTarget = {
                name: $filter('i18n')(preset.catapult_target, $rootScope.loc.ale, 'building_names'),
                value: preset.catapult_target
            }
            $scope.showCatapultSelect = true

        }
    }

    const setupCountdownForCommand = function(command) {
        if(!command.updateCountdown) {
            command.updateCountdown = function() {
                const gameClockTime = $timeHelper.serverTime() + $rootScope.GAME_TIME_OFFSET // this yields the current time displayed by the game clock
                const displaySendTime = command.sendTime - (new Date()).getTimezoneOffset()*60*1000 // at time of writing, the command.sendTime is buggy - it's off by GMT offset plus GAME_TIME_OFFSET. This corrects that for display.

                command.countdown = displaySendTime - gameClockTime
            }
        }
        $timeHelper.timer.add(command.updateCountdown)
    }

    const updateWaitingCommands = function () {
        $scope.waitingCommands = commandQueue.getWaitingCommands()
    }

    const updateSentCommands = function () {
        $scope.sentCommands = commandQueue.getSentCommands()
    }

    const updateExpiredCommands = function () {
        $scope.expiredCommands = commandQueue.getExpiredCommands()
    }

    const updateVisibleCommands = function () {
        let commands = $scope.waitingCommands

        FILTER_ORDER.forEach(function (filter) {
            if ($scope.activeFilters[filter]) {
                commands = commandQueue.filterCommands(filter, $scope.filtersData, commands)
            }
        })

        $scope.visibleWaitingCommands = commands
    }

    const onUnitInputFocus = function (unit) {
        if (commandData.units[unit] === 0) {
            commandData.units[unit] = ''
        }
    }

    const onUnitInputBlur = function (unit) {
        if (commandData.units[unit] === '') {
            commandData.units[unit] = 0
        }
    }

    const catapultTargetVisibility = function () {
        $scope.showCatapultSelect = !!commandData.units.catapult
    }

    const selectTab = function (tabType) {
        $scope.selectedTab = tabType
    }

    const addSelected = function () {
        const village = modelDataService.getSelectedVillage().data
        
        commandData.origin = {
            id: village.villageId,
            x: village.x,
            y: village.y,
            name: village.name,
            character_id: $player.getId()
        }
    }

    const addMapSelected = function () {
        if (!mapSelectedVillage) {
            return utils.notif('error', $filter('i18n')('error_no_map_selected_village', $rootScope.loc.ale, 'command_queue'))
        }

        mapData.loadTownDataAsync(mapSelectedVillage.x, mapSelectedVillage.y, 1, 1, function (data) {
            commandData.target = data
        })
    }

    const addCurrentDate = function () {
        commandData.date = formatedDate()
    }

    const incrementDate = function () {
        if (!commandData.date) {
            return false
        }

        commandData.date = addDateDiff(commandData.date, 100)
    }

    const reduceDate = function () {
        if (!commandData.date) {
            return false
        }

        commandData.date = addDateDiff(commandData.date, -100)
    }

    const cleanUnitInputs = function () {
        commandData.units = angular.copy(unitList)
        commandData.officers = angular.copy(officerList)
        commandData.catapultTarget = DEFAULT_CATAPULT_TARGET
        $scope.catapultTarget = {
            name: $filter('i18n')(DEFAULT_CATAPULT_TARGET, $rootScope.loc.ale, 'building_names'),
            value: DEFAULT_CATAPULT_TARGET
        }
        $scope.showCatapultSelect = false
    }

    const addCommand = function (commandType) {
        commandQueue.addCommand(
            commandData.origin,
            commandData.target,
            commandData.date,
            commandData.dateType,
            commandData.units,
            commandData.officers,
            commandType,
            commandData.catapultTarget
        ).then(function (command) {
            updateWaitingCommands()
            updateVisibleCommands()
            setupCountdownForCommand(command)

            utils.notif('success', genNotifText(command.type, 'added'))
        }).catch(function (error) {
            switch (error) {
                case ERROR_CODES.INVALID_ORIGIN: {
                    utils.notif('error', $filter('i18n')('error_origin', $rootScope.loc.ale, 'command_queue'))
                    break
                }
                case ERROR_CODES.INVALID_TARGET: {
                    utils.notif('error', $filter('i18n')('error_target', $rootScope.loc.ale, 'command_queue'))
                    break
                }
                case ERROR_CODES.INVALID_DATE: {
                    utils.notif('error', $filter('i18n')('error_invalid_date', $rootScope.loc.ale, 'command_queue'))
                    break
                }
                case ERROR_CODES.NO_UNITS: {
                    utils.notif('error', $filter('i18n')('error_no_units', $rootScope.loc.ale, 'command_queue'))
                    break
                }
                case ERROR_CODES.RELOCATE_DISABLED: {
                    utils.notif('error', $filter('i18n')('error_relocate_disabled', $rootScope.loc.ale, 'command_queue'))
                    break
                }
                case ERROR_CODES.ALREADY_SENT: {
                    utils.notif('error', $filter('i18n')('error_already_sent_' + commandType, $rootScope.loc.ale, 'command_queue'))
                    break
                }
            }
        })
    }

    const clearRegisters = function () {
        commandQueue.clearRegisters()
        updateSentCommands()
        updateExpiredCommands()
    }
    const clearWaitings = function () {
        commandQueue.clearWaitings()
        updateWaitingCommands()
    }

    const switchCommandQueue = function () {
        if (commandQueue.isRunning()) {
            commandQueue.stop()
        } else {
            commandQueue.start()
        }
    }

    /**
     * Gera um texto de notificação com as traduções.
     *
     * @param  {String} key
     * @param  {String} key2
     * @param  {String=} prefix
     * @return {String}
     */
    const genNotifText = function (key, key2, prefix) {
        if (prefix) {
            key = prefix + '.' + key
        }

        const a = $filter('i18n')(key, $rootScope.loc.ale, 'command_queue')
        const b = $filter('i18n')(key2, $rootScope.loc.ale, 'command_queue')

        return a + ' ' + b
    }

    const toggleFilter = function (filter, allowedTypes) {
        $scope.activeFilters[filter] = !$scope.activeFilters[filter]

        if (allowedTypes) {
            $scope.filtersData[FILTER_TYPES.ALLOWED_TYPES][filter] = !$scope.filtersData[FILTER_TYPES.ALLOWED_TYPES][filter]
        }

        updateVisibleCommands()
    }

    const textMatchFilter = function () {
        $scope.activeFilters[FILTER_TYPES.TEXT_MATCH] = $scope.filtersData[FILTER_TYPES.TEXT_MATCH].length > 0
        updateVisibleCommands()
    }

    const eventHandlers = {
        updatePresets: function () {
            $scope.presets = utils.obj2selectOptions(presetList.getPresets())
        },
        autoCompleteSelected: function (event, id, data, type) {
            if (id !== 'commandqueue_village_search') {
                return false
            }

            commandData[type] = {
                id: data.raw.id,
                x: data.raw.x,
                y: data.raw.y,
                name: data.raw.name
            }

            $scope.searchQuery[type] = ''
        },
        removeCommand: function (event, command) {
            if(!$timeHelper.timer.remove(command.updateCountdown)) utils.notif('error', 'Error stopping command countdown. Command still removed.')
            updateWaitingCommands()
            updateVisibleCommands()
            $rootScope.$broadcast(eventTypeProvider.TOOLTIP_HIDE, 'twoverflow-tooltip')
            utils.notif('success', genNotifText(command.type, 'removed'))
        },
        removeError: function () {
            utils.notif('error', $filter('i18n')('error_remove_error', $rootScope.loc.ale, 'command_queue'))
        },
        sendTimeLimit: function (event, command) {
            updateSentCommands()
            updateExpiredCommands()
            updateWaitingCommands()
            updateVisibleCommands()
            utils.notif('error', genNotifText(command.type, 'expired'))
        },
        sendNotOwnVillage: function () {
            updateSentCommands()
            updateExpiredCommands()
            updateWaitingCommands()
            updateVisibleCommands()
            utils.notif('error', $filter('i18n')('error_not_own_village', $rootScope.loc.ale, 'command_queue'))
        },
        sendNoUnitsEnough: function () {
            updateSentCommands()
            updateExpiredCommands()
            updateWaitingCommands()
            updateVisibleCommands()
            utils.notif('error', $filter('i18n')('error_no_units_enough', $rootScope.loc.ale, 'command_queue'))
        },
        sendCommand: function (event, command) {
            if(!$timeHelper.timer.remove(command.updateCountdown)) utils.notif('error', 'Error stopping command countdown. Command still sent.')
            updateSentCommands()
            updateWaitingCommands()
            updateVisibleCommands()
            utils.notif('success', genNotifText(command.type, 'sent'))
        },
        start: function (event, data) {
            $scope.running = commandQueue.isRunning()

            if (data.disableNotif) {
                return false
            }

            utils.notif('success', genNotifText('title', 'activated'))
        },
        stop: function () {
            $scope.running = commandQueue.isRunning()
            utils.notif('success', genNotifText('title', 'deactivated'))
        },
        onAutoCompleteOrigin: function (data) {
            commandData.origin = {
                id: data.id,
                x: data.x,
                y: data.y,
                name: data.name
            }
        },
        onAutoCompleteTarget: function (data) {
            commandData.target = {
                id: data.id,
                x: data.x,
                y: data.y,
                name: data.name
            }
        },
        clearCountdownUpdates: function () {
            commandQueue.getWaitingCommands().forEach((command) => {
                $timeHelper.timer.remove(command.updateCountdown)
            })
        }
    }

    const init = function () {
        $player = modelDataService.getSelectedCharacter()
        timeOffset = utils.getTimeOffset()
        const attackableBuildingsMap = $gameData.getAttackableBuildings()

        for (let building in attackableBuildingsMap) {
            attackableBuildingsList.push({
                name: $filter('i18n')(building, $rootScope.loc.ale, 'building_names'),
                value: building
            })
        }

        unitOrder = angular.copy(orderedUnitNames)
        unitOrder.splice(unitOrder.indexOf('catapult'), 1)

        orderedUnitNames.forEach(function (unit) {
            unitList[unit] = 0
        })

        orderedOfficerNames.forEach(function (unit) {
            officerList[unit] = false
        })

        commandData = {
            origin: false,
            target: false,
            date: '',
            dateType: DATE_TYPES.OUT,
            units: angular.copy(unitList),
            officers: angular.copy(officerList),
            catapultTarget: DEFAULT_CATAPULT_TARGET,
            type: null
        }
        activeFilters = {
            [FILTER_TYPES.SELECTED_VILLAGE]: false,
            [FILTER_TYPES.BARBARIAN_TARGET]: false,
            [FILTER_TYPES.ALLOWED_TYPES]: true,
            [FILTER_TYPES.ATTACK]: true,
            [FILTER_TYPES.SUPPORT]: true,
            [FILTER_TYPES.RELOCATE]: true,
            [FILTER_TYPES.TEXT_MATCH]: false
        }
        filtersData = {
            [FILTER_TYPES.ALLOWED_TYPES]: {
                [FILTER_TYPES.ATTACK]: true,
                [FILTER_TYPES.SUPPORT]: true,
                [FILTER_TYPES.RELOCATE]: true,
            },
            [FILTER_TYPES.TEXT_MATCH]: ''
        }

        $button = interfaceOverflow.addMenuButton('Generał', 10, $filter('i18n')('description', $rootScope.loc.ale, 'command_queue'))
        $button.addEventListener('click', buildWindow)

        eventQueue.register(eventTypeProvider.COMMAND_QUEUE_START, function () {
            $button.classList.remove('btn-orange')
            $button.classList.add('btn-red')
        })

        eventQueue.register(eventTypeProvider.COMMAND_QUEUE_STOP, function () {
            $button.classList.remove('btn-red')
            $button.classList.add('btn-orange')
        })

        $rootScope.$on(eventTypeProvider.SHOW_CONTEXT_MENU, setMapSelectedVillage)
        $rootScope.$on(eventTypeProvider.DESTROY_CONTEXT_MENU, unsetMapSelectedVillage)

        interfaceOverflow.addTemplate('twoverflow_queue_window', `___command_queue_html_main`)
        interfaceOverflow.addStyle('___command_queue_css_style')
    }

    const buildWindow = function () {
        const lastDateType = Lockr.get(STORAGE_KEYS.LAST_DATE_TYPE, DATE_TYPES.OUT, true)

        $scope = $rootScope.$new()
        $scope.selectedTab = DEFAULT_TAB
        $scope.inventory = modelDataService.getInventory()
        $scope.presets = utils.obj2selectOptions(presetList.getPresets())
        $scope.travelTimes = {}

        utils.each(COMMAND_TYPES, function (commandType) {
            $scope.travelTimes[commandType] = {}

            utils.each(travelTimeArmy, function (army, unit) {
                $scope.travelTimes[commandType][unit] = { travelTime: 0, status: 'neutral' }
            })
        })

        $scope.unitOrder = unitOrder
        $scope.officers = $gameData.getOrderedOfficerNames()
        $scope.searchQuery = {
            origin: '',
            target: ''
        }
        $scope.isValidDate = false
        $scope.dateTypes = util.toActionList(DATE_TYPES, function (actionType) {
            return $filter('i18n')(actionType, $rootScope.loc.ale, 'command_queue')
        })
        $scope.selectedDateType = {
            name: $filter('i18n')(lastDateType, $rootScope.loc.ale, 'command_queue'),
            value: lastDateType
        }
        $scope.selectedInsertPreset = {
            name: $filter('i18n')('add_insert_preset', $rootScope.loc.ale, 'command_queue'),
            value: null
        }
        $scope.catapultTarget = {
            name: $filter('i18n')(DEFAULT_CATAPULT_TARGET, $rootScope.loc.ale, 'building_names'),
            value: DEFAULT_CATAPULT_TARGET
        }
        $scope.autoCompleteOrigin = {
            type: ['village'],
            placeholder: $filter('i18n')('add_village_search', $rootScope.loc.ale, 'command_queue'),
            onEnter: eventHandlers.onAutoCompleteOrigin,
            tooltip: $filter('i18n')('add_origin', $rootScope.loc.ale, 'command_queue'),
            dropDown: true
        }
        $scope.autoCompleteTarget = {
            type: ['village'],
            placeholder: $filter('i18n')('add_village_search', $rootScope.loc.ale, 'command_queue'),
            onEnter: eventHandlers.onAutoCompleteTarget,
            tooltip: $filter('i18n')('add_target', $rootScope.loc.ale, 'command_queue'),
            dropDown: true
        }
        $scope.showCatapultSelect = !!commandData.units.catapult
        $scope.attackableBuildings = attackableBuildingsList
        $scope.commandData = commandData
        $scope.activeFilters = activeFilters
        $scope.filtersData = filtersData
        $scope.running = commandQueue.isRunning()
        $scope.waitingCommands = commandQueue.getWaitingCommands()
        $scope.visibleWaitingCommands = commandQueue.getWaitingCommands()
        $scope.sentCommands = commandQueue.getSentCommands()
        $scope.expiredCommands = commandQueue.getExpiredCommands()
        $scope.EVENT_CODES = EVENT_CODES
        $scope.FILTER_TYPES = FILTER_TYPES
        $scope.TAB_TYPES = TAB_TYPES
        $scope.COMMAND_TYPES = COMMAND_TYPES
        $scope.relocateEnabled = modelDataService.getWorldConfig().isRelocateUnitsEnabled()

        // functions
        $scope.onUnitInputFocus = onUnitInputFocus
        $scope.onUnitInputBlur = onUnitInputBlur
        $scope.catapultTargetVisibility = catapultTargetVisibility
        $scope.selectTab = selectTab
        $scope.addSelected = addSelected
        $scope.addMapSelected = addMapSelected
        $scope.addCurrentDate = addCurrentDate
        $scope.incrementDate = incrementDate
        $scope.reduceDate = reduceDate
        $scope.cleanUnitInputs = cleanUnitInputs
        $scope.addCommand = addCommand
        $scope.clearWaitings = clearWaitings
        $scope.clearRegisters = clearRegisters
        $scope.switchCommandQueue = switchCommandQueue
        $scope.removeCommand = commandQueue.removeCommand
        $scope.openVillageInfo = windowDisplayService.openVillageInfo
        $scope.toggleFilter = toggleFilter

        $scope.$watch('commandData.origin', updateTravelTimes)
        $scope.$watch('commandData.target', updateTravelTimes)
        $scope.$watch('commandData.date', updateTravelTimes)
        $scope.$watch('commandData.officers', updateTravelTimes)
        $scope.$watch('selectedDateType.value', updateDateType)
        $scope.$watch('selectedInsertPreset.value', insertPreset)
        $scope.$watch('catapultTarget.value', updateCatapultTarget)
        $scope.$watch('filtersData[FILTER_TYPES.TEXT_MATCH]', textMatchFilter)

        let travelTimesTimer

        $scope.$watch('selectedTab', function () {
            if ($scope.selectedTab === TAB_TYPES.ADD) {
                travelTimesTimer = setInterval(function () {
                    updateTravelTimes()
                }, 2500)
            } else {
                clearInterval(travelTimesTimer)
            }
        })
        
        $scope.waitingCommands.forEach((command) => {
            setupCountdownForCommand(command)
        })

        let eventScope = new EventScope('twoverflow_queue_window', function () {
            clearInterval(travelTimesTimer)
            eventHandlers.clearCountdownUpdates()
        })

        eventScope.register(eventTypeProvider.ARMY_PRESET_UPDATE, eventHandlers.updatePresets, true)
        eventScope.register(eventTypeProvider.ARMY_PRESET_DELETED, eventHandlers.updatePresets, true)
        eventScope.register(eventTypeProvider.SELECT_SELECTED, eventHandlers.autoCompleteSelected, true)
        eventScope.register(eventTypeProvider.COMMAND_QUEUE_REMOVE, eventHandlers.removeCommand)
        eventScope.register(eventTypeProvider.COMMAND_QUEUE_REMOVE_ERROR, eventHandlers.removeError)
        eventScope.register(eventTypeProvider.COMMAND_QUEUE_SEND_TIME_LIMIT, eventHandlers.sendTimeLimit)
        eventScope.register(eventTypeProvider.COMMAND_QUEUE_SEND_NOT_OWN_VILLAGE, eventHandlers.sendNotOwnVillage)
        eventScope.register(eventTypeProvider.COMMAND_QUEUE_SEND_NO_UNITS_ENOUGH, eventHandlers.sendNoUnitsEnough)
        eventScope.register(eventTypeProvider.COMMAND_QUEUE_SEND, eventHandlers.sendCommand)
        eventScope.register(eventTypeProvider.COMMAND_QUEUE_START, eventHandlers.start)
        eventScope.register(eventTypeProvider.COMMAND_QUEUE_STOP, eventHandlers.stop)

        windowManagerService.getScreenWithInjectedScope('!twoverflow_queue_window', $scope)
    }

    return init
})

define('two/commandQueue/storageKeys', [], function () {
    return {
        QUEUE_COMMANDS: 'command_queue_commands',
        QUEUE_SENT: 'command_queue_sent',
        QUEUE_EXPIRED: 'command_queue_expired',
        LAST_DATE_TYPE: 'command_queue_last_date_type'
    }
})

define('two/commandQueue/types/commands', [], function () {
    return {
        'ATTACK': 'attack',
        'SUPPORT': 'support',
        'RELOCATE': 'relocate'
    }
})

define('two/commandQueue/types/dates', [], function () {
    return {
        ARRIVE: 'date_type_arrive',
        OUT: 'date_type_out'
    }
})

define('two/commandQueue/types/events', [], function () {
    return {
        NOT_OWN_VILLAGE: 'not_own_village',
        NOT_ENOUGH_UNITS: 'not_enough_units',
        TIME_LIMIT: 'time_limit',
        COMMAND_REMOVED: 'command_removed',
        COMMAND_SENT: 'command_sent'
    }
})

define('two/commandQueue/types/filters', [], function () {
    return {
        SELECTED_VILLAGE: 'selected_village',
        BARBARIAN_TARGET: 'barbarian_target',
        ALLOWED_TYPES: 'allowed_types',
        ATTACK: 'attack',
        SUPPORT: 'support',
        RELOCATE: 'relocate',
        TEXT_MATCH: 'text_match'
    }
})

define('two/commandQueue/errorCodes', [], function () {
    return {
        INVALID_ORIGIN: 'invalid_origin',
        INVALID_TARGET: 'invalid_target',
        INVALID_DATE: 'invalid_date',
        NO_UNITS: 'no_units',
        ALREADY_SENT: 'already_sent',
        RELOCATE_DISABLED: 'relocate_disabled',
        INVALID_DATE_TYPE: 'invalid_date_type',
        INVALID_OFFICER: 'invalid_officer',
        INVALID_COMMAND_TYPE: 'invalid_command_type',
        INVALID_CATAPULT_TARGET: 'invalid_catapult_target',
        INVALID_UNIT_TYPE: 'invalid_unit_type',
        INVALID_OFFICER_TYPE: 'invalid_officer_type'
    }
})

require([
    'two/ready',
    'two/commandQueue',
    'two/commandQueue/ui',
    'two/commandQueue/events'
], function (
    ready,
    commandQueue,
    commandQueueInterface
) {
    if (commandQueue.initialized) {
        return false
    }

    ready(function () {
        commandQueue.init()
        commandQueueInterface()

        if (commandQueue.getWaitingCommands().length > 0) {
            commandQueue.start(true)
        }
    }, ['map', 'world_config'])
})

define('two/faithChecker', [
    'two/utils',
    'queues/EventQueue',
    'Lockr',
    'conf/buildingTypes',
    'conf/locationTypes'
], function(
    utils,
    eventQueue,
    Lockr,
    BUILDING_TYPES,
    LOCATION_TYPES
) {
    let initialized = false
    let running = false
    let getHighestGodsHouseLevel
    let getMoralBonus
    let requestVillageProvinceNeighbours
    let highestChapelLevel
    let bonus
    let chapelBlockade = 0
    getHighestGodsHouseLevel = function getHighestGodsHouseLevel(villages) {
        let villageIdx,
            highestLevel = 0,
            tmpLevel
        for (villageIdx = 0; villageIdx < villages.length; villageIdx++) {
            tmpLevel = villages[villageIdx].chapel || villages[villageIdx].church
            if (tmpLevel && (tmpLevel > highestLevel)) {
                highestLevel = tmpLevel
            }
        }
        return highestLevel
    }
    getMoralBonus = function getMoralBonus(level, opt_isChapel) {
        let bonusLookUp = modelDataService.getWorldConfig().getChurchBonus(),
            bonusFactor = 0
        if ((level < 0) || (!opt_isChapel && level > (bonusLookUp.length - 1))) {
            return 0
        }
        if (opt_isChapel) {
            bonusFactor = modelDataService.getWorldConfig().getChapelBonus()
        } else {
            bonusFactor = bonusLookUp[level]
        }
        return Math.floor(bonusFactor * 100)
    }
    requestVillageProvinceNeighbours = function requestVillageProvinceNeighbours(villageId, callback) {
        socketService.emit(routeProvider.VILLAGES_IN_PROVINCE, {
            'village_id': villageId
        }, callback)
    }

    function faithInfo() {
        if (running == true) {
            let player = modelDataService.getSelectedCharacter()
            let villages = player.getVillageList()
            villages.forEach(function(village) {
                let villageid = village.data.villageId
                let isChapel = village.data.buildings.chapel.level
                let buildingQueue = village.buildingQueue.data.queue
                let resources = village.getResources()
                let computed = resources.getComputed()
                let food = computed.food
                let wood = computed.wood
                let clay = computed.clay
                let iron = computed.iron
                let villageFood = food.currentStock
                let villageWood = wood.currentStock
                let villageClay = clay.currentStock
                let villageIron = iron.currentStock
                let foodCost = [0, 5000]
                let woodCost = [160, 16000]
                let clayCost = [200, 20000]
                let ironCost = [50, 5000]
                if (isChapel == 1) {
                    chapelBlockade = 1
                }
                requestVillageProvinceNeighbours(villageid, function(responseData) {
                    highestChapelLevel = getHighestGodsHouseLevel(responseData.villages)
                    bonus = getMoralBonus(highestChapelLevel, isChapel === 1)
                    console.log(bonus)
                    if (bonus == 50 && (buildingQueue === undefined || buildingQueue.length == 0)) {
                        if (chapelBlockade == 1) {
                            if (villageWood >= woodCost[1] && villageClay >= clayCost[1] && villageIron >= ironCost[1] && villageFood >= foodCost[1]) {
                                socketService.emit(routeProvider.VILLAGE_UPGRADE_BUILDING, {
                                    building: 'church',
                                    village_id: villageid,
                                    location: LOCATION_TYPES.MASS_SCREEN,
                                    premium: false
                                })
                                utils.notif('success', $filter('i18n')('church', $rootScope.loc.ale, 'faith_checker'))
                            } else {
                                utils.notif('error', $filter('i18n')('resources', $rootScope.loc.ale, 'faith_checker'))
                            }
                        } else {
                            if (villageWood >= woodCost[0] && villageClay >= clayCost[0] && villageIron >= ironCost[0] && villageFood >= foodCost[0]) {
                                socketService.emit(routeProvider.VILLAGE_UPGRADE_BUILDING, {
                                    building: 'chapel',
                                    village_id: villageid,
                                    location: LOCATION_TYPES.MASS_SCREEN,
                                    premium: false
                                })
                                utils.notif('success', $filter('i18n')('chapel', $rootScope.loc.ale, 'faith_checker'))
                            } else {
                                utils.notif('error', $filter('i18n')('resources', $rootScope.loc.ale, 'faith_checker'))
                            }
                        }
                    } else if (bonus == 50 && buildingQueue) {
                        buildingQueue.forEach(function(queue) {
                            let faithMax = queue.building
                            if ((faithMax != 'chapel' || faithMax != 'church') && chapelBlockade == 0) {
                                if (villageWood >= woodCost[0] && villageClay >= clayCost[0] && villageIron >= ironCost[0] && villageFood >= foodCost[0]) {
                                    socketService.emit(routeProvider.VILLAGE_UPGRADE_BUILDING, {
                                        building: 'chapel',
                                        village_id: villageid,
                                        location: LOCATION_TYPES.MASS_SCREEN,
                                        premium: false
                                    })
                                    utils.notif('success', $filter('i18n')('chapel', $rootScope.loc.ale, 'faith_checker'))
                                } else {
                                    utils.notif('error', $filter('i18n')('resources', $rootScope.loc.ale, 'faith_checker'))
                                }
                            } else if ((faithMax != 'chapel' || faithMax != 'church') && chapelBlockade == 1) {
                                if (villageWood >= woodCost[1] && villageClay >= clayCost[1] && villageIron >= ironCost[1] && villageFood >= foodCost[1]) {
                                    socketService.emit(routeProvider.VILLAGE_UPGRADE_BUILDING, {
                                        building: 'church',
                                        village_id: villageid,
                                        location: LOCATION_TYPES.MASS_SCREEN,
                                        premium: false
                                    })
                                    utils.notif('success', $filter('i18n')('church', $rootScope.loc.ale, 'faith_checker'))
                                } else {
                                    utils.notif('error', $filter('i18n')('resources', $rootScope.loc.ale, 'faith_checker'))
                                }
                            }
                        })
                    } else {
                        utils.notif('success', $filter('i18n')('full', $rootScope.loc.ale, 'faith_checker'))
                    }
                })
            })
        }
    }
    let faithChecker = {}
    faithChecker.init = function() {
        initialized = true
    }
    faithChecker.start = function() {
        eventQueue.trigger(eventTypeProvider.FAITH_CHECKER_STARTED)
        running = true
        faithInfo()
        setInterval(function() {
            faithInfo()
        }, 60000)
    }
    faithChecker.stop = function() {
        eventQueue.trigger(eventTypeProvider.FAITH_CHECKER_STOPPED)
        running = false
    }
    faithChecker.isRunning = function() {
        return running
    }
    faithChecker.isInitialized = function() {
        return initialized
    }
    return faithChecker
})
define('two/faithChecker/events', [], function () {
    angular.extend(eventTypeProvider, {
        FAITH_CHECKER_STARTED: 'faith_checker_started',
        FAITH_CHECKER_STOPPED: 'faith_checker_stopped'
    })
})

define('two/faithChecker/ui', [
    'two/ui',
    'two/faithChecker',
    'two/utils',
    'queues/EventQueue'
], function (
    interfaceOverflow,
    faithChecker,
    utils,
    eventQueue
) {
    let $button

    const init = function () {
        $button = interfaceOverflow.addMenuButton('Kapelan', 110, $filter('i18n')('description', $rootScope.loc.ale, 'faith_checker'))

        $button.addEventListener('click', function () {
            if (faithChecker.isRunning()) {
                faithChecker.stop()
                utils.notif('success', $filter('i18n')('deactivated', $rootScope.loc.ale, 'faith_checker'))
            } else {
                faithChecker.start()
                utils.notif('success', $filter('i18n')('activated', $rootScope.loc.ale, 'faith_checker'))
            }
        })

        eventQueue.register(eventTypeProvider.FAITH_CHECKER_STARTED, function () {
            $button.classList.remove('btn-orange')
            $button.classList.add('btn-red')
        })

        eventQueue.register(eventTypeProvider.FAITH_CHECKER_STOPPED, function () {
            $button.classList.remove('btn-red')
            $button.classList.add('btn-orange')
        })

        if (faithChecker.isRunning()) {
            eventQueue.trigger(eventTypeProvider.FAITH_CHECKER_STARTED)
        }

        return opener
    }

    return init
})

require([
    'two/ready',
    'two/faithChecker',
    'two/faithChecker/ui',
    'Lockr',
    'queues/EventQueue',
    'two/faithChecker/events'
], function(
    ready,
    faithChecker,
    faithCheckerInterface,
    Lockr,
    eventQueue
) {
    const STORAGE_KEYS = {
        ACTIVE: 'faith_checker_active'
    }
	
    if (faithChecker.isInitialized()) {
        return false
    }
    ready(function() {
        faithChecker.init()
        faithCheckerInterface()

        ready(function() {
            if (Lockr.get(STORAGE_KEYS.ACTIVE, false, true)) {
                faithChecker.start()
            }

            eventQueue.register(eventTypeProvider.FAITH_CHECKER_STARTED, function() {
                Lockr.set(STORAGE_KEYS.ACTIVE, true)
            })

            eventQueue.register(eventTypeProvider.FAITH_CHECKER_STOPPED, function() {
                Lockr.set(STORAGE_KEYS.ACTIVE, false)
            })
        }, ['initial_village'])
    })
})
define('two/fakeSender', [
    'two/Settings',
    'two/utils',
    'two/fakeSender/settings',
    'two/fakeSender/settings/map',
    'two/fakeSender/settings/updates',
    'two/fakeSender/types/dates',
    'two/fakeSender/types/type',
    'two/attackView/types/commands',
    'two/fakeSender/types/units',
    'two/ready',
    'queues/EventQueue',
    'conf/buildingTypes',
    'Lockr',
    'helper/time'
], function(
    Settings,
    utils,
    SETTINGS,
    SETTINGS_MAP,
    UPDATES,
    DATE_TYPES,
    FS_TYPE,
    COMMAND_TYPES,
    FS_UNIT,
    ready,
    eventQueue,
    BUILDING_TYPES,
    Lockr,
    timeHelper
) {
    let initialized = false
    let running = false
    let settings
    let logs
    let groupList = modelDataService.getGroupList()
    let commandQueue = false
    var player = modelDataService.getSelectedCharacter()
    let fakeSenderSettings
    let COMMAND_QUEUE_DATE_TYPES
    const LOGS_LIMIT = 500
    var village = {}
    var targetFinal = {}
    let selectedGroups = []
    let selectedGroupsP = []
    let selectedGroupsT = []
    let selectedGroupsG = []
    let selectedGroupsTarget = []
    var Spear = 0
    var Sword = 0
    var Axe = 0
    var Archer = 0
    var LC = 0
    var MA = 0
    var Ram = 0
    var Catapult = 0
    var HC = 0
    var Berserker = 0
    var Trebuchet = 0
    var targets = []
    var snobUnit = {}
    var fakeUnits = ''
    var enemies = false
    var tribeId = ''
    var provinceId = ''
    var playerId = ''
    var supportUnits = ''
    var fourUnit = ''
    var newdate = 0
    var fakeType = ''
    var date = ''
    var targetLimit = 0
    var ownGroups = ''
    var targetGroups = ''
    var commandInterval = 0
    var fakeVillages = []
    var groupVillages = null
    var groupTargets = null
    var whenSend = ''
    var dateType = ''
    const STORAGE_KEYS = {
        SETTINGS: 'fake_sender_settings',
        LOGS: 'fake_sender_log'
    }
    const FAKE_UNIT = {
        [FS_UNIT.SPEAR]: 'spear',
        [FS_UNIT.SWORD]: 'sword',
        [FS_UNIT.AXE]: 'axe',
        [FS_UNIT.ARCHER]: 'archer',
        [FS_UNIT.LIGHT_CAVALRY]: 'light_cavalry',
        [FS_UNIT.MOUNTED_ARCHER]: 'mounted_archer',
        [FS_UNIT.HEAVT_CAVALRY]: 'heavy_cavalry',
        [FS_UNIT.RAM]: 'ram',
        [FS_UNIT.CATAPULT]: 'catapult',
        [FS_UNIT.TREBUCHET]: 'trebuchet',
        [FS_UNIT.DOPPELSOLDNER]: 'doppelsoldner',
        [FS_UNIT.SNOB]: 'snob',
        [FS_UNIT.KNIGHT]: 'knight'
    }
    const FAKE_TYPE = {
        [FS_TYPE.ATTACK]: 'attack',
        [FS_TYPE.SUPPORT]: 'support',
        [FS_TYPE.QUATTRO]: 'four',
        [FS_TYPE.FULL]: 'full'
    }
    const FAKE_DATE = {
        [DATE_TYPES.ARRIVE]: 'date_type_arrive',
        [DATE_TYPES.OUT]: 'date_type_out'
    }
    console.log(FAKE_UNIT, FAKE_TYPE, FAKE_DATE)
    const updateGroups = function() {
        selectedGroups = []
        selectedGroupsP = []
        selectedGroupsT = []
        selectedGroupsG = []
        selectedGroupsTarget = []
        const allGroups = modelDataService.getGroupList().getGroups()
        const groupsInVillagesFake = fakeSenderSettings[SETTINGS.GROUP]
        const groupsInPlayerFake = fakeSenderSettings[SETTINGS.GROUPP]
        const groupsInTribeFake = fakeSenderSettings[SETTINGS.GROUPT]
        const groupsInGroupFake = fakeSenderSettings[SETTINGS.GROUPG]
        const targetsGroups = fakeSenderSettings[SETTINGS.GROUP_TARGET]
        groupsInVillagesFake.forEach(function(groupId) {
            selectedGroups.push(allGroups[groupId])
        })
        groupsInPlayerFake.forEach(function(groupId) {
            selectedGroupsP.push(allGroups[groupId])
        })
        groupsInTribeFake.forEach(function(groupId) {
            selectedGroupsT.push(allGroups[groupId])
        })
        groupsInGroupFake.forEach(function(groupId) {
            selectedGroupsG.push(allGroups[groupId])
        })
        targetsGroups.forEach(function(groupId) {
            selectedGroupsTarget.push(allGroups[groupId])
        })
    }
    const addLog = function(villageId, targetId, unit, type) {
        let data = {
            time: timeHelper.gameTime(),
            villageId: villageId,
            targetId: targetId,
            unit: unit,
            type: type
        }
        logs.unshift(data)
        if (logs.length > LOGS_LIMIT) {
            logs.splice(logs.length - LOGS_LIMIT, logs.length)
        }
        Lockr.set(STORAGE_KEYS.LOGS, logs)
        return true
    }
    const sendFakes = function() {
        fakeVillages.forEach(function(fakeVillage, index) {
            setTimeout(function() {
                let ownLimit = fakeSenderSettings[SETTINGS.LIMIT_OWN]
                socketService.emit(routeProvider.GET_CHARACTER_VILLAGES, {}, function(data) {
                    targets.forEach(function(target, index1) {
                        setTimeout(function() {
                            var intervalFinal = Math.floor(Math.random() * 10000) + commandInterval * 1000
                            var repeatFour = 0
                            for (var i = 0; i < data.villages.length; i++) {
                                var villageId = data.villages[i].id
                                if (villageId == fakeVillage) {
                                    village = {
                                        'id': data.villages[i].id,
                                        'x': data.villages[i].x,
                                        'y': data.villages[i].y,
                                        'name': data.villages[i].name,
                                        'character_id': player.getId()
                                    }
                                    socketService.emit(routeProvider.VILLAGE_UNIT_INFO, {
                                        village_id: villageId
                                    }, function(data) {
                                        Spear = data.available_units.spear.total
                                        Sword = data.available_units.sword.total
                                        Axe = data.available_units.axe.total
                                        Archer = data.available_units.archer.total
                                        LC = data.available_units.light_cavalry.total
                                        MA = data.available_units.mounted_archer.total
                                        Ram = data.available_units.ram.total
                                        Catapult = data.available_units.catapult.total
                                        HC = data.available_units.heavy_cavalry.total
                                        Berserker = data.available_units.doppelsoldner.total
                                        Trebuchet = data.available_units.trebuchet.total
                                        var infantrySupport = 0
                                        var infantryAxe = 0
                                        var infantrySword = 0
                                        var infantryRam = 0
                                        var infantryTrebuchet = 0
                                        var cavalryLc = 0
                                        var cavalryHc = 0
                                        if (target != 0 && targetLimit > 0 && ownLimit > 0) {
                                            socketService.emit(routeProvider.MAP_GET_VILLAGE_DETAILS, {
                                                my_village_id: modelDataService.getSelectedVillage().getId(),
                                                village_id: target,
                                                num_reports: 1
                                            }, function(data) {
                                                targetFinal = {
                                                    'id': data.village_id,
                                                    'x': data.village_x,
                                                    'y': data.village_y,
                                                    'name': data.village_name
                                                }
                                                console.log(targetFinal, village, Spear, Sword, Axe)
                                                if (fakeType == 'attack') {
                                                    date = fakeSenderSettings[SETTINGS.DATEV]
                                                    newdate = utils.getTimeFromString(date) + intervalFinal
                                                    date = utils.formatDate(newdate)
                                                    fakeUnits.forEach(function(unit) {
                                                        if (unit == 'spear' && Spear > 0 && infantryAxe < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                spear: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantryAxe += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        } else if (unit == 'axe' && Axe > 0 && infantryAxe < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                axe: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantryAxe += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        } else if (unit == 'archer' && Archer > 0 && infantryAxe < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                archer: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantryAxe += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        } else if (unit == 'doppelsoldner' && Berserker > 0 && infantryAxe < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                doppelsoldner: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantryAxe += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        }
                                                        if (unit == 'sword' && Sword > 0 && infantrySword < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                sword: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantrySword += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        }
                                                        if (unit == 'light_cavalry' && LC > 0 && cavalryLc < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                light_cavalry: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            cavalryLc += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        } else if (unit == 'mounted_archer' && MA > 0 && cavalryLc < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                mounted_archer: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            cavalryLc += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        }
                                                        if (unit == 'ram' && Ram > 0 && infantryRam < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                ram: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantryRam += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        } else if (unit == 'catapult' && Catapult > 0 && infantryRam < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                catapult: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, BUILDING_TYPES.WALL)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantryRam += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        }
                                                        if (unit == 'heavy_cavalry' && HC > 0 && cavalryHc < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                heavy_cavalry: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            cavalryHc += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        }
                                                        if (unit == 'trebuchet' && Trebuchet > 0 && infantryTrebuchet < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                trebuchet: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantryTrebuchet += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        } else {
                                                            utils.notif('error', $filter('i18n')('error_no_fakeUnit', $rootScope.loc.ale, 'fake_sender'))
                                                        }
                                                    })
                                                } else if (fakeType == 'support') {
                                                    date = fakeSenderSettings[SETTINGS.DATEV]
                                                    newdate = utils.getTimeFromString(date) + intervalFinal
                                                    date = utils.formatDate(newdate)
                                                    supportUnits.forEach(function(unit) {
                                                        if (unit == 'spear' && Spear > 0 && infantrySupport < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                spear: 1
                                                            }, {}, COMMAND_TYPES.SUPPORT, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantrySupport += 1
                                                            addLog(village.id, targetFinal.id, unit, 'wsparcie')
                                                        } else if (unit == 'archer' && Archer > 0 && infantrySupport < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                archer: 1
                                                            }, {}, COMMAND_TYPES.SUPPORT, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantrySupport += 1
                                                            addLog(village.id, targetFinal.id, unit, 'wsparcie')
                                                        }
                                                        if (unit == 'sword' && Sword > 0) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                sword: 1
                                                            }, {}, COMMAND_TYPES.SUPPORT, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            addLog(village.id, targetFinal.id, unit, 'wsparcie')
                                                        }
                                                        if (unit == 'heavy_cavalry' && HC > 0) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                heavy_cavalry: 1
                                                            }, {}, COMMAND_TYPES.SUPPORT, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            addLog(village.id, targetFinal.id, unit, 'wsparcie')
                                                        } else {
                                                            utils.notif('error', $filter('i18n')('error_no_supportUnit', $rootScope.loc.ale, 'fake_sender'))
                                                        }
                                                    })
                                                } else if (fakeType == 'four') {
                                                    date = fakeSenderSettings[SETTINGS.DATEV]
                                                    newdate = utils.getTimeFromString(date) + intervalFinal
                                                    date = utils.formatDate(newdate)
                                                    if (fourUnit == 'catapult' && Catapult > 0 && repeatFour < 1) {
                                                        commandQueue.addCommand(village, targetFinal, date, whenSend, snobUnit, {}, COMMAND_TYPES.ATTACK, BUILDING_TYPES.WALL)
                                                        commandQueue.addCommand(village, targetFinal, date, whenSend, snobUnit, {}, COMMAND_TYPES.ATTACK, BUILDING_TYPES.WALL)
                                                        commandQueue.addCommand(village, targetFinal, date, whenSend, snobUnit, {}, COMMAND_TYPES.ATTACK, BUILDING_TYPES.WALL)
                                                        commandQueue.addCommand(village, targetFinal, date, whenSend, snobUnit, {}, COMMAND_TYPES.ATTACK, BUILDING_TYPES.WALL)
                                                        ownLimit -= 4
                                                        targetLimit -= 4
                                                        repeatFour += 1
                                                        addLog(village.id, targetFinal.id, fourUnit, 'kareta')
                                                    } else if ((Ram > 0 && fourUnit == 'ram') || (Trebuchet > 0 && fourUnit == 'trebuchet') && repeatFour < 1) {
                                                        commandQueue.addCommand(village, targetFinal, date, whenSend, snobUnit, {}, COMMAND_TYPES.ATTACK, false)
                                                        commandQueue.addCommand(village, targetFinal, date, whenSend, snobUnit, {}, COMMAND_TYPES.ATTACK, false)
                                                        commandQueue.addCommand(village, targetFinal, date, whenSend, snobUnit, {}, COMMAND_TYPES.ATTACK, false)
                                                        commandQueue.addCommand(village, targetFinal, date, whenSend, snobUnit, {}, COMMAND_TYPES.ATTACK, false)
                                                        ownLimit -= 4
                                                        targetLimit -= 4
                                                        repeatFour += 1
                                                        addLog(village.id, targetFinal.id, fourUnit, 'kareta')
                                                    } else {
                                                        utils.notif('error', $filter('i18n')('error_no_fourUnit', $rootScope.loc.ale, 'fake_sender'))
                                                    }
                                                } else if (fakeType == 'full') {
                                                    date = fakeSenderSettings[SETTINGS.DATEV]
                                                    newdate = utils.getTimeFromString(date) + intervalFinal
                                                    date = utils.formatDate(newdate)
                                                    if (fourUnit == 'catapult' && Catapult > 0 && repeatFour < 1) {
                                                        commandQueue.addCommand(village, targetFinal, date, whenSend, snobUnit, {}, COMMAND_TYPES.ATTACK, BUILDING_TYPES.WALL)
                                                        commandQueue.addCommand(village, targetFinal, date, whenSend, snobUnit, {}, COMMAND_TYPES.ATTACK, BUILDING_TYPES.WALL)
                                                        commandQueue.addCommand(village, targetFinal, date, whenSend, snobUnit, {}, COMMAND_TYPES.ATTACK, BUILDING_TYPES.WALL)
                                                        commandQueue.addCommand(village, targetFinal, date, whenSend, snobUnit, {}, COMMAND_TYPES.ATTACK, BUILDING_TYPES.WALL)
                                                        ownLimit -= 4
                                                        targetLimit -= 4
                                                        repeatFour += 1
                                                        addLog(village.id, targetFinal.id, fourUnit, 'kareta')
                                                    } else if ((Ram > 0 && fourUnit == 'ram') || (Trebuchet > 0 && fourUnit == 'trebuchet') && repeatFour < 1) {
                                                        commandQueue.addCommand(village, targetFinal, date, whenSend, snobUnit, {}, COMMAND_TYPES.ATTACK, false)
                                                        commandQueue.addCommand(village, targetFinal, date, whenSend, snobUnit, {}, COMMAND_TYPES.ATTACK, false)
                                                        commandQueue.addCommand(village, targetFinal, date, whenSend, snobUnit, {}, COMMAND_TYPES.ATTACK, false)
                                                        commandQueue.addCommand(village, targetFinal, date, whenSend, snobUnit, {}, COMMAND_TYPES.ATTACK, false)
                                                        ownLimit -= 4
                                                        targetLimit -= 4
                                                        repeatFour += 1
                                                        addLog(village.id, targetFinal.id, fourUnit, 'kareta')
                                                    } else {
                                                        utils.notif('error', $filter('i18n')('error_no_fourUnit', $rootScope.loc.ale, 'fake_sender'))
                                                    }
                                                    newdate = utils.getTimeFromString(date) - 2000
                                                    date = utils.formatDate(newdate)
                                                    fakeUnits.forEach(function(unit) {
                                                        if (unit == 'spear' && Spear > 0 && infantryAxe < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                spear: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantryAxe += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        } else if (unit == 'axe' && Axe > 0 && infantryAxe < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                axe: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantryAxe += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        } else if (unit == 'archer' && Archer > 0 && infantryAxe < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                archer: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantryAxe += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        } else if (unit == 'doppelsoldner' && Berserker > 0 && infantryAxe < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                doppelsoldner: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantryAxe += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        }
                                                        if (unit == 'sword' && Sword > 0 && infantrySword < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                sword: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantrySword += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        }
                                                        if (unit == 'light_cavalry' && LC > 0 && cavalryLc < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                light_cavalry: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            cavalryLc += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        } else if (unit == 'mounted_archer' && MA > 0 && cavalryLc < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                mounted_archer: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            cavalryLc += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        }
                                                        if (unit == 'ram' && Ram > 0 && infantryRam < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                ram: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantryRam += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        } else if (unit == 'catapult' && Catapult > 0 && infantryRam < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                catapult: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, BUILDING_TYPES.WALL)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantryRam += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        }
                                                        if (unit == 'heavy_cavalry' && HC > 0 && cavalryHc < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                heavy_cavalry: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            cavalryHc += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        }
                                                        if (unit == 'trebuchet' && Trebuchet > 0 && infantryTrebuchet < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                trebuchet: 1
                                                            }, {}, COMMAND_TYPES.ATTACK, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantryTrebuchet += 1
                                                            addLog(village.id, targetFinal.id, unit, 'atak')
                                                        } else {
                                                            utils.notif('error', $filter('i18n')('error_no_fakeUnit', $rootScope.loc.ale, 'fake_sender'))
                                                        }
                                                    })
                                                    newdate = utils.getTimeFromString(date) + 4000
                                                    date = utils.formatDate(newdate)
                                                    supportUnits.forEach(function(unit) {
                                                        if (unit == 'spear' && Spear > 0 && infantrySupport < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                spear: 1
                                                            }, {}, COMMAND_TYPES.SUPPORT, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantrySupport += 1
                                                            addLog(village.id, targetFinal.id, unit, 'wsparcie')
                                                        } else if (unit == 'archer' && Archer > 0 && infantrySupport < 1) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                archer: 1
                                                            }, {}, COMMAND_TYPES.SUPPORT, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            infantrySupport += 1
                                                            addLog(village.id, targetFinal.id, unit, 'wsparcie')
                                                        }
                                                        if (unit == 'sword' && Sword > 0) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                sword: 1
                                                            }, {}, COMMAND_TYPES.SUPPORT, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            addLog(village.id, targetFinal.id, unit, 'wsparcie')
                                                        }
                                                        if (unit == 'heavy_cavalry' && HC > 0) {
                                                            commandQueue.addCommand(village, targetFinal, date, whenSend, {
                                                                heavy_cavalry: 1
                                                            }, {}, COMMAND_TYPES.SUPPORT, false)
                                                            ownLimit -= 1
                                                            targetLimit -= 1
                                                            addLog(village.id, targetFinal.id, unit, 'wsparcie')
                                                        } else {
                                                            utils.notif('error', $filter('i18n')('error_no_supportUnit', $rootScope.loc.ale, 'fake_sender'))
                                                        }
                                                    })
                                                } else {
                                                    utils.notif('error', $filter('i18n')('error_no_type', $rootScope.loc.ale, 'fake_sender'))
                                                }
                                                if (!commandQueue.isRunning()) {
                                                    commandQueue.start()
                                                }
                                            })
                                        }
                                    })
                                }
                            }
                        }, index1 * 2000)
                    })
                })
            }, index * fakeVillages.length * 2200)
        })
    }
    const fakeSender = {}
    fakeSender.init = function() {
        commandQueue = require('two/commandQueue')
        COMMAND_QUEUE_DATE_TYPES = require('two/commandQueue/types/dates')
        initialized = true
        logs = Lockr.get(STORAGE_KEYS.LOGS, [], true)
        settings = new Settings({
            settingsMap: SETTINGS_MAP,
            storageKey: STORAGE_KEYS.SETTINGS
        })
        settings.onChange(function(changes, updates) {
            fakeSenderSettings = settings.getAll()
            if (updates[UPDATES.GROUPS]) {
                updateGroups()
            }
        })
        fakeSenderSettings = settings.getAll()
        console.log('fakeSender settings', fakeSenderSettings)
        $rootScope.$on(eventTypeProvider.GROUPS_CREATED, updateGroups)
        $rootScope.$on(eventTypeProvider.GROUPS_DESTROYED, updateGroups)
        $rootScope.$on(eventTypeProvider.GROUPS_UPDATED, updateGroups)
    }
    fakeSender.getLogs = function() {
        return logs
    }
    fakeSender.clearLogs = function() {
        logs = []
        Lockr.set(STORAGE_KEYS.LOGS, logs)
        eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_CLEAR_LOGS)
        return logs
    }
    fakeSender.fakeGroups = function() {
        targetGroups = fakeSenderSettings[SETTINGS.GROUP_TARGET]
        targetGroups.forEach(function(group) {
            groupTargets = groupList.getGroupVillageIds(group)
            for (var i of groupTargets) {
                targets.push(i)
            }
        })
        fakeUnits = fakeSenderSettings[SETTINGS.UNITG]
        supportUnits = fakeSenderSettings[SETTINGS.UNIT_SUPPORTG]
        fourUnit = fakeSenderSettings[SETTINGS.UNIT_FOURG]
        console.log(fakeUnits, supportUnits, fourUnit)
        if (fourUnit == 'trebuchet') {
            snobUnit = {
                trebuchet: 1
            }
        } else if (fourUnit == 'ram') {
            snobUnit = {
                ram: 1
            }
        } else if (fourUnit == 'catapult') {
            snobUnit = {
                catapult: 1
            }
        }
        fakeType = fakeSenderSettings[SETTINGS.TYPEG]
        date = fakeSenderSettings[SETTINGS.DATEG]
        targetLimit = fakeSenderSettings[SETTINGS.LIMIT_TARGETG]
        ownGroups = fakeSenderSettings[SETTINGS.GROUPG]
        ownGroups.forEach(function(group) {
            groupVillages = groupList.getGroupVillageIds(group)
            for (var i of groupVillages) {
                fakeVillages.push(i)
            }
        })
        commandInterval = fakeSenderSettings[SETTINGS.COMMAND_INTERVALG]
        dateType = fakeSenderSettings[SETTINGS.DATE_TYPEG]
        if (dateType == 'date_type_arrive') {
            whenSend = COMMAND_QUEUE_DATE_TYPES.ARRIVE
        } else {
            whenSend = COMMAND_QUEUE_DATE_TYPES.OUT
        }
        sendFakes()
    }
    fakeSender.fakeTribe = function() {
        tribeId = fakeSenderSettings[SETTINGS.TRIBE_ID]
        var players = []
        socketService.emit(routeProvider.TRIBE_GET_MEMBERLIST, {
            tribe: tribeId
        }, function(data) {
            var members = data.members
            for (var i = 0; i < members.length; i++) {
                var randomPlayer = Math.floor(Math.random() * members.length)
                players.push(members[randomPlayer].id)
            }
        })
        players.forEach(function(playerId) {
            socketService.emit(routeProvider.CHAR_GET_PROFILE, {
                character_id: playerId
            }, function(data) {
                var villages = data.villages
                villages.forEach(function(village) {
                    targets.push(village.village_id)
                })
            })
        })
        fakeUnits = fakeSenderSettings[SETTINGS.UNITT]
        supportUnits = fakeSenderSettings[SETTINGS.UNIT_SUPPORTT]
        fourUnit = fakeSenderSettings[SETTINGS.UNIT_FOURT]
        console.log(fakeUnits, supportUnits, fourUnit)
        if (fourUnit == 'trebuchet') {
            snobUnit = {
                trebuchet: 1
            }
        } else if (fourUnit == 'ram') {
            snobUnit = {
                ram: 1
            }
        } else if (fourUnit == 'catapult') {
            snobUnit = {
                catapult: 1
            }
        }
        fakeType = fakeSenderSettings[SETTINGS.TYPET]
        date = fakeSenderSettings[SETTINGS.DATET]
        targetLimit = fakeSenderSettings[SETTINGS.LIMIT_TARGETT]
        ownGroups = fakeSenderSettings[SETTINGS.GROUPT]
        ownGroups.forEach(function(group) {
            groupVillages = groupList.getGroupVillageIds(group)
            for (var i of groupVillages) {
                fakeVillages.push(i)
            }
        })
        commandInterval = fakeSenderSettings[SETTINGS.COMMAND_INTERVALT]
        dateType = fakeSenderSettings[SETTINGS.DATE_TYPET]
        if (dateType == 'date_type_arrive') {
            whenSend = COMMAND_QUEUE_DATE_TYPES.ARRIVE
        } else {
            whenSend = COMMAND_QUEUE_DATE_TYPES.OUT
        }
        sendFakes()
    }
    fakeSender.fakeProvince = function() {
        enemies = fakeSenderSettings[SETTINGS.ENEMIES]
        var provinceData = []
        var characterData = 0
        tribeId = 0
        provinceId = fakeSenderSettings[SETTINGS.PROVINCE_ID]
        socketService.emit(routeProvider.MAP_GET_VILLAGE_DETAILS, {
            my_village_id: modelDataService.getSelectedVillage().getId(),
            village_id: provinceId,
            num_reports: 1
        }, function(data) {
            provinceData.push(data.province.x)
            provinceData.push(data.province.y)
            characterData = data.character_id
            socketService.emit(routeProvider.MAP_GETPROVINCE, {
                x: provinceData[0],
                y: provinceData[1]
            }, function(data) {
                var provinceVillages = data.villages
                provinceVillages.forEach(function(village) {
                    if (village.village_id == provinceId) {
                        tribeId = village.tribe_id
                    }
                })
                provinceVillages.forEach(function(fake) {
                    if (enemies && fake.tribe_id == tribeId) {
                        targets.push(fake.village_id)
                    } else if (fake.character_id == characterData) {
                        targets.push(fake.village_id)
                    }
                })
            })
        })
        fakeUnits = fakeSenderSettings[SETTINGS.UNITPro]
        supportUnits = fakeSenderSettings[SETTINGS.UNIT_SUPPORTPro]
        fourUnit = fakeSenderSettings[SETTINGS.UNIT_FOURPro]
        console.log(fakeUnits, supportUnits, fourUnit)
        if (fourUnit == 'trebuchet') {
            snobUnit = {
                trebuchet: 1
            }
        } else if (fourUnit == 'ram') {
            snobUnit = {
                ram: 1
            }
        } else if (fourUnit == 'catapult') {
            snobUnit = {
                catapult: 1
            }
        }
        fakeType = fakeSenderSettings[SETTINGS.TYPEPro]
        date = fakeSenderSettings[SETTINGS.DATEPro]
        targetLimit = fakeSenderSettings[SETTINGS.LIMIT_TARGETPro]
        ownGroups = fakeSenderSettings[SETTINGS.GROUPPro]
        ownGroups.forEach(function(group) {
            groupVillages = groupList.getGroupVillageIds(group)
            for (var i of groupVillages) {
                fakeVillages.push(i)
            }
        })
        commandInterval = fakeSenderSettings[SETTINGS.COMMAND_INTERVALPro]
        dateType = fakeSenderSettings[SETTINGS.DATE_TYPEPro]
        if (dateType == 'date_type_arrive') {
            whenSend = COMMAND_QUEUE_DATE_TYPES.ARRIVE
        } else {
            whenSend = COMMAND_QUEUE_DATE_TYPES.OUT
        }
        sendFakes()
    }
    fakeSender.fakePlayer = function() {
        playerId = fakeSenderSettings[SETTINGS.PLAYER_ID]
        socketService.emit(routeProvider.CHAR_GET_PROFILE, {
            character_id: playerId
        }, function(data) {
            var villages = data.villages
            villages.forEach(function(village) {
                targets.push(village.village_id)
            })
        })
        fakeUnits = fakeSenderSettings[SETTINGS.UNITP]
        supportUnits = fakeSenderSettings[SETTINGS.UNIT_SUPPORTP]
        fourUnit = fakeSenderSettings[SETTINGS.UNIT_FOURP]
        console.log(fakeUnits, supportUnits, fourUnit)
        if (fourUnit == 'trebuchet') {
            snobUnit = {
                trebuchet: 1
            }
        } else if (fourUnit == 'ram') {
            snobUnit = {
                ram: 1
            }
        } else if (fourUnit == 'catapult') {
            snobUnit = {
                catapult: 1
            }
        }
        fakeType = fakeSenderSettings[SETTINGS.TYPEP]
        date = fakeSenderSettings[SETTINGS.DATEP]
        targetLimit = fakeSenderSettings[SETTINGS.LIMIT_TARGETP]
        ownGroups = fakeSenderSettings[SETTINGS.GROUPP]
        ownGroups.forEach(function(group) {
            groupVillages = groupList.getGroupVillageIds(group)
            for (var i of groupVillages) {
                fakeVillages.push(i)
            }
        })
        commandInterval = fakeSenderSettings[SETTINGS.COMMAND_INTERVALP]
        dateType = fakeSenderSettings[SETTINGS.DATE_TYPEP]
        if (dateType == 'date_type_arrive') {
            whenSend = COMMAND_QUEUE_DATE_TYPES.ARRIVE
        } else {
            whenSend = COMMAND_QUEUE_DATE_TYPES.OUT
        }
        sendFakes()
    }
    fakeSender.fakeVillages = function() {
        targets.push(fakeSenderSettings[SETTINGS.TARGET_ID1])
        targets.push(fakeSenderSettings[SETTINGS.TARGET_ID2])
        targets.push(fakeSenderSettings[SETTINGS.TARGET_ID3])
        targets.push(fakeSenderSettings[SETTINGS.TARGET_ID4])
        targets.push(fakeSenderSettings[SETTINGS.TARGET_ID5])
        targets.push(fakeSenderSettings[SETTINGS.TARGET_ID6])
        targets.push(fakeSenderSettings[SETTINGS.TARGET_ID7])
        targets.push(fakeSenderSettings[SETTINGS.TARGET_ID8])
        targets.push(fakeSenderSettings[SETTINGS.TARGET_ID9])
        targets.push(fakeSenderSettings[SETTINGS.TARGET_ID10])
        fakeUnits = fakeSenderSettings[SETTINGS.UNIT]
        supportUnits = fakeSenderSettings[SETTINGS.UNIT_SUPPORT]
        fourUnit = fakeSenderSettings[SETTINGS.UNIT_FOUR]
        console.log(fakeUnits, supportUnits, fourUnit)
        if (fourUnit == 'trebuchet') {
            snobUnit = {
                trebuchet: 1
            }
        } else if (fourUnit == 'ram') {
            snobUnit = {
                ram: 1
            }
        } else if (fourUnit == 'catapult') {
            snobUnit = {
                catapult: 1
            }
        }
        fakeType = fakeSenderSettings[SETTINGS.TYPE]
        date = fakeSenderSettings[SETTINGS.DATEV]
        targetLimit = fakeSenderSettings[SETTINGS.LIMIT_TARGET]
        ownGroups = fakeSenderSettings[SETTINGS.GROUP]
        commandInterval = fakeSenderSettings[SETTINGS.COMMAND_INTERVAL]
        ownGroups.forEach(function(group) {
            groupVillages = groupList.getGroupVillageIds(group)
            for (var i of groupVillages) {
                fakeVillages.push(i)
            }
        })
        dateType = fakeSenderSettings[SETTINGS.DATE_TYPEV]
        if (dateType == 'date_type_arrive') {
            whenSend = COMMAND_QUEUE_DATE_TYPES.ARRIVE
        } else {
            whenSend = COMMAND_QUEUE_DATE_TYPES.OUT
        }
        sendFakes()
    }
    fakeSender.start = function() {
        running = true
        eventQueue.trigger(eventTypeProvider.FAKE_SENDER_START)
        addLog('', '', 'start', '')
    }
    fakeSender.stop = function() {
        running = false
        eventQueue.trigger(eventTypeProvider.FAKE_SENDER_STOP)
        addLog('', '', 'stop', '')
    }
    fakeSender.getSettings = function() {
        return settings
    }
    fakeSender.isInitialized = function() {
        return initialized
    }
    fakeSender.isRunning = function() {
        return running
    }
    return fakeSender
})
define('two/fakeSender/events', [], function () {
    angular.extend(eventTypeProvider, {
        FAKE_SENDER_START: 'fake_sender_start',
        FAKE_SENDER_STOP: 'fake_sender_stop',
        FAKE_SENDER_CLEAR_LOGS: 'fake_sender_clear_logs'
    })
})

define('two/fakeSender/ui', [
    'two/ui',
    'two/fakeSender',
    'two/fakeSender/settings',
    'two/fakeSender/settings/map',
    'two/fakeSender/types/dates',
    'two/fakeSender/types/type',
    'two/fakeSender/types/units',
    'two/fakeSender/types/unitssupport',
    'two/fakeSender/types/unitsfour',
    'two/Settings',
    'queues/EventQueue',
    'two/EventScope',
    'two/utils',
    'helper/time',
    'struct/MapData'
], function (
    interfaceOverflow,
    fakeSender,
    SETTINGS,
    SETTINGS_MAP,
    DATE_TYPES,
    FS_TYPE,
    FS_UNIT,
    FS_UNITSUPPORT,
    FS_UNITFOUR,
    Settings,
    eventQueue,
    EventScope,
    utils,
    $timeHelper,
    mapData
) {
    let $scope
    let settings
    let groupList = modelDataService.getGroupList()
    let $button
    let fakeTarget1
    let fakeTarget2
    let fakeTarget3
    let fakeTarget4
    let fakeTarget5
    let fakeTarget6
    let fakeTarget7
    let fakeTarget8
    let fakeTarget9
    let fakeTarget10
    let fakeTribe1
    let fakePlayer1
    let fakeProvince1
    let running = false
    let mapSelectedVillage1 = false
    let mapSelectedVillage2 = false
    let mapSelectedVillage3 = false
    let mapSelectedVillage4 = false
    let mapSelectedVillage5 = false
    let mapSelectedVillage6 = false
    let mapSelectedVillage7 = false
    let mapSelectedVillage8 = false
    let mapSelectedVillage9 = false
    let mapSelectedVillage10 = false
    let mapSelectedVillageP = false
    let mapSelectedVillagePro = false
    let mapSelectedVillageT = false
    let logsView = {}
    let villagesInfo = {}
    let targetsInfo = {}
    let villagesLabel = {}
    let targetLabel = {}
    
    const TAB_TYPES = {
        FAKE: 'fake',
        LOGS: 'logs'
    }

    const selectTab = function (tabType) {
        $scope.selectedTab = tabType
    }

    const saveSettings = function () {
        settings.setAll(settings.decode($scope.settings))

        utils.notif('success', $filter('i18n')('general.saved', $rootScope.loc.ale, 'fake_sender'))
    }

    const fakePlayer = function () {
        if (fakeSender.isRunning()) {
            fakeSender.stop()
            running = false
        } else {
            fakeSender.start()
            settings.setAll(settings.decode($scope.settings))
            fakeSender.fakePlayer()
        }
    }
    const fakeGroups = function () {
        if (fakeSender.isRunning()) {
            fakeSender.stop()
            running = false
        } else {
            fakeSender.start()
            settings.setAll(settings.decode($scope.settings))
            fakeSender.fakeGroups()
        }
    }
    const fakeProvince = function () {
        if (fakeSender.isRunning()) {
            fakeSender.stop()
            running = false
        } else {
            fakeSender.start()
            settings.setAll(settings.decode($scope.settings))
            fakeSender.fakeProvince()
        }
    }
    const fakeTribe = function () {
        if (fakeSender.isRunning()) {
            fakeSender.stop()
            running = false
        } else {
            fakeSender.start()
            settings.setAll(settings.decode($scope.settings))
            fakeSender.fakeTribe()
        }
    }
    const fakeVillages = function () {
        if (fakeSender.isRunning()) {
            fakeSender.stop()
            running = false
        } else {
            fakeSender.start()
            settings.setAll(settings.decode($scope.settings))
            fakeSender.fakeVillages()
        }
    }
    const clear = function() {
        $scope.settings[SETTINGS.COMMAND_INTERVAL] = 2
        $scope.settings[SETTINGS.COMMAND_INTERVALP] = 2
        $scope.settings[SETTINGS.COMMAND_INTERVALT] = 2
        $scope.settings[SETTINGS.COMMAND_INTERVALG] = 2
        $scope.settings[SETTINGS.DATE_TYPE] = 'date_type_arrive'
        $scope.settings[SETTINGS.GROUP] = false
        $scope.settings[SETTINGS.GROUPP] = false
        $scope.settings[SETTINGS.GROUPT] = false
        $scope.settings[SETTINGS.GROUPG] = false
        $scope.settings[SETTINGS.UNIT] = false
        $scope.settings[SETTINGS.UNITP] = false
        $scope.settings[SETTINGS.UNITT] = false
        $scope.settings[SETTINGS.UNITG] = false
        $scope.settings[SETTINGS.TYPE] = false
        $scope.settings[SETTINGS.TYPEP] = false
        $scope.settings[SETTINGS.TYPET] = false
        $scope.settings[SETTINGS.TYPEG] = false
        $scope.settings[SETTINGS.LIMIT_OWN] = 12
        $scope.settings[SETTINGS.LIMIT_OWNP] = 12
        $scope.settings[SETTINGS.LIMIT_OWNG] = 12
        $scope.settings[SETTINGS.LIMIT_OWNT] = 12
        $scope.settings[SETTINGS.LIMIT_TARGET] = 25
        $scope.settings[SETTINGS.LIMIT_TARGETT] = 25
        $scope.settings[SETTINGS.LIMIT_TARGETP] = 25
        $scope.settings[SETTINGS.LIMIT_TARGETG] = 25
        $scope.settings[SETTINGS.GROUP_TARGET] = false
        settings.setAll(settings.decode($scope.settings))
    }
    const setMapSelectedVillage = function(event, menu) {
        mapSelectedVillage1 = menu.data
        mapSelectedVillage2 = menu.data
        mapSelectedVillage3 = menu.data
        mapSelectedVillage4 = menu.data
        mapSelectedVillage5 = menu.data
        mapSelectedVillage6 = menu.data
        mapSelectedVillage7 = menu.data
        mapSelectedVillage8 = menu.data
        mapSelectedVillage9 = menu.data
        mapSelectedVillage10 = menu.data
        mapSelectedVillageP = menu.data
        mapSelectedVillageT = menu.data
        mapSelectedVillagePro = menu.data
    }
    const unsetMapSelectedVillage = function() {
        mapSelectedVillage1 = false
        mapSelectedVillage2 = false
        mapSelectedVillage3 = false
        mapSelectedVillage4 = false
        mapSelectedVillage5 = false
        mapSelectedVillage6 = false
        mapSelectedVillage7 = false
        mapSelectedVillage8 = false
        mapSelectedVillage9 = false
        mapSelectedVillage10 = false
        mapSelectedVillageP = false
        mapSelectedVillageT = false
        mapSelectedVillagePro = false
    }
    const addMapSelected1 = function() {
        if (!mapSelectedVillage1) {
            return utils.notif('error', $filter('i18n')('error_no_map_selected_village', $rootScope.loc.ale, 'fake_sender'))
        }
        mapData.loadTownDataAsync(mapSelectedVillage1.x, mapSelectedVillage1.y, 1, 1, function(data) {
            fakeTarget1.origin = data
        })
        $scope.settings[SETTINGS.TARGET_ID1] = mapSelectedVillage1.id
    }
    const addMapSelected2 = function() {
        if (!mapSelectedVillage2) {
            return utils.notif('error', $filter('i18n')('error_no_map_selected_village', $rootScope.loc.ale, 'fake_sender'))
        }
        mapData.loadTownDataAsync(mapSelectedVillage2.x, mapSelectedVillage2.y, 1, 1, function(data) {
            fakeTarget2.origin = data
        })
        $scope.settings[SETTINGS.TARGET_ID2] = mapSelectedVillage2.id
    }
    const addMapSelected3 = function() {
        if (!mapSelectedVillage3) {
            return utils.notif('error', $filter('i18n')('error_no_map_selected_village', $rootScope.loc.ale, 'fake_sender'))
        }
        mapData.loadTownDataAsync(mapSelectedVillage3.x, mapSelectedVillage3.y, 1, 1, function(data) {
            fakeTarget3.origin = data
        })
        $scope.settings[SETTINGS.TARGET_ID3] = mapSelectedVillage3.id
    }
    const addMapSelected4 = function() {
        if (!mapSelectedVillage4) {
            return utils.notif('error', $filter('i18n')('error_no_map_selected_village', $rootScope.loc.ale, 'fake_sender'))
        }
        mapData.loadTownDataAsync(mapSelectedVillage4.x, mapSelectedVillage4.y, 1, 1, function(data) {
            fakeTarget4.origin = data
        })
        $scope.settings[SETTINGS.TARGET_ID4] = mapSelectedVillage4.id
    }
    const addMapSelected5 = function() {
        if (!mapSelectedVillage5) {
            return utils.notif('error', $filter('i18n')('error_no_map_selected_village', $rootScope.loc.ale, 'fake_sender'))
        }
        mapData.loadTownDataAsync(mapSelectedVillage5.x, mapSelectedVillage5.y, 1, 1, function(data) {
            fakeTarget5.origin = data
        })
        $scope.settings[SETTINGS.TARGET_ID5] = mapSelectedVillage5.id
    }
    const addMapSelected6 = function() {
        if (!mapSelectedVillage6) {
            return utils.notif('error', $filter('i18n')('error_no_map_selected_village', $rootScope.loc.ale, 'fake_sender'))
        }
        mapData.loadTownDataAsync(mapSelectedVillage6.x, mapSelectedVillage6.y, 1, 1, function(data) {
            fakeTarget6.origin = data
        })
        $scope.settings[SETTINGS.TARGET_ID6] = mapSelectedVillage6.id
    }
    const addMapSelected7 = function() {
        if (!mapSelectedVillage7) {
            return utils.notif('error', $filter('i18n')('error_no_map_selected_village', $rootScope.loc.ale, 'fake_sender'))
        }
        mapData.loadTownDataAsync(mapSelectedVillage7.x, mapSelectedVillage7.y, 1, 1, function(data) {
            fakeTarget7.origin = data
        })
        $scope.settings[SETTINGS.TARGET_ID7] = mapSelectedVillage7.id
    }
    const addMapSelected8 = function() {
        if (!mapSelectedVillage8) {
            return utils.notif('error', $filter('i18n')('error_no_map_selected_village', $rootScope.loc.ale, 'fake_sender'))
        }
        mapData.loadTownDataAsync(mapSelectedVillage8.x, mapSelectedVillage8.y, 1, 1, function(data) {
            fakeTarget8.origin = data
        })
        $scope.settings[SETTINGS.TARGET_ID8] = mapSelectedVillage8.id
    }
    const addMapSelected9 = function() {
        if (!mapSelectedVillage9) {
            return utils.notif('error', $filter('i18n')('error_no_map_selected_village', $rootScope.loc.ale, 'fake_sender'))
        }
        mapData.loadTownDataAsync(mapSelectedVillage9.x, mapSelectedVillage9.y, 1, 1, function(data) {
            fakeTarget9.origin = data
        })
        $scope.settings[SETTINGS.TARGET_ID9] = mapSelectedVillage9.id
    }
    const addMapSelected10 = function() {
        if (!mapSelectedVillage10) {
            return utils.notif('error', $filter('i18n')('error_no_map_selected_village', $rootScope.loc.ale, 'fake_sender'))
        }
        mapData.loadTownDataAsync(mapSelectedVillage10.x, mapSelectedVillage10.y, 1, 1, function(data) {
            fakeTarget10.origin = data
        })
        $scope.settings[SETTINGS.TARGET_ID10] = mapSelectedVillage10.id
    }
    const addMapSelectedPlayer = function() {
        if (!mapSelectedVillageP) {
            return utils.notif('error', $filter('i18n')('error_no_map_selected_village', $rootScope.loc.ale, 'fake_sender'))
        }
        mapData.loadTownDataAsync(mapSelectedVillageP.x, mapSelectedVillageP.y, 1, 1, function(data) {
            fakePlayer1.origin = data
            console.log(data)
        })
        $scope.settings[SETTINGS.PLAYER_ID] = mapSelectedVillageP.character_id
    }
    const addMapSelectedProvince = function() {
        if (!mapSelectedVillagePro) {
            return utils.notif('error', $filter('i18n')('error_no_map_selected_village', $rootScope.loc.ale, 'fake_sender'))
        }
        mapData.loadTownDataAsync(mapSelectedVillagePro.x, mapSelectedVillagePro.y, 1, 1, function(data) {
            fakeProvince1.origin = data
        })
        $scope.settings[SETTINGS.PROVINCE_ID] = mapSelectedVillagePro.id
    }
    const addMapSelectedTribe = function() {
        if (!mapSelectedVillageT) {
            return utils.notif('error', $filter('i18n')('error_no_map_selected_village', $rootScope.loc.ale, 'fake_sender'))
        }
        mapData.loadTownDataAsync(mapSelectedVillageT.x, mapSelectedVillageT.y, 1, 1, function(data) {
            fakeTribe1.origin = data
        })
        $scope.settings[SETTINGS.TRIBE_ID] = mapSelectedVillageT.tribe_id
    }
    const formatedDate = function (_ms) {
        const date = new Date(_ms || ($timeHelper.gameTime() + utils.getTimeOffset()))

        const rawMS = date.getMilliseconds()
        const ms = $timeHelper.zerofill(rawMS - (rawMS % 100), 3)
        const sec = $timeHelper.zerofill(date.getSeconds(), 2)
        const min = $timeHelper.zerofill(date.getMinutes(), 2)
        const hour = $timeHelper.zerofill(date.getHours(), 2)
        const day = $timeHelper.zerofill(date.getDate(), 2)
        const month = $timeHelper.zerofill(date.getMonth() + 1, 2)
        const year = date.getFullYear()

        return hour + ':' + min + ':' + sec + ':' + ms + ' ' + day + '/' + month + '/' + year
    }

    const addDateDiff = function (date, diff) {
        if (!utils.isValidDateTime(date)) {
            return ''
        }

        date = utils.getTimeFromString(date)
        date += diff

        return formatedDate(date)
    }
    const addCurrentDateV = function () {
        $scope.settings[SETTINGS.DATEV] = formatedDate()
    }
    const incrementDateV = function () {
        if (!$scope.settings[SETTINGS.DATEV]) {
            return false
        }

        $scope.settings[SETTINGS.DATEV] = addDateDiff($scope.settings[SETTINGS.DATEV], 100)
    }

    const reduceDateV = function () {
        if (!$scope.settings[SETTINGS.DATEV]) {
            return false
        }

        $scope.settings[SETTINGS.DATEV] = addDateDiff($scope.settings[SETTINGS.DATEV], -100)
    }
    const addCurrentDateT = function () {
        $scope.settings[SETTINGS.DATET] = formatedDate()
    }
    const incrementDateT = function () {
        if (!$scope.settings[SETTINGS.DATET]) {
            return false
        }

        $scope.settings[SETTINGS.DATET] = addDateDiff($scope.settings[SETTINGS.DATET], 100)
    }

    const reduceDateT = function () {
        if (!$scope.settings[SETTINGS.DATET]) {
            return false
        }

        $scope.settings[SETTINGS.DATET] = addDateDiff($scope.settings[SETTINGS.DATET], -100)
    }
    const addCurrentDateP = function () {
        $scope.settings[SETTINGS.DATEP] = formatedDate()
    }
    const incrementDateP = function () {
        if (!$scope.settings[SETTINGS.DATEP]) {
            return false
        }

        $scope.settings[SETTINGS.DATEP] = addDateDiff($scope.settings[SETTINGS.DATEP], 100)
    }

    const reduceDateP = function () {
        if (!$scope.settings[SETTINGS.DATEP]) {
            return false
        }

        $scope.settings[SETTINGS.DATEP] = addDateDiff($scope.settings[SETTINGS.DATEP], -100)
    }
    const addCurrentDatePro = function () {
        $scope.settings[SETTINGS.DATEPRO] = formatedDate()
    }
    const incrementDatePro = function () {
        if (!$scope.settings[SETTINGS.DATEPRO]) {
            return false
        }

        $scope.settings[SETTINGS.DATEPRO] = addDateDiff($scope.settings[SETTINGS.DATEPRO], 100)
    }

    const reduceDatePro = function () {
        if (!$scope.settings[SETTINGS.DATEPRO]) {
            return false
        }

        $scope.settings[SETTINGS.DATEPRO] = addDateDiff($scope.settings[SETTINGS.DATEPRO], -100)
    }
    const addCurrentDateG = function () {
        $scope.settings[SETTINGS.DATEG] = formatedDate()
    }
    const incrementDateG = function () {
        if (!$scope.settings[SETTINGS.DATEG]) {
            return false
        }

        $scope.settings[SETTINGS.DATEG] = addDateDiff($scope.settings[SETTINGS.DATEG], 100)
    }

    const reduceDateG = function () {
        if (!$scope.settings[SETTINGS.DATEG]) {
            return false
        }

        $scope.settings[SETTINGS.DATEG] = addDateDiff($scope.settings[SETTINGS.DATEG], -100)
    }
    const loadVillageInfo = function(villageId) {
        if (villagesInfo[villageId]) {
            return villagesInfo[villageId]
        }
        villagesInfo[villageId] = true
        villagesLabel[villageId] = 'ŁADOWANIE...'
        socketService.emit(routeProvider.MAP_GET_VILLAGE_DETAILS, {
            my_village_id: modelDataService.getSelectedVillage().getId(),
            village_id: villageId,
            num_reports: 1
        }, function(data) {
            villagesInfo[villageId] = {
                x: data.village_x,
                y: data.village_y,
                name: data.village_name,
                last_report: data.last_reports[0]
            }
            villagesLabel[villageId] = `${data.village_name} (${data.village_x}|${data.village_y})`
        })
    }
    const loadTargetInfo = function(targetId) {
        if (targetsInfo[targetId]) {
            return targetsInfo[targetId]
        }
        targetsInfo[targetId] = true
        targetLabel[targetId] = 'ŁADOWANIE...'
        socketService.emit(routeProvider.MAP_GET_VILLAGE_DETAILS, {
            my_village_id: modelDataService.getSelectedVillage().getId(),
            village_id: targetId,
            num_reports: 1
        }, function(data) {
            targetsInfo[targetId] = {
                x: data.village_x,
                y: data.village_y,
                name: data.village_name,
                last_report: data.last_reports[0]
            }
            targetLabel[targetId] = `${data.village_name} (${data.village_x}|${data.village_y})`
        })
    }
    logsView.updateVisibleLogs = function() {
        const offset = $scope.pagination.logs.offset
        const limit = $scope.pagination.logs.limit
        logsView.visibleLogs = logsView.logs.slice(offset, offset + limit)
        $scope.pagination.logs.count = logsView.logs.length
        logsView.visibleLogs.forEach(function(log) {
            if (log.villageId && log.targetId) {
                loadVillageInfo(log.villageId)
                loadTargetInfo(log.targetId)
            }
        })
    }
    logsView.clearLogs = function() {
        fakeSender.clearLogs()
    }

    const eventHandlers = {
        updateGroups: function () {
            $scope.groups = Settings.encodeList(groupList.getGroups(), {
                disabled: false,
                type: 'groups'
            })
        },
        updateLogs: function() {
            $scope.logs = fakeSender.getLogs()
            logsView.updateVisibleLogs()
            if (!$scope.logs.length) {
                utils.notif('success', $filter('i18n')('reseted_logs', $rootScope.loc.ale, 'fake_sender'))
            }
        },
        autoCompleteSelected: function(event, id, data, type) {
            if (id !== 'fakesender_village_search') {
                return false
            }
            fakeTarget1[type] = {
                id: data.raw.id,
                x: data.raw.x,
                y: data.raw.y,
                name: data.raw.name
            }
            $scope.searchQuery[type] = ''
            settings.setAll(settings.decode($scope.settings))
        },
        onAutoCompleteTarget1: function(data) {
            fakeTarget1.origin = {
                id: data.id,
                x: data.x,
                y: data.y,
                name: data.name
            }
            $scope.settings[SETTINGS.TARGET_ID1] = data.id
            settings.setAll(settings.decode($scope.settings))
        },
        onAutoCompleteTarget2: function(data) {
            fakeTarget2.origin = {
                id: data.id,
                x: data.x,
                y: data.y,
                name: data.name
            }
            $scope.settings[SETTINGS.TARGET_ID2] = data.id
            settings.setAll(settings.decode($scope.settings))
        },
        onAutoCompleteTarget3: function(data) {
            fakeTarget3.origin = {
                id: data.id,
                x: data.x,
                y: data.y,
                name: data.name
            }
            $scope.settings[SETTINGS.TARGET_ID3] = data.id
            settings.setAll(settings.decode($scope.settings))
        },
        onAutoCompleteTarget4: function(data) {
            fakeTarget4.origin = {
                id: data.id,
                x: data.x,
                y: data.y,
                name: data.name
            }
            $scope.settings[SETTINGS.TARGET_ID4] = data.id
            settings.setAll(settings.decode($scope.settings))
        },
        onAutoCompleteTarget5: function(data) {
            fakeTarget5.origin = {
                id: data.id,
                x: data.x,
                y: data.y,
                name: data.name
            }
            $scope.settings[SETTINGS.TARGET_ID5] = data.id
            settings.setAll(settings.decode($scope.settings))
        },
        onAutoCompleteTarget6: function(data) {
            fakeTarget6.origin = {
                id: data.id,
                x: data.x,
                y: data.y,
                name: data.name
            }
            $scope.settings[SETTINGS.TARGET_ID6] = data.id
            settings.setAll(settings.decode($scope.settings))
        },
        onAutoCompleteTarget7: function(data) {
            fakeTarget7.origin = {
                id: data.id,
                x: data.x,
                y: data.y,
                name: data.name
            }
            $scope.settings[SETTINGS.TARGET_ID7] = data.id
            settings.setAll(settings.decode($scope.settings))
        },
        onAutoCompleteTarget8: function(data) {
            fakeTarget8.origin = {
                id: data.id,
                x: data.x,
                y: data.y,
                name: data.name
            }
            $scope.settings[SETTINGS.TARGET_ID8] = data.id
            settings.setAll(settings.decode($scope.settings))
        },
        onAutoCompleteTarget9: function(data) {
            fakeTarget9.origin = {
                id: data.id,
                x: data.x,
                y: data.y,
                name: data.name
            }
            $scope.settings[SETTINGS.TARGET_ID9] = data.id
            settings.setAll(settings.decode($scope.settings))
        },
        onAutoCompleteTarget10: function(data) {
            fakeTarget10.origin = {
                id: data.id,
                x: data.x,
                y: data.y,
                name: data.name
            }
            $scope.settings[SETTINGS.TARGET_ID10] = data.id
            settings.setAll(settings.decode($scope.settings))
        },
        onAutoCompleteProvince: function(data) {
            fakeProvince1.origin = {
                id: data.id,
                x: data.x,
                y: data.y,
                name: data.name
            }
            $scope.settings[SETTINGS.PROVINCE_ID] = data.id
            settings.setAll(settings.decode($scope.settings))
        },
        onAutoCompletePlayer: function(data) {
            fakePlayer1.origin = {
                id: data.character_id,
                type: data.type,
                name: data.character_name
            }
            $scope.settings[SETTINGS.PLAYER_ID] = data.id
            settings.setAll(settings.decode($scope.settings))
        },
        onAutoCompleteTribe: function(data) {
            fakeTribe1.origin = {
                id: data.tribe_id,
                type: data.type,
                name: data.tribe_name
            }
            $scope.settings[SETTINGS.TRIBE_ID] = data.id
            settings.setAll(settings.decode($scope.settings))
        },
        clearLogs: function() {
            utils.notif('success', $filter('i18n')('logs_cleared', $rootScope.loc.ale, 'fake_sender'))
            $scope.visibleLogs = []
            eventHandlers.updateLogs()
        },
        start: function () {
            $scope.running = true
        },
        stop: function () {
            $scope.running = false
        }
    }

    const init = function () {
        settings = fakeSender.getSettings()
        fakeTarget1 = {
            origin: false
        }
        fakeTarget2 = {
            origin: false
        }
        fakeTarget3 = {
            origin: false
        }
        fakeTarget4 = {
            origin: false
        }
        fakeTarget5 = {
            origin: false
        }
        fakeTarget6 = {
            origin: false
        }
        fakeTarget7 = {
            origin: false
        }
        fakeTarget8 = {
            origin: false
        }
        fakeTarget9 = {
            origin: false
        }
        fakeTarget10 = {
            origin: false
        }
        fakePlayer1 = {
            origin: false
        }
        fakeProvince1 = {
            origin: false
        }
        fakeTribe1 = {
            origin: false
        }
        interfaceOverflow.addDivisor(21)
        $button = interfaceOverflow.addMenuButton('Watażka', 20, $filter('i18n')('description', $rootScope.loc.ale, 'fake_sender'))
        $button.addEventListener('click', buildWindow)
        eventQueue.register(eventTypeProvider.PRANK_HELPER_START, function() {
            running = true
            $button.classList.remove('btn-orange')
            $button.classList.add('btn-red')
            utils.notif('success', $filter('i18n')('fake_started', $rootScope.loc.ale, 'fake_sender'))
        })
        eventQueue.register(eventTypeProvider.PRANK_HELPER_STOP, function() {
            running = false
            $button.classList.remove('btn-red')
            $button.classList.add('btn-orange')
            utils.notif('success', $filter('i18n')('fake_stopped', $rootScope.loc.ale, 'fake_sender'))
        })

        $rootScope.$on(eventTypeProvider.SHOW_CONTEXT_MENU, setMapSelectedVillage)
        $rootScope.$on(eventTypeProvider.DESTROY_CONTEXT_MENU, unsetMapSelectedVillage)
        interfaceOverflow.addTemplate('twoverflow_fake_sender_window', `___fake_sender_html_main`)
        interfaceOverflow.addStyle('___fake_sender_css_style')
    }

    const buildWindow = function () {
        $scope = $rootScope.$new()
        $scope.SETTINGS = SETTINGS
        $scope.TAB_TYPES = TAB_TYPES
        $scope.running = running
        $scope.selectedTab = TAB_TYPES.FAKE
        $scope.settingsMap = SETTINGS_MAP
        $scope.pagination = {}
        $scope.fakeTarget1 = fakeTarget1
        $scope.fakeTarget2 = fakeTarget2
        $scope.fakeTarget3 = fakeTarget3
        $scope.fakeTarget4 = fakeTarget4
        $scope.fakeTarget5 = fakeTarget5
        $scope.fakeTarget6 = fakeTarget6
        $scope.fakeTarget7 = fakeTarget7
        $scope.fakeTarget8 = fakeTarget8
        $scope.fakeTarget9 = fakeTarget9
        $scope.fakeTarget10 = fakeTarget10
        $scope.fakePlayer1 = fakePlayer1
        $scope.fakeTribe1 = fakeTribe1
        $scope.fakeProvince1 = fakeProvince1
        $scope.clear = clear
        $scope.autoCompleteTarget1 = {
            type: ['village'],
            placeholder: $filter('i18n')('fake.add_village', $rootScope.loc.ale, 'fake_sender'),
            onEnter: eventHandlers.onAutoCompleteVillage1,
            tooltip: $filter('i18n')('fake.add_origin', $rootScope.loc.ale, 'fake_sender'),
            dropDown: true
        }
        $scope.autoCompleteTarget2 = {
            type: ['village'],
            placeholder: $filter('i18n')('fake.add_village', $rootScope.loc.ale, 'fake_sender'),
            onEnter: eventHandlers.onAutoCompleteVillage2,
            tooltip: $filter('i18n')('fake.add_origin', $rootScope.loc.ale, 'fake_sender'),
            dropDown: true
        }
        $scope.autoCompleteTarget3 = {
            type: ['village'],
            placeholder: $filter('i18n')('fake.add_village', $rootScope.loc.ale, 'fake_sender'),
            onEnter: eventHandlers.onAutoCompleteVillage3,
            tooltip: $filter('i18n')('fake.add_origin', $rootScope.loc.ale, 'fake_sender'),
            dropDown: true
        }
        $scope.autoCompleteTarget4 = {
            type: ['village'],
            placeholder: $filter('i18n')('fake.add_village', $rootScope.loc.ale, 'fake_sender'),
            onEnter: eventHandlers.onAutoCompleteVillage4,
            tooltip: $filter('i18n')('fake.add_origin', $rootScope.loc.ale, 'fake_sender'),
            dropDown: true
        }
        $scope.autoCompleteTarget5 = {
            type: ['village'],
            placeholder: $filter('i18n')('fake.add_village', $rootScope.loc.ale, 'fake_sender'),
            onEnter: eventHandlers.onAutoCompleteVillage5,
            tooltip: $filter('i18n')('fake.add_origin', $rootScope.loc.ale, 'fake_sender'),
            dropDown: true
        }
        $scope.autoCompleteTarget6 = {
            type: ['village'],
            placeholder: $filter('i18n')('fake.add_village', $rootScope.loc.ale, 'fake_sender'),
            onEnter: eventHandlers.onAutoCompleteVillage6,
            tooltip: $filter('i18n')('fake.add_origin', $rootScope.loc.ale, 'fake_sender'),
            dropDown: true
        }
        $scope.autoCompleteTarget7 = {
            type: ['village'],
            placeholder: $filter('i18n')('fake.add_village', $rootScope.loc.ale, 'fake_sender'),
            onEnter: eventHandlers.onAutoCompleteVillage7,
            tooltip: $filter('i18n')('fake.add_origin', $rootScope.loc.ale, 'fake_sender'),
            dropDown: true
        }
        $scope.autoCompleteTarget8 = {
            type: ['village'],
            placeholder: $filter('i18n')('fake.add_village', $rootScope.loc.ale, 'fake_sender'),
            onEnter: eventHandlers.onAutoCompleteVillage8,
            tooltip: $filter('i18n')('fake.add_origin', $rootScope.loc.ale, 'fake_sender'),
            dropDown: true
        }
        $scope.autoCompleteTarget9 = {
            type: ['village'],
            placeholder: $filter('i18n')('fake.add_village', $rootScope.loc.ale, 'fake_sender'),
            onEnter: eventHandlers.onAutoCompleteVillage9,
            tooltip: $filter('i18n')('fake.add_origin', $rootScope.loc.ale, 'fake_sender'),
            dropDown: true
        }
        $scope.autoCompleteTarget10 = {
            type: ['village'],
            placeholder: $filter('i18n')('fake.add_village', $rootScope.loc.ale, 'fake_sender'),
            onEnter: eventHandlers.onAutoCompleteVillage10,
            tooltip: $filter('i18n')('fake.add_origin', $rootScope.loc.ale, 'fake_sender'),
            dropDown: true
        }
        $scope.autoCompleteProvince = {
            type: ['village'],
            placeholder: $filter('i18n')('fake.add_province', $rootScope.loc.ale, 'fake_sender'),
            onEnter: eventHandlers.onAutoCompleteProvince,
            tooltip: $filter('i18n')('fake.add_origin', $rootScope.loc.ale, 'fake_sender'),
            dropDown: true
        }
        $scope.autoCompletePlayer = {
            type: ['character'],
            placeholder: $filter('i18n')('fake.add_player', $rootScope.loc.ale, 'fake_sender'),
            onEnter: eventHandlers.onAutoCompletePlayer,
            tooltip: $filter('i18n')('fake.add_origin', $rootScope.loc.ale, 'fake_sender'),
            dropDown: true
        }
        $scope.autoCompleteTribe = {
            type: ['tribe'],
            placeholder: $filter('i18n')('fake.add_tribe', $rootScope.loc.ale, 'fake_sender'),
            onEnter: eventHandlers.onAutoCompleteTribe,
            tooltip: $filter('i18n')('fake.add_origin', $rootScope.loc.ale, 'fake_sender'),
            dropDown: true
        }
        $scope.datetype = Settings.encodeList(DATE_TYPES, {
            textObject: 'fake_sender',
            disabled: false
        })
        $scope.type = Settings.encodeList(FS_TYPE, {
            textObject: 'fake_sender',
            disabled: false
        })
        $scope.units = Settings.encodeList(FS_UNIT, {
            textObject: 'fake_sender',
            disabled: false
        })
        $scope.unitsfour = Settings.encodeList(FS_UNITFOUR, {
            textObject: 'fake_sender',
            disabled: false
        })
        $scope.unitssupport = Settings.encodeList(FS_UNITSUPPORT, {
            textObject: 'fake_sender',
            disabled: false
        })

        settings.injectScope($scope)
        eventHandlers.updateGroups()

        $scope.selectTab = selectTab
        $scope.saveSettings = saveSettings
        $scope.addCurrentDateV = addCurrentDateV
        $scope.incrementDateV = incrementDateV
        $scope.reduceDateV = reduceDateV
        $scope.addCurrentDateP = addCurrentDateP
        $scope.incrementDateP = incrementDateP
        $scope.reduceDateP = reduceDateP
        $scope.addCurrentDatePro = addCurrentDatePro
        $scope.incrementDatePro = incrementDatePro
        $scope.reduceDatePro = reduceDatePro
        $scope.addCurrentDateT = addCurrentDateT
        $scope.incrementDateT = incrementDateT
        $scope.reduceDateT = reduceDateT
        $scope.addCurrentDateG = addCurrentDateG
        $scope.incrementDateG = incrementDateG
        $scope.reduceDateG = reduceDateG
        $scope.fakePlayer = fakePlayer
        $scope.fakeProvince = fakeProvince
        $scope.fakeTribe = fakeTribe
        $scope.fakeGroups = fakeGroups
        $scope.fakeVillages = fakeVillages
        $scope.addMapSelected1 = addMapSelected1
        $scope.addMapSelected2 = addMapSelected2
        $scope.addMapSelected3 = addMapSelected3
        $scope.addMapSelected4 = addMapSelected4
        $scope.addMapSelected5 = addMapSelected5
        $scope.addMapSelected6 = addMapSelected6
        $scope.addMapSelected7 = addMapSelected7
        $scope.addMapSelected8 = addMapSelected8
        $scope.addMapSelected9 = addMapSelected9
        $scope.addMapSelected10 = addMapSelected10
        $scope.addMapSelectedTribe = addMapSelectedTribe
        $scope.addMapSelectedPlayer = addMapSelectedPlayer
        $scope.addMapSelectedProvince = addMapSelectedProvince
        $scope.logsView = logsView
        $scope.logsView.logs = fakeSender.getLogs()
        $scope.villagesInfo = villagesInfo
        $scope.targetsInfo = targetsInfo
        $scope.villagesLabel = villagesLabel
        $scope.targetLabel = targetLabel
        $scope.openVillageInfo = windowDisplayService.openVillageInfo
        $scope.jumpToVillage = mapService.jumpToVillage
        $scope.pagination.logs = {
            count: logsView.logs.length,
            offset: 0,
            loader: logsView.updateVisibleLogs,
            limit: storageService.getPaginationLimit()
        }
        logsView.updateVisibleLogs()

        let eventScope = new EventScope('twoverflow_fake_sender_window', function onDestroy () {
            console.log('fakeSender closed')
        })

        eventScope.register(eventTypeProvider.SELECT_SELECTED, eventHandlers.autoCompleteSelected, true)
        eventScope.register(eventTypeProvider.GROUPS_CREATED, eventHandlers.updateGroups, true)
        eventScope.register(eventTypeProvider.GROUPS_DESTROYED, eventHandlers.updateGroups, true)
        eventScope.register(eventTypeProvider.GROUPS_UPDATED, eventHandlers.updateGroups, true)
        eventScope.register(eventTypeProvider.FAKE_SENDER_CLEAR_LOGS, eventHandlers.clearLogs)
        eventScope.register(eventTypeProvider.FAKE_SENDER_START, eventHandlers.start)
        eventScope.register(eventTypeProvider.FAKE_SENDER_STOP, eventHandlers.stop)
        
        windowManagerService.getScreenWithInjectedScope('!twoverflow_fake_sender_window', $scope)
    }

    return init
})

define('two/fakeSender/settings', [], function () {
    return {
        COMMAND_INTERVAL: 'interval_villages',
        COMMAND_INTERVALP: 'interval_player',
        COMMAND_INTERVALPro: 'interval_province',
        COMMAND_INTERVALT: 'interval_tribe',
        COMMAND_INTERVALG: 'interval_groups',
        DATEPro: 'datepro',
        DATEP: 'datep',
        DATEG: 'dateg',
        DATET: 'datet',
        DATEV: 'datev',
        DATE_TYPEPro: 'datetypepro',
        DATE_TYPEP: 'datetypep',
        DATE_TYPEG: 'datetypeg',
        DATE_TYPET: 'datetypet',
        DATE_TYPEV: 'datetypev',
        GROUP: 'groups_villages',
        GROUPP: 'groups_player',
        GROUPPro: 'groups_province',
        GROUPT: 'groups_tribe',
        GROUPG: 'groups_groups',
        UNIT: 'units_villages',
        UNITP: 'units_player',
        UNITPro: 'units_province',
        UNITT: 'units_tribe',
        UNITG: 'units_groups',
        UNIT_SUPPORT: 'unit_support_villages',
        UNIT_SUPPORTP: 'unit_support_player',
        UNIT_SUPPORTPro: 'unit_support_province',
        UNIT_SUPPORTT: 'unit_support_tribe',
        UNIT_SUPPORTG: 'unit_support_groups',
        UNIT_FOUR: 'unit_four_villages',
        UNIT_FOURP: 'unit_four_player',
        UNIT_FOURPro: 'unit_four_province',
        UNIT_FOURT: 'unit_four_tribe',
        UNIT_FOURG: 'unit_four_groups',
        TYPE: 'type_villages',
        TYPEP: 'type_player',
        TYPEPro: 'type_province',
        TYPET: 'type_tribe',
        TYPEG: 'type_groups',
        LIMIT_OWN: 'limit_own_villages',
        LIMIT_OWNP: 'limit_own_player',
        LIMIT_OWNPro: 'limit_own_province',
        LIMIT_OWNT: 'limit_own_tribe',
        LIMIT_OWNG: 'limit_own_groups',
        LIMIT_TARGET: 'limit_target_villages',
        LIMIT_TARGETP: 'limit_target_player',
        LIMIT_TARGETPro: 'limit_target_province',
        LIMIT_TARGETT: 'limit_target_tribe',
        LIMIT_TARGETG: 'limit_target_groups',
        TARGET_ID1: 'target_id1',
        TARGET_ID2: 'target_id2',
        TARGET_ID3: 'target_id3',
        TARGET_ID4: 'target_id4',
        TARGET_ID5: 'target_id5',
        TARGET_ID6: 'target_id6',
        TARGET_ID7: 'target_id7',
        TARGET_ID8: 'target_id8',
        TARGET_ID9: 'target_id9',
        TARGET_ID10: 'target_id10',
        TRIBE_ID: 'tribe_id',
        PLAYER_ID: 'player_id',
        PROVINCE_ID: 'province_id',
        ENEMIES: 'enemies',
        GROUP_TARGET: 'groups_target'
    }
})

define('two/fakeSender/settings/updates', function () {
    return {
        GROUPS: 'groups'
    }
})

define('two/fakeSender/settings/map', [
    'two/fakeSender/settings',
    'two/fakeSender/settings/updates'
], function (
    SETTINGS,
    UPDATES
) {
    return {
        [SETTINGS.GROUP]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            multiSelect: true,
            type: 'groups'
        },
        [SETTINGS.GROUPP]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            multiSelect: true,
            type: 'groups'
        },
        [SETTINGS.GROUPPro]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            multiSelect: true,
            type: 'groups'
        },
        [SETTINGS.GROUPT]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            multiSelect: true,
            type: 'groups'
        },
        [SETTINGS.GROUPG]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            multiSelect: true,
            type: 'groups'
        },
        [SETTINGS.GROUP_TARGET]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            multiSelect: true,
            type: 'groups'
        },
        [SETTINGS.TYPE]: {
            default: 'attack',
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.DATE_TYPEPro]: {
            default: 'date_type_arrive',
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.DATE_TYPEP]: {
            default: 'date_type_arrive',
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.DATE_TYPEV]: {
            default: 'date_type_arrive',
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.DATE_TYPEG]: {
            default: 'date_type_arrive',
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.DATE_TYPET]: {
            default: 'date_type_arrive',
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.TYPEP]: {
            default: 'attack',
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.TYPEPro]: {
            default: 'attack',
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.TYPET]: {
            default: 'attack',
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.TYPEG]: {
            default: 'attack',
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT_FOUR]: {
            default: 'trebuchet',
            inputType: 'select'
        },
        [SETTINGS.UNIT_FOURT]: {
            default: 'trebuchet',
            inputType: 'select'
        },
        [SETTINGS.UNIT_FOURP]: {
            default: 'trebuchet',
            inputType: 'select'
        },
        [SETTINGS.UNIT_FOURPro]: {
            default: 'trebuchet',
            inputType: 'select'
        },
        [SETTINGS.UNIT_FOURG]: {
            default: 'trebuchet',
            inputType: 'select'
        },
        [SETTINGS.UNIT_SUPPORT]: {
            default: 'spear',
            multiSelect: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT_SUPPORTT]: {
            default: 'spear',
            multiSelect: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT_SUPPORTP]: {
            default: 'spear',
            multiSelect: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT_SUPPORTPro]: {
            default: 'spear',
            multiSelect: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT_SUPPORTG]: {
            default: 'spear',
            multiSelect: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT]: {
            default: false,
            multiSelect: true,
            inputType: 'select'
        },
        [SETTINGS.UNITT]: {
            default: false,
            multiSelect: true,
            inputType: 'select'
        },
        [SETTINGS.UNITP]: {
            default: false,
            multiSelect: true,
            inputType: 'select'
        },
        [SETTINGS.UNITPro]: {
            default: false,
            multiSelect: true,
            inputType: 'select'
        },
        [SETTINGS.UNITG]: {
            default: false,
            multiSelect: true,
            inputType: 'select'
        },
        [SETTINGS.COMMAND_INTERVAL]: {
            default: 2,
            inputType: 'number',
            min: 1,
            max: 3600
        },
        [SETTINGS.COMMAND_INTERVALP]: {
            default: 2,
            inputType: 'number',
            min: 1,
            max: 3600
        },
        [SETTINGS.COMMAND_INTERVALPro]: {
            default: 2,
            inputType: 'number',
            min: 1,
            max: 3600
        },
        [SETTINGS.COMMAND_INTERVALT]: {
            default: 2,
            inputType: 'number',
            min: 1,
            max: 3600
        },
        [SETTINGS.COMMAND_INTERVALG]: {
            default: 2,
            inputType: 'number',
            min: 1,
            max: 3600
        },
        [SETTINGS.LIMIT_OWN]: {
            default: 12,
            inputType: 'number',
            min: 1,
            max: 50
        },
        [SETTINGS.LIMIT_OWNP]: {
            default: 12,
            inputType: 'number',
            min: 1,
            max: 50
        },
        [SETTINGS.LIMIT_OWNPro]: {
            default: 12,
            inputType: 'number',
            min: 1,
            max: 50
        },
        [SETTINGS.LIMIT_OWNT]: {
            default: 12,
            inputType: 'number',
            min: 1,
            max: 50
        },
        [SETTINGS.LIMIT_OWNG]: {
            default: 12,
            inputType: 'number',
            min: 1,
            max: 50
        },
        [SETTINGS.LIMIT_TARGET]: {
            default: 25,
            inputType: 'number',
            min: 1,
            max: 500
        },
        [SETTINGS.LIMIT_TARGETP]: {
            default: 25,
            inputType: 'number',
            min: 1,
            max: 500
        },
        [SETTINGS.LIMIT_TARGETPro]: {
            default: 25,
            inputType: 'number',
            min: 1,
            max: 500
        },
        [SETTINGS.LIMIT_TARGETT]: {
            default: 25,
            inputType: 'number',
            min: 1,
            max: 500
        },
        [SETTINGS.ENEMIES]: {
            default: false,
            inputType: 'checkbox'
        },
        [SETTINGS.LIMIT_TARGETG]: {
            default: 25,
            inputType: 'number',
            min: 1,
            max: 500
        },
        [SETTINGS.TARGET_ID1]: {
            default: '0',
            inputType: 'text'
        },
        [SETTINGS.TARGET_ID2]: {
            default: '0',
            inputType: 'text'
        },
        [SETTINGS.TARGET_ID3]: {
            default: '0',
            inputType: 'text'
        },
        [SETTINGS.TARGET_ID4]: {
            default: '0',
            inputType: 'text'
        },
        [SETTINGS.TARGET_ID5]: {
            default: '0',
            inputType: 'text'
        },
        [SETTINGS.TARGET_ID6]: {
            default: '0',
            inputType: 'text'
        },
        [SETTINGS.TARGET_ID7]: {
            default: '0',
            inputType: 'text'
        },
        [SETTINGS.TARGET_ID8]: {
            default: '0',
            inputType: 'text'
        },
        [SETTINGS.TARGET_ID9]: {
            default: '0',
            inputType: 'text'
        },
        [SETTINGS.TARGET_ID10]: {
            default: '0',
            inputType: 'text'
        },
        [SETTINGS.TRIBE_ID]: {
            default: '0',
            inputType: 'text'
        },
        [SETTINGS.PLAYER_ID]: {
            default: '0',
            inputType: 'text'
        },
        [SETTINGS.PROVINCE_ID]: {
            default: '0',
            inputType: 'text'
        },
        [SETTINGS.DATEV]: {
            default: '0',
            inputType: 'text'
        },
        [SETTINGS.DATEP]: {
            default: '0',
            inputType: 'text'
        },
        [SETTINGS.DATET]: {
            default: '0',
            inputType: 'text'
        },
        [SETTINGS.DATEG]: {
            default: '0',
            inputType: 'text'
        },
        [SETTINGS.DATEPRO]: {
            default: '0',
            inputType: 'text'
        }
    }
})

define('two/fakeSender/types/type', [], function () {
    return {
        ATTACK: 'attack',
        SUPPORT: 'support',
        QUATTRO: 'four',
        FULL: 'full'
    }
})

define('two/fakeSender/types/dates', [], function () {
    return {
        ARRIVE: 'date_type_arrive',
        OUT: 'date_type_out'
    }
})

define('two/fakeSender/types/units', [], function () {
    return {
        SPEAR: 'spear',
        SWORD: 'sword',
        AXE: 'axe',
        ARCHER: 'archer',
        LIGHT_CAVALRY: 'light_cavalry',
        MOUNTED_ARCHER: 'mounted_archer',
        HEAVY_CAVALRY: 'heavy_cavalry',
        RAM: 'ram',
        CATAPULT: 'catapult',
        TREBUCHET: 'trebuchet',
        DOPPELSOLDNER: 'doppelsoldner'
    }
})

define('two/fakeSender/types/unitssupport', [], function () {
    return {
        SPEAR: 'spear',
        SWORD: 'sword',
        ARCHER: 'archer',
        HEAVY_CAVALRY: 'heavy_cavalry'
    }
})

define('two/fakeSender/types/unitsfour', [], function () {
    return {
        RAM: 'ram',
        CATAPULT: 'catapult',
        TREBUCHET: 'trebuchet'
    }
})
require([
    'two/ready',
    'two/fakeSender',
    'two/fakeSender/ui',
    'two/fakeSender/events'
], function (
    ready,
    fakeSender,
    fakeSenderInterface
) {
    if (fakeSender.isInitialized()) {
        return false
    }

    ready(function () {
        fakeSender.init()
        fakeSenderInterface()
    })
})

define('two/farmOverflow', [
    'two/Settings',
    'two/farmOverflow/types/errors',
    'two/farmOverflow/types/status',
    'two/farmOverflow/settings',
    'two/farmOverflow/settings/map',
    'two/farmOverflow/settings/updates',
    'two/farmOverflow/types/logs',
    'two/mapData',
    'two/utils',
    'two/ready',
    'helper/math',
    'helper/time',
    'queues/EventQueue',
    'conf/commandTypes',
    'conf/village',
    'conf/resourceTypes',
    'struct/MapData',
    'Lockr'
], function(
    Settings,
    ERROR_TYPES,
    STATUS,
    SETTINGS,
    SETTINGS_MAP,
    UPDATES,
    LOG_TYPES,
    twoMapData,
    utils,
    ready,
    math,
    timeHelper,
    eventQueue,
    COMMAND_TYPES,
    VILLAGE_CONFIG,
    RESOURCE_TYPES,
    $mapData,
    Lockr
) {
    let initialized = false
    let running = false
    let settings
    let farmSettings
    let farmers = []
    let logs = []
    let includedVillages = []
    let ignoredVillages = []
    let onlyVillages = []
    let selectedPresets = []
    let activeFarmer = false
    let sendingCommand = false
    let currentTarget = false
    let farmerIndex = 0
    let cycleTimer = null
    let stepDelayTimer = null
    let commandExpireTimer = null
    let exceptionLogs
    let tempVillageReports = {}
    let $player
    let unitsData
    let persistentRunningLastCheck = timeHelper.gameTime()
    let persistentRunningTimer = null
    let nextCycleDate = null
    let currentStatus = 'paused'
    let lastAttack
    let selectedVillage
    const PERSISTENT_RUNNING_CHECK_INTERVAL = 30 * 1000
    const VILLAGE_COMMAND_LIMIT = 50
    const MINIMUM_FARMER_CYCLE_INTERVAL = 1 // minutes
    const MINIMUM_ATTACK_INTERVAL = 0 // seconds
    const STEP_EXPIRE_TIME = 30 * 1000
    const CYCLE_BEGIN = 'cycle_begin'
    const IGNORE_UPDATES = 'ignore_update'
    const STORAGE_KEYS = {
        LOGS: 'farm_overflow_logs',
        SETTINGS: 'farm_overflow_settings',
        EXCEPTION_LOGS: 'farm_overflow_exception_logs'
    }
    const RESOURCES = [
        RESOURCE_TYPES.WOOD,
        RESOURCE_TYPES.CLAY,
        RESOURCE_TYPES.IRON,
    ]
    const villageFilters = {
        distance: function(target) {
            return !target.distance.between(
                farmSettings[SETTINGS.MIN_DISTANCE],
                farmSettings[SETTINGS.MAX_DISTANCE]
            )
        },
        ownPlayer: function(target) {
            return target.character_id === $player.getId()
        },
        included: function(target) {
            return target.character_id && !includedVillages.includes(target.id)
        },
        ignored: function(target) {
            return ignoredVillages.includes(target.id)
        },
        points: function(points) {
            return !points.between(
                farmSettings[SETTINGS.MIN_POINTS],
                farmSettings[SETTINGS.MAX_POINTS]
            )
        }
    }
    const targetFilters = [
        villageFilters.distance,
        villageFilters.ownPlayer,
        villageFilters.included,
        villageFilters.ignored
    ]
    const calcDistances = function(targets, origin) {
        return targets.map(function(target) {
            target.distance = math.actualDistance(origin, target)
            return target
        })
    }
    const filterTargets = function(targets) {
        return targets.filter(function(target) {
            return targetFilters.every(function(fn) {
                return !fn(target)
            })
        })
    }
    const sortTargets = function(targets) {
        return targets.sort(function(a, b) {
            return a.distance - b.distance
        })
    }
    const arrayUnique = function(array) {
        return array.sort().filter(function(item, pos, ary) {
            return !pos || item != ary[pos - 1]
        })
    }
    const reloadTimers = function() {
        if (!running) {
            return
        }
        if (stepDelayTimer) {
            stopTimers()
            activeFarmer.targetStep({
                delay: true
            })
        } else if (cycleTimer) {
            stopTimers()
            eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_CYCLE_BEGIN)
            farmerIndex = 0
            farmerStep()
        }
    }
    const updateIncludedVillage = function() {
        const groupsInclude = farmSettings[SETTINGS.GROUP_INCLUDE]
        includedVillages = []
        groupsInclude.forEach(function(groupId) {
            let groupVillages = modelDataService.getGroupList().getGroupVillageIds(groupId)
            includedVillages = includedVillages.concat(groupVillages)
        })
        includedVillages = arrayUnique(includedVillages)
    }
    const updateIgnoredVillage = function() {
        const groupIgnored = farmSettings[SETTINGS.GROUP_IGNORE]
        ignoredVillages = modelDataService.getGroupList().getGroupVillageIds(groupIgnored)
    }
    const updateOnlyVillage = function() {
        const groupsOnly = farmSettings[SETTINGS.GROUP_ONLY]
        onlyVillages = []
        groupsOnly.forEach(function(groupId) {
            let groupVillages = modelDataService.getGroupList().getGroupVillageIds(groupId)
            groupVillages = groupVillages.filter(function(villageId) {
                return !!$player.getVillage(villageId)
            })
            onlyVillages = onlyVillages.concat(groupVillages)
        })
        onlyVillages = arrayUnique(onlyVillages)
    }
    const updateExceptionLogs = function() {
        const exceptionVillages = ignoredVillages.concat(includedVillages)
        let modified = false
        exceptionVillages.forEach(function(villageId) {
            if (!hasOwn.call(exceptionLogs, villageId)) {
                exceptionLogs[villageId] = {
                    time: timeHelper.gameTime(),
                    report: false
                }
                modified = true
            }
        })
        utils.each(exceptionLogs, function(time, villageId) {
            villageId = parseInt(villageId, 10)
            if (!exceptionVillages.includes(villageId)) {
                delete exceptionLogs[villageId]
                modified = true
            }
        })
        if (modified) {
            Lockr.set(STORAGE_KEYS.EXCEPTION_LOGS, exceptionLogs)
            eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_EXCEPTION_LOGS_UPDATED)
        }
    }
    const updateGroupVillages = function() {
        updateIncludedVillage()
        updateIgnoredVillage()
        updateOnlyVillage()
        updateExceptionLogs()
        eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_EXCEPTION_VILLAGES_UPDATED)
    }
    const villageGroupLink = function(event, data) {
        const groupsInclude = farmSettings[SETTINGS.GROUP_INCLUDE]
        const groupIgnore = farmSettings[SETTINGS.GROUP_IGNORE]
        const groupsOnly = farmSettings[SETTINGS.GROUP_ONLY]
        const isOwnVillage = $player.getVillage(data.village_id)
        let farmerListUpdated = false
        updateGroupVillages()
        if (groupIgnore === data.group_id) {
            if (isOwnVillage) {
                removeFarmer(data.village_id)
                farmerListUpdated = true
            } else {
                removeTarget(data.village_id)
                addLog(LOG_TYPES.IGNORED_VILLAGE, {
                    villageId: data.village_id
                })
                addExceptionLog(data.village_id)
            }
        }
        if (groupsInclude.includes(data.group_id) && !isOwnVillage) {
            reloadTargets()
            addLog(LOG_TYPES.INCLUDED_VILLAGE, {
                villageId: data.village_id
            })
            addExceptionLog(data.village_id)
        }
        if (groupsOnly.includes(data.group_id) && isOwnVillage) {
            let farmer = createFarmer(data.village_id)
            farmer.init().then(function() {
                if (running) {
                    farmer.start()
                }
            })
            farmerListUpdated = true
        }
        if (farmerListUpdated) {
            eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_FARMER_VILLAGES_UPDATED)
        }
    }
    const villageGroupUnlink = function(event, data) {
        const groupsInclude = farmSettings[SETTINGS.GROUP_INCLUDE]
        const groupIgnore = farmSettings[SETTINGS.GROUP_IGNORE]
        const groupsOnly = farmSettings[SETTINGS.GROUP_ONLY]
        const isOwnVillage = $player.getVillage(data.village_id)
        let farmerListUpdated = false
        updateGroupVillages()
        if (groupIgnore === data.group_id) {
            if (isOwnVillage) {
                let farmer = createFarmer(data.village_id)
                farmer.init().then(function() {
                    if (running) {
                        farmer.start()
                    }
                })
                farmerListUpdated = true
            } else {
                reloadTargets()
                addLog(LOG_TYPES.IGNORED_VILLAGE_REMOVED, {
                    villageId: data.village_id
                })
            }
        }
        if (groupsInclude.includes(data.group_id) && !isOwnVillage) {
            reloadTargets()
            addLog(LOG_TYPES.INCLUDED_VILLAGE_REMOVED, {
                villageId: data.village_id
            })
        }
        if (groupsOnly.includes(data.group_id) && isOwnVillage) {
            removeFarmer(data.village_id)
            farmerListUpdated = true
        }
        if (farmerListUpdated) {
            eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_FARMER_VILLAGES_UPDATED)
        }
    }
    const validGroups = function(_flag) {
        const gameGroups = modelDataService.getGroupList().getGroups()
        const groupIgnore = farmSettings[SETTINGS.GROUP_IGNORE]
        const groupsOnly = farmSettings[SETTINGS.GROUP_ONLY]
        const groupsInclude = farmSettings[SETTINGS.GROUP_INCLUDE]
        const validedGroupIgnore = hasOwn.call(gameGroups, groupIgnore) ? groupIgnore : settings.getDefault(SETTINGS.GROUP_IGNORE)
        const validedGroupsOnly = groupsOnly.filter(groupId => hasOwn.call(gameGroups, groupId))
        const validedGroupsInclude = groupsInclude.filter(groupId => hasOwn.call(gameGroups, groupId))
        settings.setAll({
            [SETTINGS.GROUP_IGNORE]: validedGroupIgnore,
            [SETTINGS.GROUP_ONLY]: validedGroupsOnly,
            [SETTINGS.GROUP_INCLUDE]: validedGroupsInclude
        }, _flag)
    }
    const removedGroupListener = function() {
        validGroups()
        updateGroupVillages()
        flushFarmers()
        reloadTargets()
        createFarmers()
    }
    const processPresets = function() {
        selectedPresets = []
        const playerPresets = modelDataService.getPresetList().getPresets()
        const activePresets = farmSettings[SETTINGS.PRESETS]
        activePresets.forEach(function(presetId) {
            if (!hasOwn.call(playerPresets, presetId)) {
                return
            }
            let preset = playerPresets[presetId]
            preset.load = getPresetHaul(preset)
            preset.travelTime = armyService.calculateTravelTime(preset, {
                barbarian: false,
                officers: false
            })
            selectedPresets.push(preset)
        })
        selectedPresets = selectedPresets.sort(function(a, b) {
            return a.travelTime - b.travelTime || b.load - a.load
        })
    }
    const ignoreVillage = function(villageId) {
        const groupIgnore = farmSettings[SETTINGS.GROUP_IGNORE]
        if (!groupIgnore) {
            return false
        }
        socketService.emit(routeProvider.GROUPS_LINK_VILLAGE, {
            group_id: groupIgnore,
            village_id: villageId
        })
        return true
    }
    const sendMessageReply = function(message_id, message) {
        socketService.emit(routeProvider.MESSAGE_REPLY, {
            message_id: message_id,
            message: message
        })
    }
    var genStatusReply = function() {
        var localeStatus = $filter('i18n')('status', $rootScope.loc.ale, 'common')
        var localeVillage = $filter('i18n')('selected_village', $rootScope.loc.ale, 'farm_overflow')
        var localeLast = $filter('i18n')('last_attack', $rootScope.loc.ale, 'farm_overflow')
        console.log(selectedVillage)
        var villageLabel = utils.genVillageLabel(selectedVillage.village.data)
        var last = utils.formatDate(lastAttack)
        var vid = selectedVillage.villageId
        var message = []
        var farmStatus = $filter('i18n')(currentStatus, $rootScope.loc.ale, 'farm_overflow')
        if (currentStatus === 'step_cycle_next') {
            var next = timeHelper.gameTime() + getCycleInterval()
            var nextCycleTime = utils.formatDate(next)
            var cycleText = $filter('i18n')('next_cycle_in', $rootScope.loc.ale, 'farm_overflow')
            message.push('[b]', localeStatus, ':[/b] ', farmStatus, '[br]')
            message.push('[b]', cycleText, ':[/b] ', nextCycleTime, '[br]')
            message.push('[b]', localeVillage, ':[/b] ')
            message.push('[village=', vid, ']', villageLabel, '[/village][br]')
            message.push('[b]', localeLast, ':[/b] ', last)
        } else {
            message.push('[b]', localeStatus, ':[/b] ', farmStatus, '[br]')
            message.push('[b]', localeVillage, ':[/b] ')
            message.push('[village=', vid, ']', villageLabel, '[/village][br]')
            message.push('[b]', localeLast, ':[/b] ', last)
        }
        return message.join('')
    }
    const messageListener = function() {
        var remoteHandler = function(_, data) {
            var id = farmSettings[SETTINGS.REMOTE]
            if (data.participants.length !== 1 || data.title !== id) {
                return false
            }
            var userMessage = data.message.content.trim().toLowerCase()
            switch (userMessage) {
                case 'dawaj':
                case 'lecimy':
                case 'kurwa':
                case 'farmie':
                case 'ciasne leginsy':
                case 'obiwan':
                    farmOverflow.start()
                    sendMessageReply(data.message_id, genStatusReply())
                    eventQueue.trigger('Farm/remoteCommand', ['on'])
                    break
                case 'bierz':
                case 'spadamy':
                case 'chuj':
                case 'karmie':
                case 'luźne dresy':
                case 'padawan':
                    farmOverflow.stop()
                    sendMessageReply(data.message_id, genStatusReply())
                    eventQueue.trigger('Farm/remoteCommand', ['off'])
                    break
                case 'stan':
                case 'jak idzie':
                case 'info':
                    sendMessageReply(data.message_id, genStatusReply())
                    eventQueue.trigger('Farm/remoteCommand', ['status'])
                    break
            }
            return false
        }
        $rootScope.$on(eventTypeProvider.MESSAGE_SENT, remoteHandler)
    }
    const presetListener = function() {
        processPresets()
        if (!selectedPresets.length) {
            eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_STOP, {
                reason: ERROR_TYPES.NO_PRESETS
            })
            currentStatus = 'no_preset'
            if (running) {
                farmOverflow.stop()
            }
        }
    }
    const reportListener = function(event, data) {
        if (!farmSettings[SETTINGS.IGNORE_ON_LOSS] || !farmSettings[SETTINGS.GROUP_IGNORE]) {
            return
        }
        if (!running || data.type !== COMMAND_TYPES.TYPES.ATTACK) {
            return
        }
        // 1 = nocasualties
        // 2 = casualties
        // 3 = defeat
        if (data.result !== 1 && isTarget(data.target_village_id)) {
            tempVillageReports[data.target_village_id] = {
                haul: data.haul,
                id: data.id,
                result: data.result,
                title: data.title
            }
            ignoreVillage(data.target_village_id)
        }
    }
    const commandSentListener = function(event, data) {
        if (!activeFarmer || !currentTarget) {
            return
        }
        if (data.origin.id !== activeFarmer.getId()) {
            return
        }
        if (data.target.id !== currentTarget.id) {
            return
        }
        if (data.direction === 'forward' && data.type === COMMAND_TYPES.TYPES.ATTACK) {
            activeFarmer.commandSent(data)
        }
    }
    const commandErrorListener = function(event, data) {
        if (!activeFarmer || !sendingCommand || !currentTarget) {
            return
        }
        if (data.cause === routeProvider.SEND_PRESET.type) {
            activeFarmer.commandError(data)
        }
    }
    const getPresetHaul = function(preset) {
        let haul = 0
        utils.each(preset.units, function(unitAmount, unitName) {
            if (unitAmount) {
                haul += unitsData[unitName].load * unitAmount
            }
        })
        return haul
    }
    const addExceptionLog = function(villageId) {
        exceptionLogs[villageId] = {
            time: timeHelper.gameTime(),
            report: tempVillageReports[villageId] || false
        }
        delete tempVillageReports[villageId]
        Lockr.set(STORAGE_KEYS.EXCEPTION_LOGS, exceptionLogs)
        eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_EXCEPTION_LOGS_UPDATED)
    }
    const addLog = function(type, data = {}) {
        if (typeof type !== 'string') {
            return false
        }
        if (!angular.isObject(data)) {
            data = {}
        }
        data.time = timeHelper.gameTime()
        data.type = type
        logs.unshift(data)
        trimAndSaveLogs()
        return true
    }
    const trimAndSaveLogs = function() {
        const limit = farmSettings[SETTINGS.LOGS_LIMIT]
        if (logs.length > limit) {
            logs.splice(logs.length - limit, logs.length)
        }
        Lockr.set(STORAGE_KEYS.LOGS, logs)
        eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_LOGS_UPDATED)
    }
    const isTargetBusy = function(attacking, otherAttacking, allVillagesLoaded) {
        const multipleFarmers = farmSettings[SETTINGS.TARGET_MULTIPLE_FARMERS]
        const singleAttack = farmSettings[SETTINGS.TARGET_SINGLE_ATTACK]
        if (multipleFarmers && allVillagesLoaded) {
            if (singleAttack && attacking) {
                return true
            }
        } else if (singleAttack) {
            if (attacking || otherAttacking) {
                return true
            }
        } else if (otherAttacking) {
            return true
        }
        return false
    }
    const enableRequiredPresets = function(villageId, callback) {
        const villagePresets = modelDataService.getPresetList().getPresetsByVillageId(villageId)
        let missingPresets = []
        selectedPresets.forEach(function(preset) {
            if (!hasOwn.call(villagePresets, preset.id)) {
                missingPresets.push(preset.id)
            }
        })
        if (missingPresets.length) {
            // include already enabled presets because you can't only enable
            // missing ones, you need to emit all you want enabled.
            for (let id in villagePresets) {
                if (hasOwn.call(villagePresets, id)) {
                    missingPresets.push(id)
                }
            }
            socketService.emit(routeProvider.ASSIGN_PRESETS, {
                village_id: villageId,
                preset_ids: missingPresets
            }, callback)
            return
        }
        callback()
    }
    const persistentRunningStart = function() {
        let cycleInterval = getCycleInterval()
        let attackInterval = getAttackInterval()
        let timeLimit = cycleInterval + (cycleInterval / 2) + attackInterval
        persistentRunningTimer = setInterval(function() {
            let now = timeHelper.gameTime()
            if (now - persistentRunningLastCheck > timeLimit) {
                farmOverflow.stop()
                setTimeout(farmOverflow.start, 5000)
            }
        }, PERSISTENT_RUNNING_CHECK_INTERVAL)
    }
    const persistentRunningStop = function() {
        clearInterval(persistentRunningTimer)
    }
    const persistentRunningUpdate = function() {
        persistentRunningLastCheck = timeHelper.gameTime()
    }
    const stopTimers = function() {
        clearTimeout(cycleTimer)
        clearTimeout(stepDelayTimer)
        clearTimeout(commandExpireTimer)
        cycleTimer = null
        stepDelayTimer = null
        commandExpireTimer = null
    }
    const getCycleInterval = function() {
        return Math.max(MINIMUM_FARMER_CYCLE_INTERVAL, farmSettings[SETTINGS.FARMER_CYCLE_INTERVAL] * 60 * 1000)
    }
    const getAttackInterval = function() {
        return Math.max(MINIMUM_ATTACK_INTERVAL, farmSettings[SETTINGS.ATTACK_INTERVAL] * 1000)
    }
    const updateLastAttack = function () {
        lastAttack = timeHelper.gameTime()
        Lockr.set('farm-lastAttack', lastAttack)
    }
    const Farmer = function(villageId) {
        this.villageId = villageId
        this.village = $player.getVillage(villageId)
        if (!this.village) {
            throw new Error(`new Farmer -> Village ${villageId} doesn't exist.`)
        }
        this.index = 0
        this.running = false
        this.initialized = false
        this.targets = false
        this.onCycleEndFn = noop
        this.status = STATUS.WAITING_CYCLE
        currentStatus = 'status_waiting_cycle'
    }
    Farmer.prototype.init = function() {
        let loadPromises = []
        if (!this.isInitialized()) {
            loadPromises.push(new Promise((resolve) => {
                if (this.isInitialized()) {
                    return resolve()
                }
                villageService.ensureVillageDataLoaded(this.villageId, resolve)
            }))
            loadPromises.push(new Promise((resolve) => {
                if (this.isInitialized()) {
                    return resolve()
                }
                this.loadTargets(() => {
                    eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_INSTANCE_READY, {
                        villageId: this.villageId
                    })
                    resolve()
                })
            }))
        }
        return Promise.all(loadPromises).then(() => {
            this.initialized = true
        })
    }
    Farmer.prototype.start = function() {
        persistentRunningUpdate()
        if (this.running) {
            return false
        }
        if (!this.initialized) {
            eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_INSTANCE_ERROR_NOT_READY, {
                villageId: this.villageId
            })
            return false
        }
        if (!this.targets.length) {
            eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_INSTANCE_ERROR_NO_TARGETS, {
                villageId: this.villageId
            })
            return false
        }
        activeFarmer = this
        this.running = true
        eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_INSTANCE_START, {
            villageId: this.villageId
        })
        this.targetStep({
            delay: false
        })
        return true
    }
    Farmer.prototype.stop = function(reason) {
        this.running = false
        eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_INSTANCE_STOP, {
            villageId: this.villageId,
            reason: reason
        })
        if (reason === ERROR_TYPES.USER_STOP) {
            this.setStatus(STATUS.USER_STOP)
            currentStatus = 'status_user_stop'
        }
        stopTimers()
        this.onCycleEndFn(reason)
        this.onCycleEndFn = noop
    }
    Farmer.prototype.targetStep = async function(options = {}) {
        if (!this.running) {
            return false
        }
        persistentRunningUpdate()
        const commandList = this.village.getCommandListModel()
        const villageCommands = commandList.getOutgoingCommands(true, true)
        let selectedPreset = false
        let target
        let checkedLocalCommands = false
        let otherVillageAttacking
        let thisVillageAttacking
        let playerVillages
        const delayStep = () => {
            return new Promise((resolve, reject) => {
                if (options.delay) {
                    stepDelayTimer = setTimeout(() => {
                        stepDelayTimer = null
                        if (!this.running) {
                            currentStatus = 'status_user_stop'
                            return reject(STATUS.USER_STOP)
                        }
                        resolve()
                    }, utils.randomSeconds(getAttackInterval()))
                } else {
                    resolve()
                }
            })
        }
        const checkCommandLimit = () => {
            return new Promise((resolve, reject) => {
                const limit = VILLAGE_COMMAND_LIMIT - farmSettings[SETTINGS.PRESERVE_COMMAND_SLOTS]
                if (villageCommands.length >= limit) {
                    reject(STATUS.COMMAND_LIMIT)
                    currentStatus = 'status_command_limit'
                } else {
                    resolve()
                }
            })
        }
        const checkStorage = () => {
            return new Promise((resolve, reject) => {
                if (farmSettings[SETTINGS.IGNORE_FULL_STORAGE]) {
                    const resources = this.village.getResources()
                    const computed = resources.getComputed()
                    const maxStorage = resources.getMaxStorage()
                    const isFull = RESOURCES.every((type) => computed[type].currentStock === maxStorage)
                    if (isFull) {
                        currentStatus = 'status_full_storage'
                        return reject(STATUS.FULL_STORAGE)
                    }
                }
                resolve()
            })
        }
        const selectTarget = () => {
            return new Promise((resolve, reject) => {
                if (!this.targets.length) {
                    currentStatus = 'status_no_targets'
                    return reject(STATUS.NO_TARGETS)
                }
                if (this.index > this.targets.length || !this.targets[this.index]) {
                    currentStatus = 'status_target_cycle_end'
                    return reject(STATUS.TARGET_CYCLE_END)
                }
                target = this.targets[this.index]
                resolve()
            })
        }
        const checkTarget = () => {
            return new Promise((resolve, reject) => {
                $mapData.getTownAtAsync(target.x, target.y, (data) => {
                    if (villageFilters.points(data.points)) {
                        currentStatus = 'status_not_allowed_points'
                        return reject(STATUS.NOT_ALLOWED_POINTS)
                    }
                    socketService.emit(routeProvider.GET_ATTACKING_FACTOR, {
                        target_id: target.id
                    }, (data) => {
                        if (!this.running) {
                            reject(STATUS.USER_STOP)
                            currentStatus = 'status_user_stop'
                            // abandoned village conquered by some noob.
                        } else if (target.character_id === null && data.owner_id !== null && !includedVillages.includes(target.id)) {
                            reject(STATUS.ABANDONED_CONQUERED)
                            currentStatus = 'status_abandoned_conquered'
                        } else if (target.attack_protection) {
                            reject(STATUS.PROTECTED_VILLAGE)
                            currentStatus = 'status_protected_village'
                        } else {
                            resolve()
                        }
                    })
                })
            })
        }
        const checkPresets = () => {
            return new Promise((resolve, reject) => {
                enableRequiredPresets(this.villageId, () => {
                    if (this.running) {
                        resolve()
                    } else {
                        reject(STATUS.USER_STOP)
                        currentStatus = 'status_user_stop'
                    }
                })
            })
        }
        const selectPreset = () => {
            return new Promise((resolve, reject) => {
                const villageUnits = this.village.getUnitInfo().getUnits()
                const maxTravelTime = farmSettings[SETTINGS.MAX_TRAVEL_TIME] * 60
                const villagePosition = this.village.getPosition()
                const targetDistance = math.actualDistance(villagePosition, target)
                utils.each(selectedPresets, (preset) => {
                    let enoughUnits = !Object.entries(preset.units).some((unit) => {
                        const name = unit[0]
                        const amount = unit[1]
                        return villageUnits[name].in_town < amount
                    })
                    if (!enoughUnits) {
                        return
                    }
                    const travelTime = armyService.calculateTravelTime(preset, {
                        barbarian: !target.character_id,
                        officers: false
                    })
                    if (maxTravelTime > travelTime * targetDistance) {
                        selectedPreset = preset
                        resolve()
                    } else {
                        // why reject with TIME_LIMIT if there are more presets to check?
                        // because the preset list is sorted by travel time.
                        reject(STATUS.TIME_LIMIT)
                        currentStatus = 'status_time_limit'
                    }
                    return false
                })
                if (!selectedPreset) {
                    reject(STATUS.NO_UNITS)
                    currentStatus = 'status_no_units'
                }
            })
        }
        const checkLocalCommands = () => {
            return new Promise((resolve, reject) => {
                otherVillageAttacking = false
                playerVillages = $player.getVillageList()
                const allVillagesLoaded = playerVillages.every((anotherVillage) => anotherVillage.isInitialized(VILLAGE_CONFIG.READY_STATES.OWN_COMMANDS))
                if (allVillagesLoaded) {
                    otherVillageAttacking = playerVillages.some((anotherVillage) => {
                        if (anotherVillage.getId() === this.villageId) {
                            return false
                        }
                        const otherVillageCommands = anotherVillage.getCommandListModel().getOutgoingCommands(true, true)
                        return otherVillageCommands.some((command) => {
                            return command.targetVillageId === target.id && command.data.direction === 'forward'
                        })
                    })
                }
                thisVillageAttacking = villageCommands.some((command) => {
                    return command.data.target.id === target.id && command.data.direction === 'forward'
                })
                if (isTargetBusy(thisVillageAttacking, otherVillageAttacking, allVillagesLoaded)) {
                    currentStatus = 'status_busy_target'
                    return reject(STATUS.BUSY_TARGET)
                }
                if (allVillagesLoaded) {
                    checkedLocalCommands = true
                }
                resolve()
            })
        }
        const minimumInterval = () => {
            return new Promise((resolve, reject) => {
                if (!thisVillageAttacking && !otherVillageAttacking) {
                    return resolve()
                }
                const multipleAttacksInterval = farmSettings[SETTINGS.MULTIPLE_ATTACKS_INTERVAL] * 60
                if (!multipleAttacksInterval) {
                    return resolve()
                }
                // if TARGET_SINGLE_ATTACK is enabled, and TARGET_MULTIPLE_FARMERS is disabled
                // there's no reason the check, since the target is allowed to receive multiple
                // attacks simultaneously.
                if (farmSettings[SETTINGS.TARGET_SINGLE_ATTACK] && !farmSettings[SETTINGS.TARGET_MULTIPLE_FARMERS]) {
                    return resolve()
                }
                const now = Math.round(timeHelper.gameTime() / 1000)
                const villages = farmSettings[SETTINGS.TARGET_MULTIPLE_FARMERS] ? playerVillages : [this.village]
                const position = this.village.getPosition()
                const distance = math.actualDistance(position, target)
                const singleFieldtravelTime = armyService.calculateTravelTime(selectedPreset, {
                    barbarian: !target.character_id,
                    officers: true,
                    effects: true
                })
                const commandTravelTime = armyService.getTravelTimeForDistance(selectedPreset, singleFieldtravelTime, distance, COMMAND_TYPES.TYPES.ATTACK)
                const busyTarget = villages.some((village) => {
                    const commands = village.getCommandListModel().getOutgoingCommands(true, true)
                    const targetCommands = commands.filter((command) => command.targetVillageId === target.id && command.data.direction === 'forward')
                    if (targetCommands.length) {
                        return targetCommands.some((command) => {
                            return Math.abs((now + commandTravelTime) - command.time_completed) < multipleAttacksInterval
                        })
                    }
                })
                if (busyTarget) {
                    currentStatus = 'status_busy_target'
                    return reject(STATUS.BUSY_TARGET)
                }
                resolve()
            })
        }
        const checkLoadedCommands = () => {
            return new Promise((resolve, reject) => {
                if (checkedLocalCommands) {
                    return resolve()
                }
                socketService.emit(routeProvider.MAP_GET_VILLAGE_DETAILS, {
                    my_village_id: this.villageId,
                    village_id: target.id,
                    num_reports: 0
                }, (data) => {
                    if (!this.running) {
                        currentStatus = 'status_user_stop'
                        return reject(STATUS.USER_STOP)
                    }
                    const targetCommands = data.commands.own.filter((command) => command.type === COMMAND_TYPES.TYPES.ATTACK && command.direction === 'forward')
                    const otherAttacking = targetCommands.some((command) => command.start_village_id !== this.villageId)
                    const attacking = targetCommands.some((command) => command.start_village_id === this.villageId)
                    if (isTargetBusy(attacking, otherAttacking, true)) {
                        currentStatus = 'status_busy_target'
                        return reject(STATUS.BUSY_TARGET)
                    }
                    resolve()
                })
            })
        }
        const prepareAttack = () => {
            if (!this.running) {
                return false
            }
            this.setStatus(STATUS.ATTACKING)
            currentStatus = 'status_attacking'
            updateLastAttack()
            sendingCommand = true
            currentTarget = target
            this.index++
            socketService.emit(routeProvider.SEND_PRESET, {
                start_village: this.villageId,
                target_village: target.id,
                army_preset_id: selectedPreset.id,
                type: COMMAND_TYPES.TYPES.ATTACK
            })
        }
        const stepStatus = (status) => {
            stopTimers()
            eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_INSTANCE_STEP_STATUS, {
                villageId: this.villageId,
                error: status
            })
            switch (status) {
                case STATUS.TIME_LIMIT:
                case STATUS.BUSY_TARGET:
                case STATUS.ABANDONED_CONQUERED:
                case STATUS.PROTECTED_VILLAGE: {
                    this.index++
                    this.setStatus(status)
                    this.targetStep(options)
                    currentStatus = 'status_protected_village'
                    break
                }
                case STATUS.USER_STOP: {
                    this.setStatus(status)
                    currentStatus = 'status_user_stop'
                    break
                }
                case STATUS.NOT_ALLOWED_POINTS: {
                    this.index++
                    this.setStatus(status)
                    removeTarget(target.id)
                    this.targetStep(options)
                    currentStatus = 'status_not_allowed_points'
                    break
                }
                case STATUS.NO_UNITS:
                case STATUS.NO_TARGETS:
                case STATUS.FULL_STORAGE:
                case STATUS.COMMAND_LIMIT: {
                    this.index++
                    this.setStatus(status)
                    this.stop(status)
                    currentStatus = 'status_command_limit'
                    break
                }
                case STATUS.TARGET_CYCLE_END: {
                    this.index = 0
                    this.setStatus(status)
                    this.stop(status)
                    currentStatus = 'status_target_cycle_end'
                    break
                }
                case STATUS.EXPIRED_STEP: {
                    this.setStatus(status)
                    this.targetStep()
                    currentStatus = 'status_expired_step'
                    break
                }
                default: {
                    // eslint-disable-next-line no-console
                    console.error('Unknown status:', status)
                    this.index++
                    this.setStatus(STATUS.UNKNOWN)
                    this.stop(STATUS.UNKNOWN)
                    currentStatus = 'status_unknown'
                    break
                }
            }
        }
        let attackPromise = new Promise((resolve, reject) => {
            delayStep()
                .then(checkCommandLimit)
                .then(checkStorage)
                .then(selectTarget)
                .then(checkTarget)
                .then(checkPresets)
                .then(selectPreset)
                .then(checkLocalCommands)
                .then(minimumInterval)
                .then(checkLoadedCommands)
                .then(resolve)
                .catch(reject)
        })
        let expirePromise = new Promise((resolve, reject) => {
            commandExpireTimer = setTimeout(() => {
                if (this.running) {
                    reject(STATUS.EXPIRED_STEP)
                    currentStatus = 'status_expired_step'
                }
            }, STEP_EXPIRE_TIME)
        })
        Promise.race([attackPromise, expirePromise])
            .then(prepareAttack)
            .catch(stepStatus)
    }
    Farmer.prototype.setStatus = function(newStatus) {
        this.status = newStatus
    }
    Farmer.prototype.getStatus = function() {
        currentStatus = 'status_unknown'
        return this.status || STATUS.UNKNOWN
    }
    Farmer.prototype.commandSent = function(data) {
        sendingCommand = false
        currentTarget = false
        stopTimers()
        addLog(LOG_TYPES.ATTACKED_VILLAGE, {
            targetId: data.target.id
        })
        this.targetStep({
            delay: true
        })
    }
    Farmer.prototype.commandError = function() {
        sendingCommand = false
        currentTarget = false
        this.stop(STATUS.COMMAND_ERROR)
        currentStatus = 'status_command_error'
    }
    Farmer.prototype.onCycleEnd = function(handler) {
        this.onCycleEndFn = handler
    }
    Farmer.prototype.loadTargets = function(callback) {
        const pos = this.village.getPosition()
        twoMapData.load((loadedTargets) => {
            this.targets = calcDistances(loadedTargets, pos)
            this.targets = filterTargets(this.targets, pos)
            this.targets = sortTargets(this.targets)
            this.targets = this.targets.slice(0, farmSettings[SETTINGS.TARGET_LIMIT_PER_VILLAGE])
            if (typeof callback === 'function') {
                callback(this.targets)
            }
        })
    }
    Farmer.prototype.getTargets = function() {
        return this.targets
    }
    Farmer.prototype.getIndex = function() {
        return this.index
    }
    Farmer.prototype.getVillage = function() {
        return this.village
    }
    Farmer.prototype.isRunning = function() {
        return this.running
    }
    Farmer.prototype.isInitialized = function() {
        return this.initialized
    }
    Farmer.prototype.removeTarget = function(targetId) {
        if (typeof targetId !== 'number' || !this.targets) {
            return false
        }
        this.targets = this.targets.filter(function(target) {
            return target.id !== targetId
        })
        return true
    }
    Farmer.prototype.getId = function() {
        return this.villageId
    }
    const createFarmer = function(villageId) {
        const groupsOnly = farmSettings[SETTINGS.GROUP_ONLY]
        villageId = parseInt(villageId, 10)
        if (groupsOnly.length && !onlyVillages.includes(villageId)) {
            return false
        }
        if (ignoredVillages.includes(villageId)) {
            return false
        }
        let farmer = farmOverflow.getFarmer(villageId)
        if (!farmer) {
            farmer = new Farmer(villageId)
            farmers.push(farmer)
        }
        return farmer
    }
    const createFarmers = function() {
        utils.each($player.getVillages(), function(village, villageId) {
            createFarmer(villageId)
        })
        eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_FARMER_VILLAGES_UPDATED)
    }
    /**
     * Clean farmer instances by removing villages based on
     * groups-only, only-villages and ignore-villages group filters.
     */
    const flushFarmers = function() {
        const groupsOnly = farmSettings[SETTINGS.GROUP_ONLY]
        let removeIds = []
        farmers.forEach(function(farmer) {
            let villageId = farmer.getId()
            if (groupsOnly.length && !onlyVillages.includes(villageId)) {
                removeIds.push(villageId)
            } else if (ignoredVillages.includes(villageId)) {
                removeIds.push(villageId)
            }
        })
        if (removeIds.length) {
            removeIds.forEach(function(removeId) {
                removeFarmer(removeId)
            })
            eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_FARMER_VILLAGES_UPDATED)
        }
    }
    const removeFarmer = function(farmerId) {
        for (let i = 0; i < farmers.length; i++) {
            if (farmers[i].getId() === farmerId) {
                farmers[i].stop(ERROR_TYPES.KILL_FARMER)
                farmers.splice(i, i + 1)
                return true
            }
        }
        return false
    }
    const farmerStep = function(status) {
        persistentRunningUpdate()
        if (!farmers.length) {
            activeFarmer = false
        } else if (farmerIndex >= farmers.length) {
            farmerIndex = 0
            activeFarmer = false
            nextCycleDate = timeHelper.gameTime() + getCycleInterval()
            eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_CYCLE_END)
            currentStatus = 'step_cycle_next'
        } else {
            activeFarmer = farmers[farmerIndex]
        }
        if (activeFarmer) {
            activeFarmer.onCycleEnd(function(reason) {
                if (reason !== ERROR_TYPES.USER_STOP) {
                    farmerIndex++
                    farmerStep()
                }
            })
            if (status === CYCLE_BEGIN) {
                nextCycleDate = null
                eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_CYCLE_BEGIN)
            }
            activeFarmer.start()
        } else {
            cycleTimer = setTimeout(function() {
                cycleTimer = null
                farmerIndex = 0
                nextCycleDate = null
                eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_CYCLE_BEGIN)
                farmerStep()
            }, getCycleInterval())
        }
    }
    const isTarget = function(targetId) {
        for (let i = 0; i < farmers.length; i++) {
            let farmer = farmers[i]
            let targets = farmer.getTargets()
            for (let j = 0; j < targets.length; j++) {
                let target = targets[j]
                if (target.id === targetId) {
                    return true
                }
            }
        }
        return false
    }
    const removeTarget = function(targetId) {
        farmers.forEach(function(farmer) {
            farmer.removeTarget(targetId)
        })
    }
    const reloadTargets = function() {
        twoMapData.load(function() {
            farmers.forEach(function(farmer) {
                farmer.loadTargets()
            })
        }, true)
    }
    let farmOverflow = {}
    farmOverflow.init = function() {
        initialized = true
        logs = Lockr.get(STORAGE_KEYS.LOGS, [])
        lastAttack = Lockr.get('farm-lastAttack', -1, true)
        exceptionLogs = Lockr.get(STORAGE_KEYS.EXCEPTION_LOGS, {})
        $player = modelDataService.getSelectedCharacter()
        unitsData = modelDataService.getGameData().getUnitsObject()
        settings = new Settings({
            settingsMap: SETTINGS_MAP,
            storageKey: STORAGE_KEYS.SETTINGS
        })
        settings.onChange(function(changes, updates, _flag) {
            farmSettings = settings.getAll()
            if (_flag === IGNORE_UPDATES) {
                return
            }
            if (updates[UPDATES.PRESET]) {
                processPresets()
            }
            if (updates[UPDATES.GROUPS]) {
                updateGroupVillages()
            }
            if (updates[UPDATES.TARGETS]) {
                reloadTargets()
            }
            if (updates[UPDATES.VILLAGES]) {
                flushFarmers()
                createFarmers()
            }
            if (updates[UPDATES.LOGS]) {
                trimAndSaveLogs()
            }
            if (updates[UPDATES.INTERVAL_TIMERS]) {
                reloadTimers()
            }
        })
        farmSettings = settings.getAll()
        validGroups(IGNORE_UPDATES)
        updateGroupVillages()
        createFarmers()
        messageListener()
        ready(function() {
            processPresets()
        }, 'presets')
        ready(function() {
            farmers.forEach(function(farmer) {
                farmer.loadTargets()
            })
        }, 'minimap_data')
        $rootScope.$on(eventTypeProvider.ARMY_PRESET_UPDATE, presetListener)
        $rootScope.$on(eventTypeProvider.ARMY_PRESET_DELETED, presetListener)
        $rootScope.$on(eventTypeProvider.GROUPS_VILLAGE_LINKED, villageGroupLink)
        $rootScope.$on(eventTypeProvider.GROUPS_VILLAGE_UNLINKED, villageGroupUnlink)
        $rootScope.$on(eventTypeProvider.GROUPS_DESTROYED, removedGroupListener)
        $rootScope.$on(eventTypeProvider.COMMAND_SENT, commandSentListener)
        $rootScope.$on(eventTypeProvider.MESSAGE_ERROR, commandErrorListener)
        $rootScope.$on(eventTypeProvider.REPORT_NEW, reportListener)
    }
    farmOverflow.start = function() {
        let readyFarmers
        if (running) {
            return false
        }
        if (!selectedPresets.length) {
            eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_STOP, {
                reason: ERROR_TYPES.NO_PRESETS
            })
            currentStatus = 'no_preset'
            return false
        }
        running = true
        readyFarmers = []
        farmers.forEach(function(farmer) {
            readyFarmers.push(new Promise(function(resolve) {
                farmer.init().then(resolve)
                selectedVillage = farmer
            }))
        })
        if (!readyFarmers.length) {
            running = false
            return false
        }
        Promise.all(readyFarmers).then(function() {
            farmerStep(CYCLE_BEGIN)
        })
        persistentRunningUpdate()
        persistentRunningStart()
        eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_START)
        addLog(LOG_TYPES.FARM_START)
    }
    farmOverflow.stop = function(reason = STATUS.USER_STOP) {
        if (activeFarmer) {
            activeFarmer.stop(reason)
            if (reason !== STATUS.USER_STOP) {
                nextCycleDate = timeHelper.gameTime() + getCycleInterval()
                currentStatus = 'step_cycle_next'
            }
            eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_CYCLE_END, reason)
        } else {
            nextCycleDate = null
        }
        running = false
        stopTimers()
        eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_STOP, {
            reason: reason
        })
        persistentRunningStop()
        if (reason === STATUS.USER_STOP) {
            addLog(LOG_TYPES.FARM_STOP)
        }
    }
    farmOverflow.getFarmer = function(farmerId) {
        return farmers.find(function(farmer) {
            return farmer.getId() === farmerId
        })
    }
    farmOverflow.getFarmers = function() {
        return farmers
    }
    farmOverflow.getSettings = function() {
        return settings
    }
    farmOverflow.getExceptionVillages = function() {
        return {
            included: includedVillages,
            ignored: ignoredVillages
        }
    }
    farmOverflow.getExceptionLogs = function() {
        return exceptionLogs
    }
    farmOverflow.isInitialized = function() {
        return initialized
    }
    farmOverflow.isRunning = function() {
        return running
    }
    farmOverflow.getLogs = function() {
        return logs
    }
    farmOverflow.clearLogs = function() {
        logs = []
        Lockr.set(STORAGE_KEYS.LOGS, logs)
        eventQueue.trigger(eventTypeProvider.FARM_OVERFLOW_LOGS_UPDATED)
        return logs
    }
    farmOverflow.getNextCycleDate = function() {
        return nextCycleDate
    }
    farmOverflow.getCycleInterval = getCycleInterval
    return farmOverflow
})
define('two/farmOverflow/events', [], function () {
    angular.extend(eventTypeProvider, {
        FARM_OVERFLOW_START: 'farm_overflow_start',
        FARM_OVERFLOW_STOP: 'farm_overflow_stop',
        FARM_OVERFLOW_INSTANCE_READY: 'farm_overflow_instance_ready',
        FARM_OVERFLOW_INSTANCE_START: 'farm_overflow_instance_start',
        FARM_OVERFLOW_INSTANCE_STOP: 'farm_overflow_instance_stop',
        FARM_OVERFLOW_INSTANCE_ERROR_NO_TARGETS: 'farm_overflow_instance_error_no_targets',
        FARM_OVERFLOW_INSTANCE_ERROR_NOT_READY: 'farm_overflow_instance_error_not_ready',
        FARM_OVERFLOW_INSTANCE_STEP_STATUS: 'farm_overflow_instance_command_status',
        FARM_OVERFLOW_PRESETS_LOADED: 'farm_overflow_presets_loaded',
        FARM_OVERFLOW_LOGS_UPDATED: 'farm_overflow_log_updated',
        FARM_OVERFLOW_COMMAND_SENT: 'farm_overflow_command_sent',
        FARM_OVERFLOW_IGNORED_TARGET: 'farm_overflow_ignored_target',
        FARM_OVERFLOW_VILLAGE_IGNORED: 'farm_overflow_village_ignored',
        FARM_OVERFLOW_EXCEPTION_VILLAGES_UPDATED: 'farm_overflow_exception_villages_updated',
        FARM_OVERFLOW_FARMER_VILLAGES_UPDATED: 'farm_overflow_farmer_villages_updated',
        FARM_OVERFLOW_REPORTS_UPDATED: 'farm_overflow_reports_updated',
        FARM_OVERFLOW_EXCEPTION_LOGS_UPDATED: 'farm_overflow_exception_logs_updated',
        FARM_OVERFLOW_CYCLE_BEGIN: 'farm_overflow_cycle_begin',
        FARM_OVERFLOW_CYCLE_END: 'farm_overflow_cycle_end'
    })
})

define('two/farmOverflow/ui', [
    'two/ui',
    'two/farmOverflow',
    'two/farmOverflow/types/status',
    'two/farmOverflow/types/errors',
    'two/farmOverflow/types/logs',
    'two/farmOverflow/settings',
    'two/Settings',
    'two/EventScope',
    'two/utils',
    'queues/EventQueue',
    'helper/time'
], function (
    interfaceOverflow,
    farmOverflow,
    STATUS,
    ERROR_TYPES,
    LOG_TYPES,
    SETTINGS,
    Settings,
    EventScope,
    utils,
    eventQueue,
    timeHelper
) {
    let $scope
    let settings
    let presetList = modelDataService.getPresetList()
    let groupList = modelDataService.getGroupList()
    let $button
    let villagesInfo = {}
    let villagesLabel = {}
    let cycleCountdownTimer = null
    const TAB_TYPES = {
        SETTINGS: 'settings',
        VILLAGES: 'villages',
        LOGS: 'logs'
    }

    const updateVisibleLogs = function () {
        const offset = $scope.pagination.offset
        const limit = $scope.pagination.limit

        $scope.visibleLogs = $scope.logs.slice(offset, offset + limit)
        $scope.pagination.count = $scope.logs.length

        $scope.visibleLogs.forEach(function (log) {
            if (log.villageId) {
                loadVillageInfo(log.villageId)
            }

            if (log.targetId) {
                loadVillageInfo(log.targetId)
            }
        })
    }

    // TODO: make it shared with other modules
    const loadVillageInfo = function (villageId) {
        if (villagesInfo[villageId]) {
            return villagesInfo[villageId]
        }

        villagesInfo[villageId] = true
        villagesLabel[villageId] = 'ŁADOWANIE...'

        socketService.emit(routeProvider.MAP_GET_VILLAGE_DETAILS, {
            my_village_id: modelDataService.getSelectedVillage().getId(),
            village_id: villageId,
            num_reports: 1
        }, function (data) {
            villagesInfo[villageId] = {
                x: data.village_x,
                y: data.village_y,
                name: data.village_name,
                last_report: data.last_reports[0]
            }

            villagesLabel[villageId] = `${data.village_name} (${data.village_x}|${data.village_y})`
        })
    }

    const loadExceptionsInfo = function () {
        $scope.exceptionVillages.included.forEach(function (villageId) {
            loadVillageInfo(villageId)
        })
        $scope.exceptionVillages.ignored.forEach(function (villageId) {
            loadVillageInfo(villageId)
        })
    }

    const switchFarm = function () {
        if (farmOverflow.isRunning()) {
            farmOverflow.stop()
        } else {
            farmOverflow.start()
        }
    }

    const selectTab = function (tabType) {
        $scope.selectedTab = tabType
    }

    const saveSettings = function () {
        settings.setAll(settings.decode($scope.settings))
        $scope.saveButtonColor = 'orange'

        utils.notif('success', $filter('i18n')('settings_saved', $rootScope.loc.ale, 'farm_overflow'))
    }

    const removeIgnored = function (villageId) {
        const groupIgnore = settings.get(SETTINGS.GROUP_IGNORE)
        const groupVillages = modelDataService.getGroupList().getGroupVillageIds(groupIgnore)

        if (!groupVillages.includes(villageId)) {
            return false
        }

        socketService.emit(routeProvider.GROUPS_UNLINK_VILLAGE, {
            group_id: groupIgnore,
            village_id: villageId
        })
    }

    const removeIncluded = function (villageId) {
        const groupsInclude = settings.get(SETTINGS.GROUP_INCLUDE)

        groupsInclude.forEach(function (groupId) {
            let groupVillages = modelDataService.getGroupList().getGroupVillageIds(groupId)

            if (groupVillages.includes(villageId)) {
                socketService.emit(routeProvider.GROUPS_UNLINK_VILLAGE, {
                    group_id: groupId,
                    village_id: villageId
                })
            }
        })
    }

    const checkCycleInterval = function () {
        let nextCycleDate = farmOverflow.getNextCycleDate()

        if (nextCycleDate) {
            $scope.showCycleTimer = true
            $scope.nextCycleCountdown = nextCycleDate - timeHelper.gameTime()

            cycleCountdownTimer = setInterval(function () {
                $scope.nextCycleCountdown -= 1000
            }, 1000)
        }
    }

    const eventHandlers = {
        updatePresets: function () {
            $scope.presets = Settings.encodeList(presetList.getPresets(), {
                disabled: false,
                type: 'presets'
            })
        },
        updateGroups: function () {
            $scope.groups = Settings.encodeList(groupList.getGroups(), {
                disabled: false,
                type: 'groups'
            })

            $scope.groupsWithDisabled = Settings.encodeList(groupList.getGroups(), {
                disabled: true,
                type: 'groups'
            })
        },
        start: function () {
            $scope.running = true

            utils.notif('success', $filter('i18n')('farm_started', $rootScope.loc.ale, 'farm_overflow'))
        },
        stop: function (event, data) {
            $scope.running = false
            $scope.showCycleTimer = false
            clearInterval(cycleCountdownTimer)

            switch (data.reason) {
                case ERROR_TYPES.NO_PRESETS: {
                    utils.notif('success', $filter('i18n')('no_preset', $rootScope.loc.ale, 'farm_overflow'))
                    break
                }
                case ERROR_TYPES.USER_STOP: {
                    utils.notif('success', $filter('i18n')('farm_stopped', $rootScope.loc.ale, 'farm_overflow'))
                    break
                }
            }
        },
        updateLogs: function () {
            $scope.logs = angular.copy(farmOverflow.getLogs())
            updateVisibleLogs()

            if (!$scope.logs.length) {
                utils.notif('success', $filter('i18n')('reseted_logs', $rootScope.loc.ale, 'farm_overflow'))
            }
        },
        updateFarmerVillages: function () {
            $scope.farmers = farmOverflow.getFarmers()
        },
        updateExceptionVillages: function () {
            $scope.exceptionVillages = farmOverflow.getExceptionVillages()
            loadExceptionsInfo()
        },
        updateExceptionLogs: function () {
            $scope.exceptionLogs = farmOverflow.getExceptionLogs()
        },
        onCycleBegin: function () {
            $scope.showCycleTimer = false
            clearInterval(cycleCountdownTimer)
        },
        onCycleEnd: function (event, reason) {
            if (reason === STATUS.USER_STOP) {
                return
            }
            
            $scope.showCycleTimer = true
            $scope.nextCycleCountdown = farmOverflow.getCycleInterval()

            cycleCountdownTimer = setInterval(function () {
                $scope.nextCycleCountdown -= 1000
            }, 1000)
        }
    }

    const init = function () {
        settings = farmOverflow.getSettings()
        $button = interfaceOverflow.addMenuButton2('Farmer', 10, $filter('i18n')('description', $rootScope.loc.ale, 'farm_overflow'))

        $button.addEventListener('click', function () {
            buildWindow()
        })

        eventQueue.register(eventTypeProvider.FARM_OVERFLOW_START, function () {
            $button.classList.remove('btn-orange')
            $button.classList.add('btn-red')
        })

        eventQueue.register(eventTypeProvider.FARM_OVERFLOW_STOP, function () {
            $button.classList.remove('btn-red')
            $button.classList.add('btn-orange')
        })

        interfaceOverflow.addTemplate('twoverflow_farm_overflow_window', `___farm_overflow_html_main`)
        interfaceOverflow.addStyle('___farm_overflow_css_style')
    }

    const buildWindow = function () {
        let ignoreWatch = true

        $scope = $rootScope.$new()
        $scope.SETTINGS = SETTINGS
        $scope.TAB_TYPES = TAB_TYPES
        $scope.LOG_TYPES = LOG_TYPES
        $scope.running = farmOverflow.isRunning()
        $scope.selectedTab = TAB_TYPES.SETTINGS
        $scope.farmers = farmOverflow.getFarmers()
        $scope.villagesLabel = villagesLabel
        $scope.villagesInfo = villagesInfo
        $scope.exceptionVillages = farmOverflow.getExceptionVillages()
        $scope.exceptionLogs = farmOverflow.getExceptionLogs()
        $scope.logs = farmOverflow.getLogs()
        $scope.visibleLogs = []
        $scope.showCycleTimer = false
        $scope.nextCycleCountdown = 0
        $scope.saveButtonColor = 'orange'
        $scope.settingsMap = settings.settingsMap

        $scope.pagination = {
            count: $scope.logs.length,
            offset: 0,
            loader: updateVisibleLogs,
            limit: storageService.getPaginationLimit()
        }

        settings.injectScope($scope)
        eventHandlers.updatePresets()
        eventHandlers.updateGroups()
        updateVisibleLogs()
        loadExceptionsInfo()
        checkCycleInterval()

        // scope functions
        $scope.switchFarm = switchFarm
        $scope.selectTab = selectTab
        $scope.saveSettings = saveSettings
        $scope.clearLogs = farmOverflow.clearLogs
        $scope.jumpToVillage = mapService.jumpToVillage
        $scope.openVillageInfo = windowDisplayService.openVillageInfo
        $scope.showReport = reportService.showReport
        $scope.removeIgnored = removeIgnored
        $scope.removeIncluded = removeIncluded

        let eventScope = new EventScope('twoverflow_farm_overflow_window', function onDestroy () {
            clearInterval(cycleCountdownTimer)
        })

        eventScope.register(eventTypeProvider.ARMY_PRESET_UPDATE, eventHandlers.updatePresets, true)
        eventScope.register(eventTypeProvider.ARMY_PRESET_DELETED, eventHandlers.updatePresets, true)
        eventScope.register(eventTypeProvider.GROUPS_UPDATED, eventHandlers.updateGroups, true)
        eventScope.register(eventTypeProvider.GROUPS_CREATED, eventHandlers.updateGroups, true)
        eventScope.register(eventTypeProvider.GROUPS_DESTROYED, eventHandlers.updateGroups, true)
        eventScope.register(eventTypeProvider.FARM_OVERFLOW_START, eventHandlers.start)
        eventScope.register(eventTypeProvider.FARM_OVERFLOW_STOP, eventHandlers.stop)
        eventScope.register(eventTypeProvider.FARM_OVERFLOW_LOGS_UPDATED, eventHandlers.updateLogs)
        eventScope.register(eventTypeProvider.FARM_OVERFLOW_FARMER_VILLAGES_UPDATED, eventHandlers.updateFarmerVillages)
        eventScope.register(eventTypeProvider.FARM_OVERFLOW_EXCEPTION_VILLAGES_UPDATED, eventHandlers.updateExceptionVillages)
        eventScope.register(eventTypeProvider.FARM_OVERFLOW_EXCEPTION_LOGS_UPDATED, eventHandlers.updateExceptionLogs)
        eventScope.register(eventTypeProvider.FARM_OVERFLOW_CYCLE_BEGIN, eventHandlers.onCycleBegin)
        eventScope.register(eventTypeProvider.FARM_OVERFLOW_CYCLE_END, eventHandlers.onCycleEnd)

        windowManagerService.getScreenWithInjectedScope('!twoverflow_farm_overflow_window', $scope)

        $scope.$watch('settings', function () {
            if (!ignoreWatch) {
                $scope.saveButtonColor = 'red'
            }

            ignoreWatch = false
        }, true)
    }

    return init
})

define('two/farmOverflow/settings', [], function () {
    return {
        REMOTE: 'remote',
        PRESETS: 'presets',
        GROUP_IGNORE: 'group_ignore',
        GROUP_INCLUDE: 'group_include',
        GROUP_ONLY: 'group_only',
        MAX_DISTANCE: 'max_distance',
        MIN_DISTANCE: 'min_distance',
        IGNORE_FULL_STORAGE: 'ignore_full_storage',        
        ATTACK_INTERVAL: 'attack_interval',
        MAX_TRAVEL_TIME: 'max_travel_time',
        TARGET_SINGLE_ATTACK: 'target_single_attack',
        TARGET_MULTIPLE_FARMERS: 'target_multiple_farmers',
        MULTIPLE_ATTACKS_INTERVAL: 'multiple_attacks_interval',
        PRESERVE_COMMAND_SLOTS: 'preserve_command_slots',
        FARMER_CYCLE_INTERVAL: 'farmer_cycle_interval',
        MIN_POINTS: 'min_points',
        MAX_POINTS: 'max_points',
        LOGS_LIMIT: 'logs_limit',
        IGNORE_ON_LOSS: 'ignore_on_loss',
        TARGET_LIMIT: 'target_limit'
    }
})

define('two/farmOverflow/settings/updates', function () {
    return {
        PRESET: 'preset',
        GROUPS: 'groups',
        TARGETS: 'targets',
        VILLAGES: 'villages',
        WAITING_VILLAGES: 'waiting_villages',
        FULL_STORAGE: 'full_storage',
        LOGS: 'logs',
        INTERVAL_TIMERS: 'interval_timers'
    }
})

define('two/farmOverflow/settings/map', [
    'two/farmOverflow/settings',
    'two/farmOverflow/settings/updates'
], function (
    SETTINGS,
    UPDATES
) {
    return {
        [SETTINGS.PRESETS]: {
            default: [],
            updates: [
                UPDATES.PRESET,
                UPDATES.INTERVAL_TIMERS
            ],
            disabledOption: true,
            inputType: 'select',
            multiSelect: true,
            type: 'presets'
        },
        [SETTINGS.GROUP_IGNORE]: {
            default: false,
            updates: [
                UPDATES.GROUPS,
                UPDATES.INTERVAL_TIMERS
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP_INCLUDE]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
                UPDATES.TARGETS,
                UPDATES.INTERVAL_TIMERS
            ],
            disabledOption: true,
            inputType: 'select',
            multiSelect: true,
            type: 'groups'
        },
        [SETTINGS.GROUP_ONLY]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
                UPDATES.VILLAGES,
                UPDATES.TARGETS,
                UPDATES.INTERVAL_TIMERS
            ],
            disabledOption: true,
            inputType: 'select',
            multiSelect: true,
            type: 'groups'
        },
        [SETTINGS.ATTACK_INTERVAL]: {
            default: 2,
            updates: [UPDATES.INTERVAL_TIMERS],
            inputType: 'number',
            min: 0,
            max: 120
        },
        [SETTINGS.FARMER_CYCLE_INTERVAL]: {
            default: 5,
            updates: [UPDATES.INTERVAL_TIMERS],
            inputType: 'number',
            min: 1,
            max: 120
        },
        [SETTINGS.TARGET_SINGLE_ATTACK]: {
            default: false,
            updates: [],
            inputType: 'checkbox'
        },
        [SETTINGS.TARGET_MULTIPLE_FARMERS]: {
            default: true,
            updates: [UPDATES.INTERVAL_TIMERS],
            inputType: 'checkbox'
        },
        [SETTINGS.MULTIPLE_ATTACKS_INTERVAL]: {
            default: 5,
            updates: [UPDATES.INTERVAL_TIMERS],
            inputType: 'number',
            min: 0,
            max: 60
        },
        [SETTINGS.PRESERVE_COMMAND_SLOTS]: {
            default: 5,
            updates: [],
            inputType: 'number',
            min: 0,
            max: 50
        },
        [SETTINGS.IGNORE_ON_LOSS]: {
            default: true,
            updates: [],
            inputType: 'checkbox'
        },
        [SETTINGS.IGNORE_FULL_STORAGE]: {
            default: true,
            updates: [UPDATES.INTERVAL_TIMERS],
            inputType: 'checkbox'
        },
        [SETTINGS.MIN_DISTANCE]: {
            default: 0,
            updates: [
                UPDATES.TARGETS,
                UPDATES.INTERVAL_TIMERS
            ],
            inputType: 'number',
            min: 0,
            max: 50
        },
        [SETTINGS.MAX_DISTANCE]: {
            default: 15,
            updates: [
                UPDATES.TARGETS,
                UPDATES.INTERVAL_TIMERS
            ],
            inputType: 'number',
            min: 0,
            max: 50
        },
        [SETTINGS.MIN_POINTS]: {
            default: 0,
            updates: [
                UPDATES.TARGETS,
                UPDATES.INTERVAL_TIMERS
            ],
            inputType: 'number',
            min: 0,
            max: 11223
        },
        [SETTINGS.MAX_POINTS]: {
            default: 3600,
            updates: [
                UPDATES.TARGETS,
                UPDATES.INTERVAL_TIMERS
            ],
            inputType: 'number',
            min: 0,
            max: 11223
        },
        [SETTINGS.MAX_TRAVEL_TIME]: {
            default: 90,
            updates: [UPDATES.INTERVAL_TIMERS],
            inputType: 'number',
            min: 0,
            max: 300
        },
        [SETTINGS.LOGS_LIMIT]: {
            default: 500,
            updates: [UPDATES.LOGS],
            inputType: 'number',
            min: 0,
            max: 2000
        },
        [SETTINGS.TARGET_LIMIT_PER_VILLAGE]: {
            default: 25,
            updates: [UPDATES.TARGETS],
            min: 0,
            max: 500
        },
        [SETTINGS.REMOTE]: {
            default: 'Zadyma',
            inputType: 'text'
        }
    }
})

define('two/farmOverflow/types/errors', [], function () {
    return {
        NO_PRESETS: 'no_preset',
        USER_STOP: 'user_stop',
        KILL_FARMER: 'kill_farmer'
    }
})

define('two/farmOverflow/types/status', [], function () {
    return {
        TIME_LIMIT: 'time_limit',
        COMMAND_LIMIT: 'command_limit',
        FULL_STORAGE: 'full_storage',
        NO_UNITS: 'no_units',
        NO_SELECTED_VILLAGE: 'no_selected_village',
        ABANDONED_CONQUERED: 'abandoned_conquered',
        PROTECTED_VILLAGE: 'protected_village',
        BUSY_TARGET: 'busy_target',
        NO_TARGETS: 'no_targets',
        TARGET_CYCLE_END: 'target_cycle_end',
        FARMER_CYCLE_END: 'farmer_cycle_end',
        COMMAND_ERROR: 'command_error',
        NOT_ALLOWED_POINTS: 'not_allowed_points',
        UNKNOWN: 'unknown',
        ATTACKING: 'attacking',
        WAITING_CYCLE: 'waiting_cycle',
        USER_STOP: 'user_stop',
        EXPIRED_STEP: 'expired_step'
    }
})

define('two/farmOverflow/types/logs', [], function () {
    return {
        FARM_START: 'farm_start',
        FARM_STOP: 'farm_stop',
        IGNORED_VILLAGE: 'ignored_village',
        INCLUDED_VILLAGE: 'included_village',
        IGNORED_VILLAGE_REMOVED: 'ignored_village_removed',
        INCLUDED_VILLAGE_REMOVED: 'included_village_removed',
        ATTACKED_VILLAGE: 'attacked_village'
    }
})

require([
    'two/ready',
    'two/farmOverflow',
    'two/farmOverflow/ui',
    'two/farmOverflow/events'
], function (
    ready,
    farmOverflow,
    farmOverflowInterface
) {
    if (farmOverflow.isInitialized()) {
        return false
    }

    ready(function () {
        farmOverflow.init()
        farmOverflowInterface()
    }, ['map', 'presets'])
})

define('two/minimap', [
    'two/minimap/types/actions',
    'two/minimap/types/mapSizes',
    'two/minimap/settings',
    'two/minimap/settings/map',
    'two/minimap/settings/updates',
    'two/utils',
    'two/ready',
    'two/Settings',
    'two/mapData',
    'queues/EventQueue',
    'Lockr',
    'struct/MapData',
    'helper/mapconvert',
    'cdn',
    'conf/colors',
    'conf/colorGroups',
    'conf/conf',
    'states/MapState'
], function(
    ACTION_TYPES,
    MAP_SIZE_TYPES,
    SETTINGS,
    SETTINGS_MAP,
    UPDATES,
    utils,
    ready,
    Settings,
    twoMapData,
    eventQueue,
    Lockr,
    mapData,
    mapconvert,
    cdn,
    colors,
    colorGroups,
    conf,
    mapState
) {
    let renderingEnabled = false
    let highlights = {}
    let villageSize
    let villageMargin = 1
    let villageBlock
    let lineSize
    let blockOffset
    let allVillages
    let mappedData = {
        village: {},
        character: {},
        tribe: {}
    }
    let boundariesX = {
        a: 0,
        b: 0
    }
    let boundariesY = {
        a: 0,
        b: 0
    }
    let viewBoundariesX = {
        a: 0,
        b: 0
    }
    let viewBoundariesY = {
        a: 0,
        b: 0
    }
    let selectedVillage
    let currentPosition = {}
    let currentCoords = {}
    let mappedVillages = {}
    let hoveredVillage = false
    let hoveredVillageX
    let hoveredVillageY
    let $viewport
    let viewportContext
    let $viewportCache
    let viewportCacheContext
    let $viewportRef
    let viewportRefContext
    let $map
    let $mapWrapper
    let $player
    let playerId
    let playerTribeId
    let villageColors
    let tribeRelations
    let settings
    let minimapSettings
    const STORAGE_KEYS = {
        CACHE_VILLAGES: 'minimap_cache_villages',
        SETTINGS: 'minimap_settings'
    }
    const MAP_SIZES = {
        [MAP_SIZE_TYPES.VERY_SMALL]: 2,
        [MAP_SIZE_TYPES.SMALL]: 3,
        [MAP_SIZE_TYPES.BIG]: 5,
        [MAP_SIZE_TYPES.VERY_BIG]: 7
    }
    const INTERFACE_HEIGHT = 265
    const BORDER_PADDING = 10
    const BORDER_COLOR = '#2B4700'
    const colorService = injector.get('colorService')
    const spriteFactory = injector.get('spriteFactory')
    let allowJump = true
    let allowMove = false
    let dragStart = {}
    let highlightSprite
    let currentMouseCoords = {
        x: 0,
        y: 0
    }
    let firstDraw = true
    const rhexcolor = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/
    const getCoords = function(event) {
        let rawX = Math.ceil(currentPosition.x + event.offsetX) - blockOffset
        let rawY = Math.ceil(currentPosition.y + event.offsetY) + blockOffset
        if (Math.floor((rawY / villageBlock)) % 2) {
            rawX += blockOffset
        }
        rawX -= rawX % villageBlock
        rawY -= rawY % villageBlock
        return {
            x: Math.ceil((rawX - $viewport.width / 2) / villageBlock),
            y: Math.ceil((rawY - $viewport.height / 2) / villageBlock)
        }
    }
    const pixel2Tiles = function(x, y) {
        return {
            x: (x / conf.TILESIZE.x),
            y: (y / conf.TILESIZE.y / conf.TILESIZE.off)
        }
    }
    const convert = function(rect, zoom) {
        zoom = 1 / (zoom || 1)
        const xy = pixel2Tiles(rect[0] * zoom, rect[1] * zoom)
        const wh = pixel2Tiles(rect[2] * zoom, rect[3] * zoom)
        return [
            xy.x - 1,
            xy.y - 1,
            (wh.x + 3) || 1,
            (wh.y + 3) || 1
        ]
    }
    const drawBorders = function() {
        const binUrl = cdn.getPath(conf.getMapPath())
        const continentEnabled = minimapSettings[SETTINGS.SHOW_CONTINENT_DEMARCATIONS]
        const provinceEnabled = minimapSettings[SETTINGS.SHOW_PROVINCE_DEMARCATIONS]
        const drawContinent = function(x, y) {
            viewportCacheContext.fillStyle = minimapSettings[SETTINGS.COLOR_CONTINENT]
            viewportCacheContext.fillRect(x * villageBlock + blockOffset - 1, y * villageBlock + blockOffset - 1, 3, 1)
            viewportCacheContext.fillRect(x * villageBlock + blockOffset, y * villageBlock + blockOffset - 2, 1, 3)
        }
        const drawProvince = function(x, y) {
            viewportCacheContext.fillStyle = minimapSettings[SETTINGS.COLOR_PROVINCE]
            viewportCacheContext.fillRect(x * villageBlock + blockOffset, y * villageBlock + blockOffset - 1, 1, 1)
        }
        utils.xhrGet(binUrl, 'arraybuffer').then(function(xhr) {
            const dataView = new DataView(xhr.response)
            const paddedBoundariesX = {
                a: boundariesX.a - BORDER_PADDING,
                b: boundariesX.b + BORDER_PADDING
            }
            const paddedBoundariesY = {
                a: boundariesY.a - BORDER_PADDING,
                b: boundariesY.b + BORDER_PADDING
            }
            if (continentEnabled || provinceEnabled) {
                for (let x = paddedBoundariesX.a; x < paddedBoundariesX.b; x++) {
                    for (let y = paddedBoundariesY.a; y < paddedBoundariesY.b; y++) {
                        const tile = mapconvert.toTile(dataView, x, y)
                        // is border
                        if (tile.key.b) {
                            // is continental border
                            if (tile.key.c) {
                                if (continentEnabled) {
                                    drawContinent(x, y)
                                } else if (provinceEnabled) {
                                    drawProvince(x, y)
                                }
                            } else if (provinceEnabled) {
                                drawProvince(x, y)
                            }
                        }
                    }
                }
            }
            const borderX = paddedBoundariesX.a * villageBlock
            const borderY = paddedBoundariesY.a * villageBlock
            const borderWidth = (paddedBoundariesX.b - paddedBoundariesX.a) * villageBlock
            const borderHeight = (paddedBoundariesY.b - paddedBoundariesY.a) * villageBlock
            viewportCacheContext.beginPath()
            viewportCacheContext.lineWidth = 2
            viewportCacheContext.strokeStyle = BORDER_COLOR
            viewportCacheContext.rect(borderX, borderY, borderWidth, borderHeight)
            viewportCacheContext.stroke()
        })
    }
    const drawLoadedVillages = function() {
        drawVillages(allVillages)
    }
    const drawViewport = function(pos) {
        viewportContext.drawImage($viewportCache, -pos.x, -pos.y)
    }
    const clearViewport = function() {
        viewportContext.clearRect(0, 0, $viewport.width, $viewport.height)
    }
    const drawViewReference = function(pos) {
        const mapPosition = minimap.getMapPosition()
        const x = ((mapPosition.x - 2) * villageBlock) - pos.x
        const y = ((mapPosition.y - 2) * villageBlock) - pos.y
        viewportRefContext.fillStyle = minimapSettings[SETTINGS.COLOR_VIEW_REFERENCE]
        viewportRefContext.fillRect(x, 0, 1, lineSize)
        viewportRefContext.fillRect(0, y, lineSize, 1)
        const mapRect = $mapWrapper.getBoundingClientRect()
        const refRectWidth = (mapRect.width / conf.TILESIZE.x / mapState.view.z) * villageBlock
        const refRectHeight = (mapRect.height / conf.TILESIZE.y / mapState.view.z) * villageBlock
        const refRectX = x - (refRectWidth / 2)
        const refRectY = y - (refRectHeight / 2)
        viewportRefContext.clearRect(refRectX, refRectY, refRectWidth, refRectHeight)
        viewportRefContext.beginPath()
        viewportRefContext.lineWidth = 1
        viewportRefContext.strokeStyle = minimapSettings[SETTINGS.COLOR_VIEW_REFERENCE]
        viewportRefContext.rect(refRectX, refRectY, refRectWidth, refRectHeight)
        viewportRefContext.stroke()
    }
    const clearCross = function() {
        viewportRefContext.clearRect(0, 0, $viewportRef.width, $viewportRef.height)
    }
    const renderStep = function() {
        if (renderingEnabled) {
            const pos = {
                x: currentPosition.x - ($viewport.width / 2),
                y: currentPosition.y - ($viewport.height / 2)
            }
            clearViewport()
            clearCross()
            drawViewport(pos)
            if (minimapSettings[SETTINGS.SHOW_VIEW_REFERENCE]) {
                drawViewReference(pos)
            }
        }
        window.requestAnimationFrame(renderStep)
    }
    const cacheVillages = function(villages) {
        for (let i = 0, l = villages.length; i < l; i++) {
            let v = villages[i]
            if (v.id < 0) {
                continue
            }
            if (!(v.x in mappedData.village)) {
                mappedData.village[v.x] = {}
            }
            if (!(v.x in mappedVillages)) {
                mappedVillages[v.x] = []
            }
            mappedData.village[v.x][v.y] = v.character_id || 0
            mappedVillages[v.x][v.y] = v
            if (v.character_id) {
                if (v.character_id in mappedData.character) {
                    mappedData.character[v.character_id].push([v.x, v.y])
                } else {
                    mappedData.character[v.character_id] = [
                        [v.x, v.y]
                    ]
                }
                if (v.tribe_id) {
                    if (v.tribe_id in mappedData.tribe) {
                        mappedData.tribe[v.tribe_id].push(v.character_id)
                    } else {
                        mappedData.tribe[v.tribe_id] = [v.character_id]
                    }
                }
            }
        }
    }
    const setBoundaries = function() {
        let allX = []
        let allY = []
        for (let x in mappedData.village) {
            allX.push(x)
            for (let y in mappedData.village[x]) {
                allY.push(y)
            }
        }
        boundariesX.a = Math.min(...allX)
        boundariesX.b = Math.max(...allX)
        boundariesY.a = Math.min(...allY)
        boundariesY.b = Math.max(...allY)
        viewBoundariesX.a = boundariesX.a * villageBlock
        viewBoundariesX.b = boundariesX.b * villageBlock
        viewBoundariesY.a = boundariesY.a * villageBlock
        viewBoundariesY.b = boundariesY.b * villageBlock
    }
    const onHoverVillage = function(coords, event) {
        if (hoveredVillage) {
            if (hoveredVillageX === coords.x && hoveredVillageY === coords.y) {
                return false
            } else {
                onBlurVillage()
            }
        }
        hoveredVillage = true
        hoveredVillageX = coords.x
        hoveredVillageY = coords.y
        eventQueue.trigger(eventTypeProvider.MINIMAP_VILLAGE_HOVER, {
            x: hoveredVillageX,
            y: hoveredVillageY,
            event: event
        })
        const pid = mappedData.village[hoveredVillageX][hoveredVillageY]
        if (pid) {
            highlightVillages(mappedData.character[pid])
        } else {
            highlightVillages([
                [hoveredVillageX, hoveredVillageY]
            ])
        }
    }
    const onBlurVillage = function() {
        if (!hoveredVillage) {
            return false
        }
        const pid = mappedData.village[hoveredVillageX][hoveredVillageY]
        if (pid) {
            unhighlightVillages(mappedData.character[pid])
        } else {
            unhighlightVillages([
                [hoveredVillageX, hoveredVillageY]
            ])
        }
        hoveredVillage = false
        eventQueue.trigger(eventTypeProvider.MINIMAP_VILLAGE_BLUR, {
            x: hoveredVillageX,
            y: hoveredVillageY
        })
    }
    const highlightVillages = function(villages) {
        let villagesData = []
        for (let i = 0; i < villages.length; i++) {
            let x = villages[i][0]
            let y = villages[i][1]
            villagesData.push(mappedVillages[x][y])
        }
        drawVillages(villagesData, minimapSettings[SETTINGS.COLOR_QUICK_HIGHLIGHT])
    }
    const unhighlightVillages = function(villages) {
        let villagesData = []
        for (let i = 0; i < villages.length; i++) {
            let x = villages[i][0]
            let y = villages[i][1]
            villagesData.push(mappedVillages[x][y])
        }
        drawVillages(villagesData)
    }
    const showHighlightSprite = function(x, y) {
        let pos = mapService.tileCoordinate2Pixel(x, y)
        highlightSprite.setTranslation(pos[0] - 25, pos[1] + 2)
        highlightSprite.alpha = 1
    }
    const hideHighlightSprite = function() {
        highlightSprite.alpha = 0
    }
    const quickHighlight = function(x, y) {
        mapData.getTownAtAsync(x, y, function(village) {
            if (!village) {
                return false
            }
            switch (minimapSettings[SETTINGS.RIGHT_CLICK_ACTION]) {
                case ACTION_TYPES.HIGHLIGHT_PLAYER: {
                    if (!village.character_id) {
                        return false
                    }
                    minimap.addHighlight({
                        type: 'character',
                        id: village.character_id
                    }, colors.palette.flat().random())
                    break
                }
                case ACTION_TYPES.HIGHLIGHT_TRIBE: {
                    if (!village.tribe_id) {
                        return false
                    }
                    minimap.addHighlight({
                        type: 'tribe',
                        id: village.tribe_id
                    }, colors.palette.flat().random())
                    break
                }
            }
        })
    }
    const getVillageColor = function(village) {
        if (minimapSettings[SETTINGS.SHOW_ONLY_CUSTOM_HIGHLIGHTS]) {
            if (village.character_id in highlights.character) {
                return highlights.character[village.character_id]
            } else if (village.tribe_id in highlights.tribe) {
                return highlights.tribe[village.tribe_id]
            }
            return false
        }
        if (!village.character_id) {
            if (minimapSettings[SETTINGS.SHOW_BARBARIANS]) {
                return villageColors.barbarian
            }
            return false
        }
        if (village.character_id === playerId) {
            if (village.id === selectedVillage.getId() && minimapSettings[SETTINGS.HIGHLIGHT_SELECTED]) {
                return villageColors.selected
            } else if (village.character_id in highlights.character) {
                return highlights.character[village.character_id]
            } else if (minimapSettings[SETTINGS.HIGHLIGHT_OWN]) {
                return villageColors.player
            }
        } else if (village.character_id in highlights.character) {
            return highlights.character[village.character_id]
        } else if (village.tribe_id in highlights.tribe) {
            return highlights.tribe[village.tribe_id]
        } else if (playerTribeId && playerTribeId === village.tribe_id && minimapSettings[SETTINGS.HIGHLIGHT_DIPLOMACY]) {
            return villageColors.tribe
        } else if (tribeRelations && minimapSettings[SETTINGS.HIGHLIGHT_DIPLOMACY]) {
            if (tribeRelations.isAlly(village.tribe_id)) {
                return villageColors.ally
            } else if (tribeRelations.isEnemy(village.tribe_id)) {
                return villageColors.enemy
            } else if (tribeRelations.isNAP(village.tribe_id)) {
                return villageColors.friendly
            }
        }
        return villageColors.ugly
    }
    const drawVillages = function(villages, predefinedColor) {
        for (let i = 0; i < villages.length; i++) {
            const village = villages[i]
            if (village.id < 0) {
                continue
            }
            const color = predefinedColor || getVillageColor(village)
            if (!color) {
                continue
            }
            const x = village.x * villageBlock + (village.y % 2 ? blockOffset : 0)
            const y = village.y * villageBlock
            viewportCacheContext.fillStyle = color
            viewportCacheContext.fillRect(x, y, villageSize, villageSize)
        }
    }
    const updateMinimapValues = function() {
        villageSize = MAP_SIZES[minimapSettings[SETTINGS.MAP_SIZE]]
        blockOffset = Math.round(villageSize / 2)
        villageBlock = villageSize + villageMargin
        lineSize = villageBlock * 1000
        viewBoundariesX.a = boundariesX.a * villageBlock
        viewBoundariesX.b = boundariesX.b * villageBlock
        viewBoundariesY.a = boundariesY.a * villageBlock
        viewBoundariesY.b = boundariesY.b * villageBlock
        $viewportCache.width = 1000 * villageBlock
        $viewportCache.height = 1000 * villageBlock
        viewportCacheContext.imageSmoothingEnabled = false
    }
    const setViewportSize = function() {
        const WIDTH = 686
        const HEIGHT = document.body.clientHeight - INTERFACE_HEIGHT
        $viewport.width = WIDTH
        $viewport.height = HEIGHT
        $viewportRef.width = WIDTH
        $viewportRef.height = HEIGHT
        viewportContext.imageSmoothingEnabled = false
        viewportRefContext.imageSmoothingEnabled = false
    }
    const eventHandlers = {
        onViewportRefMouseDown: function(event) {
            event.preventDefault()
            allowJump = true
            allowMove = true
            dragStart.x = currentPosition.x + event.pageX
            dragStart.y = currentPosition.y + event.pageY
            if (hoveredVillage) {
                eventQueue.trigger(eventTypeProvider.MINIMAP_VILLAGE_CLICK, [
                    hoveredVillageX,
                    hoveredVillageY,
                    event
                ])
                if (event.which === 3) {
                    quickHighlight(hoveredVillageX, hoveredVillageY)
                }
            }
            eventQueue.trigger(eventTypeProvider.MINIMAP_START_MOVE)
        },
        onViewportRefMouseUp: function() {
            allowMove = false
            dragStart = {}
            if (!allowJump) {
                eventQueue.trigger(eventTypeProvider.MINIMAP_STOP_MOVE)
            }
        },
        onViewportRefMouseMove: function(event) {
            allowJump = false
            currentMouseCoords = getCoords(event)
            if (allowMove) {
                currentPosition.x = (dragStart.x - event.pageX).bound(viewBoundariesX.a, viewBoundariesX.b)
                currentPosition.y = (dragStart.y - event.pageY).bound(viewBoundariesY.a, viewBoundariesY.b)
                currentCoords.x = currentMouseCoords.x
                currentCoords.y = currentMouseCoords.y
                return false
            }
            if (currentCoords.x !== currentMouseCoords.x || currentCoords.y !== currentMouseCoords.y) {
                hideHighlightSprite()
                showHighlightSprite(currentMouseCoords.x, currentMouseCoords.y)
            }
            if (currentMouseCoords.x in mappedVillages && currentMouseCoords.y in mappedVillages[currentMouseCoords.x]) {
                let village = mappedVillages[currentMouseCoords.x][currentMouseCoords.y]
                if (!minimapSettings[SETTINGS.SHOW_BARBARIANS] && !village.character_id) {
                    return false
                }
                if (minimapSettings[SETTINGS.SHOW_ONLY_CUSTOM_HIGHLIGHTS]) {
                    let highlighted = false
                    if (village.character_id in highlights.character) {
                        highlighted = true
                    } else if (village.tribe_id in highlights.tribe) {
                        highlighted = true
                    }
                    if (!highlighted) {
                        return false
                    }
                }
                return onHoverVillage(currentMouseCoords, event)
            }
            onBlurVillage()
        },
        onViewportRefMouseLeave: function() {
            if (hoveredVillage) {
                onBlurVillage()
            }
            eventQueue.trigger(eventTypeProvider.MINIMAP_MOUSE_LEAVE)
        },
        onViewportRefMouseClick: function(event) {
            if (!allowJump) {
                return false
            }
            const coords = getCoords(event)
            mapService.jumpToVillage(coords.x, coords.y)
        },
        onViewportRefMouseContext: function(event) {
            event.preventDefault()
            return false
        },
        onHighlightChange: function() {
            highlights.tribe = colorService.getCustomColorsByGroup(colorGroups.TRIBE_COLORS) || {}
            highlights.character = colorService.getCustomColorsByGroup(colorGroups.PLAYER_COLORS) || {}
            drawLoadedVillages()
        },
        onSelectedVillageChange: function() {
            const old = {
                id: selectedVillage.getId(),
                x: selectedVillage.getX(),
                y: selectedVillage.getY()
            }
            selectedVillage = $player.getSelectedVillage()
            drawVillages([{
                character_id: $player.getId(),
                id: old.id,
                x: old.x,
                y: old.y
            }, {
                character_id: $player.getId(),
                id: selectedVillage.getId(),
                x: selectedVillage.getX(),
                y: selectedVillage.getY()
            }])
        }
    }
    let minimap = {}
    minimap.addHighlight = function(item, color) {
        if (!item || !item.type || !item.id || !hasOwn.call(highlights, item.type)) {
            eventQueue.trigger(eventTypeProvider.MINIMAP_HIGHLIGHT_ADD_ERROR_NO_ENTRY)
            return false
        }
        if (!rhexcolor.test(color)) {
            eventQueue.trigger(eventTypeProvider.MINIMAP_HIGHLIGHT_ADD_ERROR_INVALID_COLOR)
            return false
        }
        highlights[item.type][item.id] = color[0] !== '#' ? '#' + color : color
        const colorGroup = item.type === 'character' ? colorGroups.PLAYER_COLORS : colorGroups.TRIBE_COLORS
        colorService.setCustomColorsByGroup(colorGroup, highlights[item.type])
        $rootScope.$broadcast(eventTypeProvider.GROUPS_VILLAGES_CHANGED)
        drawLoadedVillages()
        return true
    }
    minimap.removeHighlight = function(type, itemId) {
        if (typeof itemId === 'undefined' || !hasOwn.call(highlights, type)) {
            return false
        }
        if (!hasOwn.call(highlights[type], itemId)) {
            return false
        }
        delete highlights[type][itemId]
        const colorGroup = type === 'character' ? colorGroups.PLAYER_COLORS : colorGroups.TRIBE_COLORS
        colorService.setCustomColorsByGroup(colorGroup, highlights[type])
        $rootScope.$broadcast(eventTypeProvider.GROUPS_VILLAGES_CHANGED)
        drawLoadedVillages()
        return true
    }
    minimap.getHighlight = function(type, item) {
        if (hasOwn.call(highlights[type], item)) {
            return highlights[type][item]
        } else {
            return false
        }
    }
    minimap.getHighlights = function() {
        return highlights
    }
    minimap.eachHighlight = function(callback) {
        for (let type in highlights) {
            for (let id in highlights[type]) {
                callback(type, id, highlights[type][id])
            }
        }
    }
    minimap.setViewport = function(element) {
        $viewport = element
        $viewport.style.background = minimapSettings[SETTINGS.COLOR_BACKGROUND]
        viewportContext = $viewport.getContext('2d')
    }
    minimap.setViewportRef = function(element) {
        $viewportRef = element
        viewportRefContext = $viewportRef.getContext('2d')
    }
    minimap.setCurrentPosition = function(x, y) {
        currentPosition.x = (x * villageBlock)
        currentPosition.y = (y * villageBlock)
        currentCoords.x = Math.ceil(x)
        currentCoords.y = Math.ceil(y)
    }
    minimap.getMapPosition = function() {
        if (!$map.width || !$map.height) {
            return false
        }
        let view = mapData.getMap().engine.getView()
        let converted = convert([
            -view.x,
            -view.y,
            $map.width / 2,
            $map.height / 2
        ], view.z)
        return {
            x: converted[0] + converted[2],
            y: converted[1] + converted[3]
        }
    }
    minimap.getSettings = function() {
        return settings
    }
    minimap.drawMinimap = function() {
        if (firstDraw) {
            firstDraw = false
        }
        $viewport.style.background = minimapSettings[SETTINGS.COLOR_BACKGROUND]
        viewportCacheContext.clearRect(0, 0, $viewportCache.width, $viewportCache.height)
        ready(function() {
            drawBorders()
            drawLoadedVillages()
        }, 'minimap_data')
    }
    minimap.enableRendering = function enableRendering() {
        renderingEnabled = true
    }
    minimap.disableRendering = function disableRendering() {
        renderingEnabled = false
    }
    minimap.isFirstDraw = function() {
        return !!firstDraw
    }
    minimap.init = function() {
        minimap.initialized = true
        $viewportCache = document.createElement('canvas')
        viewportCacheContext = $viewportCache.getContext('2d')
        highlightSprite = spriteFactory.make('hover')
        settings = new Settings({
            settingsMap: SETTINGS_MAP,
            storageKey: STORAGE_KEYS.SETTINGS
        })
        settings.onChange(function(changes, updates) {
            minimapSettings = settings.getAll()
            updateMinimapValues()
            if (updates[UPDATES.MAP_POSITION]) {
                minimap.setCurrentPosition(currentCoords.x, currentCoords.y)
            }
            if (updates[UPDATES.MINIMAP]) {
                minimap.drawMinimap()
            }
        })
        minimapSettings = settings.getAll()
        highlights.tribe = colorService.getCustomColorsByGroup(colorGroups.TRIBE_COLORS) || {}
        highlights.character = colorService.getCustomColorsByGroup(colorGroups.PLAYER_COLORS) || {}
        updateMinimapValues()
    }
    minimap.run = function() {
        ready(function() {
            $mapWrapper = document.getElementById('map')
            $map = document.getElementById('main-canvas')
            $player = modelDataService.getSelectedCharacter()
            tribeRelations = $player.getTribeRelations()
            playerId = $player.getId()
            playerTribeId = $player.getTribeId()
            villageColors = $player.getVillagesColors()
            highlightSprite.alpha = 0
            mapState.graph.layers.effects.push(highlightSprite)
            setViewportSize()
            selectedVillage = $player.getSelectedVillage()
            currentCoords.x = selectedVillage.getX()
            currentCoords.y = selectedVillage.getY()
            currentPosition.x = selectedVillage.getX() * villageBlock
            currentPosition.y = selectedVillage.getY() * villageBlock
            window.addEventListener('resize', setViewportSize, false)
            $viewportRef.addEventListener('mousedown', eventHandlers.onViewportRefMouseDown)
            $viewportRef.addEventListener('mouseup', eventHandlers.onViewportRefMouseUp)
            $viewportRef.addEventListener('mousemove', eventHandlers.onViewportRefMouseMove)
            $viewportRef.addEventListener('mouseleave', eventHandlers.onViewportRefMouseLeave)
            $viewportRef.addEventListener('click', eventHandlers.onViewportRefMouseClick)
            $viewportRef.addEventListener('contextmenu', eventHandlers.onViewportRefMouseContext)
            twoMapData.load(function() {
                allVillages = twoMapData.getVillages()
                cacheVillages(allVillages)
                setBoundaries()
                renderStep()
                $rootScope.$on(eventTypeProvider.VILLAGE_SELECTED_CHANGED, eventHandlers.onSelectedVillageChange)
                $rootScope.$on(eventTypeProvider.TRIBE_RELATION_CHANGED, drawLoadedVillages)
                $rootScope.$on(eventTypeProvider.GROUPS_VILLAGES_CHANGED, eventHandlers.onHighlightChange)
            })
        }, ['initial_village', 'tribe_relations'])
    }
    return minimap
})
define('two/minimap/events', [], function () {
    angular.extend(eventTypeProvider, {
        MINIMAP_HIGHLIGHT_ADD_ERROR_EXISTS: 'minimap_highlight_add_error_exists',
        MINIMAP_HIGHLIGHT_ADD_ERROR_NO_ENTRY: 'minimap_highlight_add_error_no_entry',
        MINIMAP_HIGHLIGHT_ADD_ERROR_INVALID_COLOR: 'minimap_highlight_add_error_invalid_color',
        MINIMAP_VILLAGE_CLICK: 'minimap_village_click',
        MINIMAP_VILLAGE_HOVER: 'minimap_village_hover',
        MINIMAP_VILLAGE_BLUR: 'minimap_village_blur',
        MINIMAP_MOUSE_LEAVE: 'minimap_mouse_leave',
        MINIMAP_START_MOVE: 'minimap_start_move',
        MINIMAP_STOP_MOVE: 'minimap_stop_move',
        MINIMAP_AREA_LOADED: 'minimap_area_loaded'
    })
})
define('two/minimap/ui', [
    'two/ui',
    'two/minimap',
    'two/minimap/types/actions',
    'two/minimap/types/mapSizes',
    'two/minimap/settings',
    'two/minimap/settings/map',
    'two/utils',
    'two/EventScope',
    'two/Settings',
    'helper/util',
    'struct/MapData',
    'cdn',
    'conf/colors'
], function(
    interfaceOverflow,
    minimap,
    ACTION_TYPES,
    MAP_SIZE_TYPES,
    SETTINGS,
    SETTINGS_MAP,
    utils,
    EventScope,
    Settings,
    util,
    mapData,
    cdn,
    colors
) {
    let $scope
    let $button
    let $minimapCanvas
    let $viewportRefCanvas
    let $minimapContainer
    let MapController
    let windowWrapper
    let mapWrapper
    let tooltipWrapper
    let tooltipQueue = {}
    let allowTooltip = false
    let currentVillageHash
    let highlightNames = {
        character: {},
        tribe: {}
    }
    let settings
    const TAB_TYPES = {
        MINIMAP: 'minimap',
        HIGHLIGHTS: 'highlights',
        SETTINGS: 'settings'
    }
    const DEFAULT_TAB = TAB_TYPES.MINIMAP
    const selectTab = function(tab) {
        $scope.selectedTab = tab
        if (tab === TAB_TYPES.MINIMAP) {
            minimap.enableRendering()
        } else {
            minimap.disableRendering()
        }
    }
    const appendCanvas = function() {
        $minimapContainer = document.querySelector('#two-minimap .minimap-container')
        $minimapContainer.appendChild($minimapCanvas)
        $minimapContainer.appendChild($viewportRefCanvas)
    }
    const getTribeData = function(data, callback) {
        socketService.emit(routeProvider.TRIBE_GET_PROFILE, {
            tribe_id: data.id
        }, callback)
    }
    const getCharacterData = function(data, callback) {
        socketService.emit(routeProvider.CHAR_GET_PROFILE, {
            character_id: data.id
        }, callback)
    }
    const updateHighlightNames = function() {
        Object.keys($scope.highlights.character).forEach(function(id) {
            if (id in highlightNames.character) {
                return
            }
            getCharacterData({
                id: id
            }, function(data) {
                highlightNames.character[id] = data.character_name
            })
        })
        Object.keys($scope.highlights.tribe).forEach(function(id) {
            if (id in highlightNames.tribe) {
                return
            }
            getTribeData({
                id: id
            }, function(data) {
                highlightNames.tribe[id] = data.name
            })
        })
    }
    const loadVillageData = function(x, y) {
        return new Promise(function(resolve) {
            let village = mapData.getTownAt(x, y)
            if (village) {
                return resolve(village)
            }
            mapData.loadTownDataAsync(x, y, 1, 1, function(village) {
                resolve(village)
            })
        })
    }
    const genVillageHash = function(x, y) {
        return String(x) + String(y)
    }
    const showTooltip = function(event, data) {
        if (!tooltipWrapper) {
            return
        }
        let villageHash = genVillageHash(data.x, data.y)
        currentVillageHash = villageHash
        tooltipQueue[villageHash] = true
        allowTooltip = true
        loadVillageData(data.x, data.y).then(function(village) {
            if (!tooltipQueue[genVillageHash(village.x, village.y)]) {
                return
            }
            if (!allowTooltip) {
                return
            }
            windowWrapper.appendChild(tooltipWrapper)
            tooltipWrapper.classList.remove('ng-hide')
            MapController.tt.name = village.name
            MapController.tt.x = village.x
            MapController.tt.y = village.y
            MapController.tt.province_name = village.province_name
            MapController.tt.points = village.points
            MapController.tt.character_name = village.character_name || '-'
            MapController.tt.character_points = village.character_points || 0
            MapController.tt.tribe_name = village.tribe_name || '-'
            MapController.tt.tribe_tag = village.tribe_tag || '-'
            MapController.tt.tribe_points = village.tribe_points || 0
            MapController.tt.morale = village.morale || 0
            MapController.tt.position = {}
            MapController.tt.position.x = data.event.pageX + 50
            MapController.tt.position.y = data.event.pageY + 50
            MapController.tt.visible = true
            const tooltipOffset = tooltipWrapper.getBoundingClientRect()
            const windowOffset = windowWrapper.getBoundingClientRect()
            const tooltipWrapperSpacerX = tooltipOffset.width + 50
            const tooltipWrapperSpacerY = tooltipOffset.height + 50
            const onTop = MapController.tt.position.y + tooltipWrapperSpacerY > windowOffset.top + windowOffset.height
            const onLeft = MapController.tt.position.x + tooltipWrapperSpacerX > windowOffset.width
            if (onTop) {
                MapController.tt.position.y -= 50
            }
            tooltipWrapper.classList.toggle('left', onLeft)
            tooltipWrapper.classList.toggle('top', onTop)
        })
    }
    const hideTooltip = function(event, coords) {
        if (!tooltipWrapper) {
            return
        }
        let villageHash = coords ? genVillageHash(coords) : currentVillageHash
        tooltipQueue[villageHash] = false
        allowTooltip = false
        MapController.tt.visible = false
        tooltipWrapper.classList.add('ng-hide')
        mapWrapper.appendChild(tooltipWrapper)
    }
    const openColorPalette = function(inputType, colorGroup, itemId) {
        let modalScope = $rootScope.$new()
        let selectedColor
        let hideReset = true
        let settingId
        modalScope.colorPalettes = colors.palette
        if (inputType === 'setting') {
            settingId = colorGroup
            selectedColor = settings.get(settingId)
            hideReset = false
            modalScope.submit = function() {
                $scope.settings[settingId] = '#' + modalScope.selectedColor
                modalScope.closeWindow()
            }
            modalScope.reset = function() {
                $scope.settings[settingId] = settings.getDefault(settingId)
                modalScope.closeWindow()
            }
        } else if (inputType === 'add_custom_highlight') {
            selectedColor = $scope.addHighlightColor
            modalScope.submit = function() {
                $scope.addHighlightColor = '#' + modalScope.selectedColor
                modalScope.closeWindow()
            }
        } else if (inputType === 'edit_custom_highlight') {
            selectedColor = $scope.highlights[colorGroup][itemId]
            modalScope.submit = function() {
                minimap.addHighlight({
                    id: itemId,
                    type: colorGroup
                }, modalScope.selectedColor)
                modalScope.closeWindow()
            }
        }
        modalScope.selectedColor = selectedColor.replace('#', '')
        modalScope.hasCustomColors = true
        modalScope.hideReset = hideReset
        modalScope.finishAction = function($event, color) {
            modalScope.selectedColor = color
        }
        windowManagerService.getModal('modal_color_palette', modalScope)
    }
    const addCustomHighlight = function() {
        minimap.addHighlight($scope.selectedHighlight, $scope.addHighlightColor)
    }
    const saveSettings = function() {
        settings.setAll(settings.decode($scope.settings))
        utils.notif('success', $filter('i18n')('settings_saved', $rootScope.loc.ale, 'minimap'))
    }
    const resetSettings = function() {
        let modalScope = $rootScope.$new()
        modalScope.title = $filter('i18n')('reset_confirm_title', $rootScope.loc.ale, 'minimap')
        modalScope.text = $filter('i18n')('reset_confirm_text', $rootScope.loc.ale, 'minimap')
        modalScope.submitText = $filter('i18n')('reset', $rootScope.loc.ale, 'common')
        modalScope.cancelText = $filter('i18n')('cancel', $rootScope.loc.ale, 'common')
        modalScope.showQuestionMarkIcon = true
        modalScope.switchColors = true
        modalScope.submit = function submit() {
            settings.resetAll()
            utils.notif('success', $filter('i18n')('settings_reset', $rootScope.loc.ale, 'minimap'))
            modalScope.closeWindow()
        }
        modalScope.cancel = function cancel() {
            modalScope.closeWindow()
        }
        windowManagerService.getModal('modal_attention', modalScope)
    }
    const highlightsCount = function() {
        const character = Object.keys($scope.highlights.character).length
        const tribe = Object.keys($scope.highlights.tribe).length
        return character + tribe
    }
    const openProfile = function(type, itemId) {
        const handler = type === 'character' ?
            windowDisplayService.openCharacterProfile :
            windowDisplayService.openTribeProfile
        handler(itemId)
    }
    const eventHandlers = {
        addHighlightAutoCompleteSelect: function(item) {
            $scope.selectedHighlight = {
                id: item.id,
                type: item.type,
                name: item.name
            }
        },
        highlightUpdate: function() {
            updateHighlightNames()
        },
        highlightAddErrorExists: function() {
            utils.notif('error', $filter('i18n')('highlight_add_error_exists', $rootScope.loc.ale, 'minimap'))
        },
        highlightAddErrorNoEntry: function() {
            utils.notif('error', $filter('i18n')('highlight_add_error_no_entry', $rootScope.loc.ale, 'minimap'))
        },
        highlightAddErrorInvalidColor: function() {
            utils.notif('error', $filter('i18n')('highlight_add_error_invalid_color', $rootScope.loc.ale, 'minimap'))
        },
        onMouseLeaveMinimap: function() {
            hideTooltip()
            $viewportRefCanvas.dispatchEvent(new MouseEvent('mouseup', {
                view: window,
                bubbles: true,
                cancelable: true
            }))
        },
        onMouseMoveMinimap: function() {
            hideTooltip()
            $viewportRefCanvas.style.cursor = 'url(' + cdn.getPath('/img/cursor/grab_pushed.png') + '), move'
        },
        onMouseStopMoveMinimap: function() {
            $viewportRefCanvas.style.cursor = ''
        }
    }
    const init = function() {
        settings = minimap.getSettings()
        MapController = transferredSharedDataService.getSharedData('MapController')
        $minimapCanvas = document.createElement('canvas')
        $minimapCanvas.className = 'minimap'
        $viewportRefCanvas = document.createElement('canvas')
        $viewportRefCanvas.className = 'cross'
        minimap.setViewport($minimapCanvas)
        minimap.setViewportRef($viewportRefCanvas)
        tooltipWrapper = document.querySelector('#map-tooltip')
        windowWrapper = document.querySelector('#wrapper')
        mapWrapper = document.querySelector('#map')
        $button = interfaceOverflow.addMenuButton4('Minimapa', 30, $filter('i18n')('general.description', $rootScope.loc.ale, 'minimap'))
        $button.addEventListener('click', function() {
            const current = minimap.getMapPosition()
            if (!current) {
                return false
            }
            buildWindow()
            minimap.setCurrentPosition(current.x, current.y)
        })
        interfaceOverflow.addTemplate('twoverflow_minimap_window', `___minimap_html_main`)
        interfaceOverflow.addStyle('___minimap_css_style')
    }
    const buildWindow = function() {
        $scope = $rootScope.$new()
        $scope.SETTINGS = SETTINGS
        $scope.TAB_TYPES = TAB_TYPES
        $scope.selectedTab = DEFAULT_TAB
        $scope.selectedHighlight = false
        $scope.addHighlightColor = '#000000'
        $scope.highlights = minimap.getHighlights()
        $scope.highlightNames = highlightNames
        $scope.mapSizes = Settings.encodeList(MAP_SIZE_TYPES, {
            textObject: 'minimap',
            disabled: false
        })
        $scope.actionTypes = Settings.encodeList(ACTION_TYPES, {
            textObject: 'minimap',
            disabled: false
        })
        $scope.autoComplete = {
            type: ['character', 'tribe'],
            placeholder: $filter('i18n')('placeholder_search', $rootScope.loc.ale, 'minimap'),
            onEnter: eventHandlers.addHighlightAutoCompleteSelect
        }
        $scope.selectTab = selectTab
        $scope.openColorPalette = openColorPalette
        $scope.addCustomHighlight = addCustomHighlight
        $scope.removeHighlight = minimap.removeHighlight
        $scope.saveSettings = saveSettings
        $scope.resetSettings = resetSettings
        $scope.highlightsCount = highlightsCount
        $scope.openProfile = openProfile
        settings.injectScope($scope, {
            textObject: 'minimap'
        })
        let eventScope = new EventScope('twoverflow_minimap_window', function onClose() {
            minimap.disableRendering()
        })
        eventScope.register(eventTypeProvider.GROUPS_VILLAGES_CHANGED, eventHandlers.highlightUpdate, true)
        eventScope.register(eventTypeProvider.MINIMAP_HIGHLIGHT_ADD_ERROR_EXISTS, eventHandlers.highlightAddErrorExists)
        eventScope.register(eventTypeProvider.MINIMAP_HIGHLIGHT_ADD_ERROR_NO_ENTRY, eventHandlers.highlightAddErrorNoEntry)
        eventScope.register(eventTypeProvider.MINIMAP_HIGHLIGHT_ADD_ERROR_INVALID_COLOR, eventHandlers.highlightAddErrorInvalidColor)
        eventScope.register(eventTypeProvider.MINIMAP_VILLAGE_HOVER, showTooltip)
        eventScope.register(eventTypeProvider.MINIMAP_VILLAGE_BLUR, hideTooltip)
        eventScope.register(eventTypeProvider.MINIMAP_MOUSE_LEAVE, eventHandlers.onMouseLeaveMinimap)
        eventScope.register(eventTypeProvider.MINIMAP_START_MOVE, eventHandlers.onMouseMoveMinimap)
        eventScope.register(eventTypeProvider.MINIMAP_STOP_MOVE, eventHandlers.onMouseStopMoveMinimap)
        windowManagerService.getScreenWithInjectedScope('!twoverflow_minimap_window', $scope)
        updateHighlightNames()
        appendCanvas()
        minimap.enableRendering()
        if (minimap.isFirstDraw()) {
            minimap.drawMinimap()
        }
    }
    return init
})
define('two/minimap/settings', [], function() {
    return {
        MAP_SIZE: 'map_size',
        RIGHT_CLICK_ACTION: 'right_click_action',
        FLOATING_MINIMAP: 'floating_minimap',
        SHOW_VIEW_REFERENCE: 'show_view_reference',
        SHOW_CONTINENT_DEMARCATIONS: 'show_continent_demarcations',
        SHOW_PROVINCE_DEMARCATIONS: 'show_province_demarcations',
        SHOW_BARBARIANS: 'show_barbarians',
        SHOW_ONLY_CUSTOM_HIGHLIGHTS: 'show_only_custom_highlights',
        HIGHLIGHT_OWN: 'highlight_own',
        HIGHLIGHT_SELECTED: 'highlight_selected',
        HIGHLIGHT_DIPLOMACY: 'highlight_diplomacy',
        COLOR_GHOST: 'color_ghost',
        COLOR_QUICK_HIGHLIGHT: 'color_quick_highlight',
        COLOR_BACKGROUND: 'color_background',
        COLOR_PROVINCE: 'color_province',
        COLOR_CONTINENT: 'color_continent',
        COLOR_VIEW_REFERENCE: 'color_view_reference'
    }
})
define('two/minimap/settings/updates', function() {
    return {
        MINIMAP: 'minimap',
        MAP_POSITION: 'map_position'
    }
})
define('two/minimap/settings/map', [
    'two/minimap/settings',
    'two/minimap/types/actions',
    'two/minimap/types/mapSizes',
    'two/minimap/settings/updates'
], function(
    SETTINGS,
    ACTION_TYPES,
    MAP_SIZES,
    UPDATES
) {
    return {
        [SETTINGS.MAP_SIZE]: {
            default: MAP_SIZES.SMALL,
            inputType: 'select',
            updates: [UPDATES.MINIMAP, UPDATES.MAP_POSITION],
            disabledOption: false
        },
        [SETTINGS.RIGHT_CLICK_ACTION]: {
            default: ACTION_TYPES.HIGHLIGHT_PLAYER,
            inputType: 'select',
            disabledOption: false
        },
        [SETTINGS.SHOW_VIEW_REFERENCE]: {
            default: true,
            inputType: 'checkbox',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.SHOW_CONTINENT_DEMARCATIONS]: {
            default: false,
            inputType: 'checkbox',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.SHOW_PROVINCE_DEMARCATIONS]: {
            default: true,
            inputType: 'checkbox',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.SHOW_BARBARIANS]: {
            default: false,
            inputType: 'checkbox',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.SHOW_ONLY_CUSTOM_HIGHLIGHTS]: {
            default: false,
            inputType: 'checkbox',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.HIGHLIGHT_OWN]: {
            default: true,
            inputType: 'checkbox',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.HIGHLIGHT_SELECTED]: {
            default: true,
            inputType: 'checkbox',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.HIGHLIGHT_DIPLOMACY]: {
            default: true,
            inputType: 'checkbox',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.COLOR_SELECTED]: {
            default: '#ffffff',
            inputType: 'color',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.COLOR_BARBARIAN]: {
            default: '#969696',
            inputType: 'color',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.COLOR_PLAYER]: {
            default: '#f0c800',
            inputType: 'color',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.COLOR_QUICK_HIGHLIGHT]: {
            default: '#ffffff',
            inputType: 'color',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.COLOR_BACKGROUND]: {
            default: '#436213',
            inputType: 'color',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.COLOR_PROVINCE]: {
            default: '#74c374',
            inputType: 'color',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.COLOR_CONTINENT]: {
            default: '#74c374',
            inputType: 'color',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.COLOR_VIEW_REFERENCE]: {
            default: '#999999',
            inputType: 'color',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.COLOR_TRIBE]: {
            default: '#0000DB',
            inputType: 'color',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.COLOR_ALLY]: {
            default: '#00a0f4',
            inputType: 'color',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.COLOR_ENEMY]: {
            default: '#ED1212',
            inputType: 'color',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.COLOR_FRIENDLY]: {
            default: '#BF4DA4',
            inputType: 'color',
            updates: [UPDATES.MINIMAP]
        },
        [SETTINGS.COLOR_GHOST]: {
            default: '#3E551C',
            inputType: 'color',
            updates: [UPDATES.MINIMAP]
        }
    }
})
define('two/minimap/types/actions', [], function() {
    return {
        HIGHLIGHT_PLAYER: 'highlight_player',
        HIGHLIGHT_TRIBE: 'highlight_tribe'
    }
})
define('two/minimap/types/mapSizes', [], function() {
    return {
        VERY_SMALL: 'very_small',
        SMALL: 'small',
        BIG: 'big',
        VERY_BIG: 'very_big'
    }
})
require([
    'two/ready',
    'two/minimap',
    'two/minimap/ui',
    'two/minimap/events',
    'two/minimap/types/actions',
    'two/minimap/settings',
    'two/minimap/settings/updates',
    'two/minimap/settings/map'
], function(
    ready,
    minimap,
    minimapInterface
) {
    if (minimap.initialized) {
        return false
    }
    ready(function() {
        minimap.init()
        minimapInterface()
        minimap.run()
    }, 'map')
})
define('two/mintHelper', [
    'queues/EventQueue'
], function(
    eventQueue
) {
    let initialized = false
    let running = false
    let interval = 3000

    function mintCoins() {
        if (running == true) {
            let player = modelDataService.getSelectedCharacter()
            let villages = player.getVillageList()
            villages.forEach(function(village) {
                let amountWood = 0
                let amountClay = 0
                let amountIron = 0
                let data = village.data
                let buildings = data.buildings
                let academy = buildings.academy
                let level = academy.level
                let resources = village.getResources()
                let computed = resources.getComputed()
                let wood = computed.wood
                let clay = computed.clay
                let iron = computed.iron
                let villageWood = wood.currentStock
                let villageClay = clay.currentStock
                let villageIron = iron.currentStock
                let woodCost = 28000
                let clayCost = 30000
                let ironCost = 25000
                setTimeout(function() {
                    if (level > 0) {
                        if (villageWood >= woodCost && villageClay >= clayCost && villageIron >= ironCost) {
                            amountWood = Math.floor(villageWood / woodCost)
                            amountClay = Math.floor(villageClay / clayCost)
                            amountIron = Math.floor(villageIron / ironCost)
                            if (amountWood <= amountIron && amountWood <= amountClay) {
                                socketService.emit(routeProvider.MINT_COINS, {
                                    village_id: village.getId(),
                                    amount: amountWood
                                })
                                console.log('W wiosce ' + village.getName() + ' wybito ' + amountWood + ' monet.')
                            } else if (amountClay <= amountIron && amountClay <= amountWood) {
                                socketService.emit(routeProvider.MINT_COINS, {
                                    village_id: village.getId(),
                                    amount: amountClay
                                })
                                console.log('W wiosce ' + village.getName() + ' wybito ' + amountClay + ' monet.')
                            } else {
                                socketService.emit(routeProvider.MINT_COINS, {
                                    village_id: village.getId(),
                                    amount: amountIron
                                })
                                console.log('W wiosce ' + village.getName() + ' wybito ' + amountIron + ' monet.')
                            }
                        } else {
                            console.log('Za mało surowców żeby wybić monety w wiosce ' + village.getName())
                        }
                    } else {
                        console.log('W wiosce ' + village.getName() + ' brak akademi')
                    }
                }, interval)
            })
        }
    }
    let mintHelper = {}
    mintHelper.init = function() {
        initialized = true
    }
    mintHelper.start = function() {
        eventQueue.trigger(eventTypeProvider.MINT_HELPER_STARTED)
        running = true
        mintCoins()
        setInterval(function() {
            mintCoins()
        }, 1800000)
    }
    mintHelper.stop = function() {
        eventQueue.trigger(eventTypeProvider.MINT_HELPER_STOPPED)
        running = false
    }
    mintHelper.isRunning = function() {
        return running
    }
    mintHelper.isInitialized = function() {
        return initialized
    }
    return mintHelper
})
define('two/mintHelper/events', [], function () {
    angular.extend(eventTypeProvider, {
        MINT_HELPER_STARTED: 'mint_helper_started',
        MINT_HELPER_STOPPED: 'mint_helper_stopped'
    })
})

define('two/mintHelper/ui', [
    'two/ui',
    'two/mintHelper',
    'two/utils',
    'queues/EventQueue'
], function (
    interfaceOverflow,
    mintHelper,
    utils,
    eventQueue
) {
    let $button

    const init = function () {
        $button = interfaceOverflow.addMenuButton2('Mincerz', 50, $filter('i18n')('description', $rootScope.loc.ale, 'mint_helper'))
        
        $button.addEventListener('click', function () {
            if (mintHelper.isRunning()) {
                mintHelper.stop()
                utils.notif('success', $filter('i18n')('deactivated', $rootScope.loc.ale, 'mint_helper'))
            } else {
                mintHelper.start()
                utils.notif('success', $filter('i18n')('activated', $rootScope.loc.ale, 'mint_helper'))
            }
        })

        eventQueue.register(eventTypeProvider.MINT_HELPER_STARTED, function () {
            $button.classList.remove('btn-orange')
            $button.classList.add('btn-red')
        })

        eventQueue.register(eventTypeProvider.MINT_HELPER_STOPPED, function () {
            $button.classList.remove('btn-red')
            $button.classList.add('btn-orange')
        })

        if (mintHelper.isRunning()) {
            eventQueue.trigger(eventTypeProvider.MINT_HELPER_STARTED)
        }

        return opener
    }

    return init
})

require([
    'two/ready',
    'two/mintHelper',
    'two/mintHelper/ui',
    'Lockr',
    'queues/EventQueue',
    'two/mintHelper/events'
], function(
    ready,
    mintHelper,
    mintHelperInterface,
    Lockr,
    eventQueue
) {
    const STORAGE_KEYS = {
        ACTIVE: 'mint_helper_active'
    }
	
    if (mintHelper.isInitialized()) {
        return false
    }
    ready(function() {
        mintHelper.init()
        mintHelperInterface()

        ready(function() {
            if (Lockr.get(STORAGE_KEYS.ACTIVE, false, true)) {
                mintHelper.start()
            }

            eventQueue.register(eventTypeProvider.AUTO_HELPER_STARTED, function() {
                Lockr.set(STORAGE_KEYS.ACTIVE, true)
            })

            eventQueue.register(eventTypeProvider.AUTO_HELPER_STOPPED, function() {
                Lockr.set(STORAGE_KEYS.ACTIVE, false)
            })
        }, ['initial_village'])
    })
})
define('two/prankHelper', [
    'two/Settings',
    'two/prankHelper/settings',
    'two/prankHelper/settings/map',
    'two/prankHelper/settings/updates',
    'two/prankHelper/types/type',
    'two/ready',
    'helper/time',
    'queues/EventQueue',
    'Lockr'
], function(
    Settings,
    SETTINGS,
    SETTINGS_MAP,
    UPDATES,
    PH_TYPE,
    ready,
    timeHelper,
    eventQueue,
    Lockr
) {
    let initialized = false
    let running = false
    const LOGS_LIMIT = 500
    let settings
    let prankHelperSettings
    let logs
    let selectedGroups = []
    const STORAGE_KEYS = {
        SETTINGS: 'prank_helper_settings',
        LOGS: 'prank_helper_log'
    }
    const RENAME_TYPE = {
        [PH_TYPE.INCREASE]: 'increase',
        [PH_TYPE.DECREASE]: 'decrease',
        [PH_TYPE.RANDOM]: 'random'
    }
    console.log(RENAME_TYPE)
    const updateGroups = function() {
        selectedGroups = []
        const allGroups = modelDataService.getGroupList().getGroups()
        const groupsSelectedByTheUser = prankHelperSettings[SETTINGS.GROUPS]
        selectedGroups.push(allGroups[groupsSelectedByTheUser])
    }
    const requestVillageProvinceNeighbours = function(villageId, callback) {
        socketService.emit(routeProvider.VILLAGES_IN_PROVINCE, {
            'village_id': villageId
        }, callback)
    }
    const addLog = function(villageId, newname, oldname) {
        let data = {
            time: timeHelper.gameTime(),
            villageId: villageId,
            oldname: oldname,
            newname: newname
        }
        logs.unshift(data)
        if (logs.length > LOGS_LIMIT) {
            logs.splice(logs.length - LOGS_LIMIT, logs.length)
        }
        Lockr.set(STORAGE_KEYS.LOGS, logs)
        return true
    }
    const prankHelper = {}
    prankHelper.init = function() {
        initialized = true
        logs = Lockr.get(STORAGE_KEYS.LOGS, [], true)
        settings = new Settings({
            settingsMap: SETTINGS_MAP,
            storageKey: STORAGE_KEYS.SETTINGS
        })
        settings.onChange(function(changes, updates) {
            prankHelperSettings = settings.getAll()
            if (updates[UPDATES.GROUPS]) {
                updateGroups()
            }
        })
        prankHelperSettings = settings.getAll()
        console.log('prankHelper settings', prankHelperSettings)
        $rootScope.$on(eventTypeProvider.GROUPS_CREATED, updateGroups)
        $rootScope.$on(eventTypeProvider.GROUPS_DESTROYED, updateGroups)
        $rootScope.$on(eventTypeProvider.GROUPS_UPDATED, updateGroups)
    }
    prankHelper.renameGroup = function renameGroup() {
        var player = modelDataService.getSelectedCharacter()
        var villages = player.getVillageList()
        var validName = prankHelperSettings[SETTINGS.CENTER3]
        var prefix = prankHelperSettings[SETTINGS.PROLOGUE3]
        var sufix = prankHelperSettings[SETTINGS.EPILOGUE3]
        var type = prankHelperSettings[SETTINGS.TYPE3]
        var min = prankHelperSettings[SETTINGS.FROM3]
        var max = prankHelperSettings[SETTINGS.TO3]
        var selectedGroup = prankHelperSettings[SETTINGS.GROUPS]
        const groupList = modelDataService.getGroupList()
        var groupVillages = groupList.getGroupVillageIds(selectedGroup)
        var interval = 4000
        var newName
        var villageIdSet = 0
        var alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
        var oldName = null
        var nameSet = []
        var i = 0
        var minNew = alphabet.indexOf(min)
        var maxNew = alphabet.indexOf(max)
        if (type == 'increase') {
            if (isNaN(min) && isNaN(max)) {
                for (i = minNew; i <= maxNew; i++) {
                    newName = prefix + validName + sufix + ' ' + alphabet[i]
                    nameSet.push(newName)
                }
            } else {
                for (i = min; i <= max; i++) {
                    newName = prefix + validName + sufix + ' ' + i
                    nameSet.push(newName)
                }
            }
        } else if (type == 'decrease') {
            if (isNaN(min) && isNaN(max)) {
                for (i = maxNew; i >= minNew; i--) {
                    newName = prefix + validName + sufix + ' ' + alphabet[i]
                    nameSet.push(newName)
                }
            } else {
                for (i = max; i >= min; i--) {
                    newName = prefix + validName + sufix + ' ' + i
                    nameSet.push(newName)
                }
            }
        } else {
            newName = prefix + validName + sufix
            villages.forEach(function(village) {
                groupVillages.forEach(function(id, index) {
                    if (village.data.villageId == id) {
                        setTimeout(function() {
                            villageIdSet = village.getId()
                            oldName = village.getName()
                            socketService.emit(routeProvider.VILLAGE_CHANGE_NAME, {
                                village_id: village.getId(),
                                name: newName
                            })
                            addLog(villageIdSet, newName, oldName)
                        }, index * interval)
                    }
                })
            })
        }
        villages.forEach(function(village) {
            groupVillages.forEach(function(id, index) {
                if (village.data.villageId == id) {
                    setTimeout(function() {
                        villageIdSet = village.getId()
                        oldName = village.getName()
                        socketService.emit(routeProvider.VILLAGE_CHANGE_NAME, {
                            village_id: village.getId(),
                            name: nameSet[index]
                        })
                        addLog(villageIdSet, nameSet[index], oldName)
                    }, index * interval)
                }
            })
        })
        prankHelper.stop()
    }
    prankHelper.renameProvince = function renameProvince() {
        var selectedVillage = prankHelperSettings[SETTINGS.VILLAGE_ID]
        var villages = []
        var validName = prankHelperSettings[SETTINGS.CENTER2]
        var prefix = prankHelperSettings[SETTINGS.PROLOGUE2]
        var sufix = prankHelperSettings[SETTINGS.EPILOGUE2]
        var type = prankHelperSettings[SETTINGS.TYPE2]
        var min = prankHelperSettings[SETTINGS.FROM2]
        var max = prankHelperSettings[SETTINGS.TO2]
        var interval = 4000
        var newName
        var villageIdSet = 0
        var alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
        var oldName = null
        var nameSet = []
        var i = 0
        var minNew = alphabet.indexOf(min)
        var maxNew = alphabet.indexOf(max)
        requestVillageProvinceNeighbours(selectedVillage, function(responseData) {
            villages = responseData.villages
            if (type == 'increase') {
                if (isNaN(min) && isNaN(max)) {
                    for (i = minNew; i <= maxNew; i++) {
                        newName = prefix + validName + sufix + ' ' + alphabet[i]
                        nameSet.push(newName)
                    }
                } else {
                    for (i = min; i <= max; i++) {
                        newName = prefix + validName + sufix + ' ' + i
                        nameSet.push(newName)
                    }
                }
            } else if (type == 'decrease') {
                if (isNaN(min) && isNaN(max)) {
                    for (i = maxNew; i >= minNew; i--) {
                        newName = prefix + validName + sufix + ' ' + alphabet[i]
                        nameSet.push(newName)
                    }
                } else {
                    for (i = max; i >= min; i--) {
                        newName = prefix + validName + sufix + ' ' + i
                        nameSet.push(newName)
                    }
                }
            } else {
                newName = prefix + validName + sufix
                villages.forEach(function(village, index) {
                    setTimeout(function() {
                        villageIdSet = village.id
                        oldName = village.name
                        socketService.emit(routeProvider.VILLAGE_CHANGE_NAME, {
                            village_id: village.id,
                            name: newName
                        })
                        addLog(villageIdSet, newName, oldName)
                    }, index * interval)
                })
            }
            villages.forEach(function(village, index) {
                setTimeout(function() {
                    villageIdSet = village.id
                    oldName = village.name
                    socketService.emit(routeProvider.VILLAGE_CHANGE_NAME, {
                        village_id: village.id,
                        name: nameSet[index]
                    })
                    addLog(villageIdSet, nameSet[index], oldName)
                }, index * interval)
            })
        })
        prankHelper.stop()
    }
    prankHelper.renameAll = function renameAll() {
        var player = modelDataService.getSelectedCharacter()
        var villages = player.getVillageList()
        var validName = prankHelperSettings[SETTINGS.CENTER1]
        var prefix = prankHelperSettings[SETTINGS.PROLOGUE1]
        var sufix = prankHelperSettings[SETTINGS.EPILOGUE1]
        var type = prankHelperSettings[SETTINGS.TYPE1]
        var min = prankHelperSettings[SETTINGS.FROM1]
        var max = prankHelperSettings[SETTINGS.TO1]
        var interval = 4000
        var newName
        var villageIdSet = 0
        var alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
        var oldName = null
        var nameSet = []
        var i = 0
        var minNew = alphabet.indexOf(min)
        var maxNew = alphabet.indexOf(max)
        if (type == 'increase') {
            if (isNaN(min) && isNaN(max)) {
                for (i = minNew; i <= maxNew; i++) {
                    newName = prefix + validName + sufix + ' ' + alphabet[i]
                    nameSet.push(newName)
                }
            } else {
                for (i = min; i <= max; i++) {
                    newName = prefix + validName + sufix + ' ' + i
                    nameSet.push(newName)
                }
            }
        } else if (type == 'decrease') {
            if (isNaN(min) && isNaN(max)) {
                for (i = maxNew; i >= minNew; i--) {
                    newName = prefix + validName + sufix + ' ' + alphabet[i]
                    nameSet.push(newName)
                }
            } else {
                for (i = max; i >= min; i--) {
                    newName = prefix + validName + sufix + ' ' + i
                    nameSet.push(newName)
                }
            }
        } else {
            newName = prefix + validName + sufix
            villages.forEach(function(village, index) {
                setTimeout(function() {
                    villageIdSet = village.getId()
                    oldName = village.getName()
                    socketService.emit(routeProvider.VILLAGE_CHANGE_NAME, {
                        village_id: village.getId(),
                        name: newName
                    })
                    addLog(villageIdSet, newName, oldName)
                }, index * interval)
            })
        }
        villages.forEach(function(village, index) {
            setTimeout(function() {
                villageIdSet = village.getId()
                oldName = village.getName()
                socketService.emit(routeProvider.VILLAGE_CHANGE_NAME, {
                    village_id: village.getId(),
                    name: nameSet[index]
                })
                addLog(villageIdSet, nameSet[index], oldName)
            }, index * interval)
        })
        prankHelper.stop()
    }
    prankHelper.getLogs = function() {
        return logs
    }
    prankHelper.clearLogs = function() {
        logs = []
        Lockr.set(STORAGE_KEYS.LOGS, logs)
        eventQueue.trigger(eventTypeProvider.PRANK_HELPER_CLEAR_LOGS)
        return logs
    }
    prankHelper.start = function() {
        running = true
        eventQueue.trigger(eventTypeProvider.PRANK_HELPER_START)
        addLog('', 'Rozpoczęto przemianowanie', '')
    }
    prankHelper.stop = function() {
        running = false
        eventQueue.trigger(eventTypeProvider.PRANK_HELPER_STOP)
        addLog('', 'Zatrzymano przemianowanie', '')
    }
    prankHelper.getSettings = function() {
        return settings
    }
    prankHelper.isInitialized = function() {
        return initialized
    }
    prankHelper.isRunning = function() {
        return running
    }
    return prankHelper
})
define('two/prankHelper/events', [], function () {
    angular.extend(eventTypeProvider, {
        PRANK_HELPER_START: 'prank_helper_start',
        PRANK_HELPER_STOP: 'prank_helper_stop',
        PRANK_HELPER_CLEAR_LOGS: 'prank_helper_clear_logs'
    })
})

define('two/prankHelper/ui', [
    'two/ui',
    'two/prankHelper',
    'two/prankHelper/settings',
    'two/prankHelper/settings/map',
    'two/prankHelper/types/type',
    'two/Settings',
    'queues/EventQueue',
    'two/EventScope',
    'two/utils',
    'struct/MapData'
], function(
    interfaceOverflow,
    prankHelper,
    SETTINGS,
    SETTINGS_MAP,
    PH_TYPE,
    Settings,
    eventQueue,
    EventScope,
    utils,
    mapData
) {
    let $scope
    let settings
    let groupList = modelDataService.getGroupList()
    let $button
    let running = false
    let logsView = {}
    let villagesInfo = {}
    let villagesLabel = {}
    let prankVillage
    let mapSelectedVillage = false
    const TAB_TYPES = {
        RENAME: 'rename',
        LOGS: 'logs'
    }
    const selectTab = function(tabType) {
        $scope.selectedTab = tabType
    }
    const renameAll = function() {
        if (prankHelper.isRunning()) {
            prankHelper.stop()
            running = false
        } else {
            prankHelper.start()
            settings.setAll(settings.decode($scope.settings))
            prankHelper.renameAll()
        }
    }
    const renameProvince = function() {
        if (prankHelper.isRunning()) {
            prankHelper.stop()
            running = false
        } else {
            prankHelper.start()
            settings.setAll(settings.decode($scope.settings))
            prankHelper.renameProvince()
        }
    }
    const renameGroup = function() {
        if (prankHelper.isRunning()) {
            prankHelper.stop()
            running = false
        } else {
            prankHelper.start()
            settings.setAll(settings.decode($scope.settings))
            prankHelper.renameGroup()
        }
    }
    const clear = function() {
        $scope.settings[SETTINGS.GROUPS] = false
        $scope.settings[SETTINGS.TYPE1] = false
        $scope.settings[SETTINGS.TYPE2] = false
        $scope.settings[SETTINGS.TYPE3] = false
        $scope.settings[SETTINGS.CENTER1] = ''
        $scope.settings[SETTINGS.CENTER2] = ''
        $scope.settings[SETTINGS.CENTER3] = ''
        $scope.settings[SETTINGS.PROLOGUE1] = ''
        $scope.settings[SETTINGS.PROLOGUE2] = ''
        $scope.settings[SETTINGS.PROLOGUE3] = ''
        $scope.settings[SETTINGS.EPILOGUE1] = ''
        $scope.settings[SETTINGS.EPILOGUE2] = ''
        $scope.settings[SETTINGS.EPILOGUE3] = ''
        $scope.settings[SETTINGS.FROM1] = ''
        $scope.settings[SETTINGS.FROM2] = ''
        $scope.settings[SETTINGS.FROM3] = ''
        $scope.settings[SETTINGS.TO1] = ''
        $scope.settings[SETTINGS.TO2] = ''
        $scope.settings[SETTINGS.TO3] = ''
        settings.setAll(settings.decode($scope.settings))
    }
    const setMapSelectedVillage = function(event, menu) {
        mapSelectedVillage = menu.data
    }
    const unsetMapSelectedVillage = function() {
        mapSelectedVillage = false
    }
    const addMapSelected = function() {
        if (!mapSelectedVillage) {
            return utils.notif('error', $filter('i18n')('error_no_map_selected_village', $rootScope.loc.ale, 'prank_helper'))
        }
        mapData.loadTownDataAsync(mapSelectedVillage.x, mapSelectedVillage.y, 1, 1, function(data) {
            prankVillage.origin = data
        })
        $scope.settings[SETTINGS.VILLAGE_ID] = mapSelectedVillage.id
    }
    const loadVillageInfo = function(villageId) {
        if (villagesInfo[villageId]) {
            return villagesInfo[villageId]
        }
        villagesInfo[villageId] = true
        villagesLabel[villageId] = 'ŁADOWANIE...'
        socketService.emit(routeProvider.MAP_GET_VILLAGE_DETAILS, {
            my_village_id: modelDataService.getSelectedVillage().getId(),
            village_id: villageId,
            num_reports: 1
        }, function(data) {
            villagesInfo[villageId] = {
                x: data.village_x,
                y: data.village_y,
                name: data.village_name,
                last_report: data.last_reports[0]
            }
            villagesLabel[villageId] = `${data.village_name} (${data.village_x}|${data.village_y})`
        })
    }
    logsView.updateVisibleLogs = function() {
        const offset = $scope.pagination.logs.offset
        const limit = $scope.pagination.logs.limit
        logsView.visibleLogs = logsView.logs.slice(offset, offset + limit)
        $scope.pagination.logs.count = logsView.logs.length
        logsView.visibleLogs.forEach(function(log) {
            if (log.villageId) {
                loadVillageInfo(log.villageId)
            }
        })
    }
    logsView.clearLogs = function() {
        prankHelper.clearLogs()
    }
    const eventHandlers = {
        updateGroups: function() {
            $scope.groups = Settings.encodeList(groupList.getGroups(), {
                disabled: false,
                type: 'groups'
            })
        },
        updateLogs: function() {
            $scope.logs = prankHelper.getLogs()
            logsView.updateVisibleLogs()
            if (!$scope.logs.length) {
                utils.notif('success', $filter('i18n')('reseted_logs', $rootScope.loc.ale, 'prank_helper'))
            }
        },
        autoCompleteSelected: function(event, id, data, type) {
            if (id !== 'prankhelper_village_search') {
                return false
            }
            prankVillage[type] = {
                id: data.raw.id,
                x: data.raw.x,
                y: data.raw.y,
                name: data.raw.name
            }
            $scope.searchQuery[type] = ''
            $scope.settings[SETTINGS.VILLAGE_ID] = prankVillage.id
            settings.setAll(settings.decode($scope.settings))
        },
        onAutoCompleteVillage: function(data) {
            prankVillage.origin = {
                id: data.id,
                x: data.x,
                y: data.y,
                name: data.name
            }
            $scope.settings[SETTINGS.VILLAGE_ID] = data.id
            settings.setAll(settings.decode($scope.settings))
        },
        clearLogs: function() {
            utils.notif('success', $filter('i18n')('logs_cleared', $rootScope.loc.ale, 'prank_helper'))
            $scope.visibleLogs = []
            eventHandlers.updateLogs()
        },
        start: function() {
            $scope.running = true
        },
        stop: function() {
            $scope.running = false
        }
    }
    const init = function() {
        settings = prankHelper.getSettings()
        prankVillage = {
            origin: false
        }
        $button = interfaceOverflow.addMenuButton3('Błazen', 80, $filter('i18n')('description', $rootScope.loc.ale, 'prank_helper'))
        $button.addEventListener('click', buildWindow)
        eventQueue.register(eventTypeProvider.PRANK_HELPER_START, function() {
            running = true
            $button.classList.remove('btn-orange')
            $button.classList.add('btn-red')
            utils.notif('success', $filter('i18n')('rename_started', $rootScope.loc.ale, 'recruit_queue'))
        })
        eventQueue.register(eventTypeProvider.PRANK_HELPER_STOP, function() {
            running = false
            $button.classList.remove('btn-red')
            $button.classList.add('btn-orange')
            utils.notif('success', $filter('i18n')('rename_stopped', $rootScope.loc.ale, 'recruit_queue'))
        })
        $rootScope.$on(eventTypeProvider.SHOW_CONTEXT_MENU, setMapSelectedVillage)
        $rootScope.$on(eventTypeProvider.DESTROY_CONTEXT_MENU, unsetMapSelectedVillage)
        interfaceOverflow.addTemplate('twoverflow_prank_helper_window', `___prank_helper_html_main`)
        interfaceOverflow.addStyle('___prank_helper_css_style')
    }
    const buildWindow = function() {
        $scope = $rootScope.$new()
        $scope.SETTINGS = SETTINGS
        $scope.TAB_TYPES = TAB_TYPES
        $scope.running = running
        $scope.selectedTab = TAB_TYPES.RENAME
        $scope.settingsMap = SETTINGS_MAP
        $scope.pagination = {}
        $scope.prankVillage = prankVillage
        $scope.clear = clear
        $scope.autoCompleteVillage = {
            type: ['village'],
            placeholder: $filter('i18n')('rename.add_village_search', $rootScope.loc.ale, 'prank_helper'),
            onEnter: eventHandlers.onAutoCompleteVillage,
            tooltip: $filter('i18n')('rename.add_origin', $rootScope.loc.ale, 'prank_helper'),
            dropDown: true
        }
        $scope.type = Settings.encodeList(PH_TYPE, {
            textObject: 'prank_helper',
            disabled: true
        })
        settings.injectScope($scope)
        eventHandlers.updateGroups()
        $scope.selectTab = selectTab
        $scope.addMapSelected = addMapSelected
        $scope.renameAll = renameAll
        $scope.renameProvince = renameProvince
        $scope.renameGroup = renameGroup
        $scope.logsView = logsView
        $scope.logsView.logs = prankHelper.getLogs()
        $scope.villagesInfo = villagesInfo
        $scope.villagesLabel = villagesLabel
        $scope.openVillageInfo = windowDisplayService.openVillageInfo
        $scope.jumpToVillage = mapService.jumpToVillage
        $scope.pagination.logs = {
            count: logsView.logs.length,
            offset: 0,
            loader: logsView.updateVisibleLogs,
            limit: storageService.getPaginationLimit()
        }
        logsView.updateVisibleLogs()
        let eventScope = new EventScope('twoverflow_prank_helper_window', function onDestroy() {
            console.log('prankHelper window closed')
        })
        eventScope.register(eventTypeProvider.SELECT_SELECTED, eventHandlers.autoCompleteSelected, true)
        eventScope.register(eventTypeProvider.GROUPS_CREATED, eventHandlers.updateGroups, true)
        eventScope.register(eventTypeProvider.GROUPS_DESTROYED, eventHandlers.updateGroups, true)
        eventScope.register(eventTypeProvider.GROUPS_UPDATED, eventHandlers.updateGroups, true)
        eventScope.register(eventTypeProvider.PRANK_HELPER_CLEAR_LOGS, eventHandlers.clearLogs)
        eventScope.register(eventTypeProvider.PRANK_HELPER_START, eventHandlers.start)
        eventScope.register(eventTypeProvider.PRANK_HELPER_STOP, eventHandlers.stop)
        windowManagerService.getScreenWithInjectedScope('!twoverflow_prank_helper_window', $scope)
    }
    return init
})
define('two/prankHelper/settings', [], function () {
    return {
        GROUPS: 'groups',
        VILLAGE_ID: 'village_id',
        TYPE1: 'type1',
        TYPE2: 'type2',
        TYPE3: 'type3',
        CENTER1: 'center1',
        CENTER2: 'center2',
        CENTER3: 'center3',
        PROLOGUE1: 'prologue1',
        PROLOGUE2: 'prologue2',
        PROLOGUE3: 'prologue3',
        EPILOGUE1: 'epilogue1',
        EPILOGUE2: 'epilogue2',
        EPILOGUE3: 'epilogue3',
        FROM1: 'from1',
        FROM2: 'from2',
        FROM3: 'from3',
        TO1: 'to1',
        TO2: 'to2',
        TO3: 'to3'
    }
})

define('two/prankHelper/settings/updates', function () {
    return {
        GROUPS: 'groups'
    }
})

define('two/prankHelper/settings/map', [
    'two/prankHelper/settings',
    'two/prankHelper/settings/updates'
], function (
    SETTINGS,
    UPDATES
) {
    return {
        [SETTINGS.GROUPS]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.TYPE1]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.TYPE2]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.TYPE3]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.CENTER1]: {
            default: '',
            inputType: 'text'
        },
        [SETTINGS.CENTER2]: {
            default: '',
            inputType: 'text'
        },
        [SETTINGS.CENTER3]: {
            default: '',
            inputType: 'text'
        },
        [SETTINGS.TO1]: {
            default: '',
            inputType: 'text'
        },
        [SETTINGS.TO2]: {
            default: '',
            inputType: 'text'
        },
        [SETTINGS.TO3]: {
            default: '',
            inputType: 'text'
        },
        [SETTINGS.FROM1]: {
            default: '',
            inputType: 'text'
        },
        [SETTINGS.FROM2]: {
            default: '',
            inputType: 'text'
        },
        [SETTINGS.FROM3]: {
            default: '',
            inputType: 'text'
        },
        [SETTINGS.EPILOGUE1]: {
            default: '',
            inputType: 'text'
        },
        [SETTINGS.EPILOGUE2]: {
            default: '',
            inputType: 'text'
        },
        [SETTINGS.EPILOGUE3]: {
            default: '',
            inputType: 'text'
        },
        [SETTINGS.PROLOGUE1]: {
            default: '',
            inputType: 'text'
        },
        [SETTINGS.PROLOGUE2]: {
            default: '',
            inputType: 'text'
        },
        [SETTINGS.PROLOGUE3]: {
            default: '',
            inputType: 'text'
        },
        [SETTINGS.VILLAGE_ID]: {
            default: '0',
            inputType: 'text'
        }
    }
})

define('two/prankHelper/types/type', [], function () {
    return {
        INCREASE: 'increase',
        DECREASE: 'decrease',
        RANDOM: 'random'
    }
})
require([
    'two/ready',
    'two/prankHelper',
    'two/prankHelper/ui',
    'two/prankHelper/events'
], function (
    ready,
    prankHelper,
    prankHelperInterface
) {
    if (prankHelper.isInitialized()) {
        return false
    }

    ready(function () {
        prankHelper.init()
        prankHelperInterface()
    }, ['map'])
})

define('two/presetCreator', [
    'queues/EventQueue',
    'two/utils'
], function(
    eventQueue,
    utils
) {
    var initialized = false
    var running = false
    var player = modelDataService.getSelectedCharacter()
    var villages = player.getVillageList()
    var pikinier = '060504'
    var miecznik = '060505'
    var topornik = '06050f'
    var łucznik = '060506'
    var lk = '060502'
    var łk = '060501'
    var ck = '060503'
    var partDeff = '05020a'
    var fullDeff = '05030a'
    var partOff = '04080a'
    var fullOff = '040a0a'
    var fejkpik = '070e04'
    var fejkmiecz = '070e05'
    var fejktop = '070e0f'
    var fejkłuk = '070e06'
    var fejklk = '070e02'
    var fejkłk = '070e01'
    var fejkck = '070e03'
    var fejktar = '070e07'
    var fejkkat = '070e0b'
    var fejktreb = '070e0e'
    var karetatar = '030d07'
    var karetakat = '030d0b'
    var karetatreb = '030d0e'

    function createPresets() {
        pikinier = typeof pikinier === 'string' ? parseInt(pikinier, 16) : pikinier
        miecznik = typeof miecznik === 'string' ? parseInt(miecznik, 16) : miecznik
        topornik = typeof topornik === 'string' ? parseInt(topornik, 16) : topornik
        łucznik = typeof łucznik === 'string' ? parseInt(łucznik, 16) : łucznik
        lk = typeof lk === 'string' ? parseInt(lk, 16) : lk
        łk = typeof łk === 'string' ? parseInt(łk, 16) : łk
        ck = typeof ck === 'string' ? parseInt(ck, 16) : ck
        partDeff = typeof partDeff === 'string' ? parseInt(partDeff, 16) : partDeff
        fullDeff = typeof fullDeff === 'string' ? parseInt(fullDeff, 16) : fullDeff
        partOff = typeof partOff === 'string' ? parseInt(partOff, 16) : partOff
        fullOff = typeof fullOff === 'string' ? parseInt(fullOff, 16) : fullOff
        fejkpik = typeof fejkpik === 'string' ? parseInt(fejkpik, 16) : fejkpik
        fejkmiecz = typeof fejkmiecz === 'string' ? parseInt(fejkmiecz, 16) : fejkmiecz
        fejktop = typeof fejktop === 'string' ? parseInt(fejktop, 16) : fejktop
        fejkłuk = typeof fejkłuk === 'string' ? parseInt(fejkłuk, 16) : fejkłuk
        fejklk = typeof fejklk === 'string' ? parseInt(fejklk, 16) : fejklk
        fejkłk = typeof fejkłk === 'string' ? parseInt(fejkłk, 16) : fejkłk
        fejkck = typeof fejkck === 'string' ? parseInt(fejkck, 16) : fejkck
        fejktar = typeof fejktar === 'string' ? parseInt(fejktar, 16) : fejktar
        fejkkat = typeof fejkkat === 'string' ? parseInt(fejkkat, 16) : fejkkat
        fejktreb = typeof fejktreb === 'string' ? parseInt(fejktreb, 16) : fejktreb
        karetatar = typeof karetatar === 'string' ? parseInt(karetatar, 16) : karetatar
        karetakat = typeof karetakat === 'string' ? parseInt(karetakat, 16) : karetakat
        karetatreb = typeof karetatreb === 'string' ? parseInt(karetatreb, 16) : karetatreb
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'Farma (pik)',
            icon: pikinier,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 20,
                sword: 0,
                axe: 0,
                archer: 0,
                light_cavalry: 0,
                mounted_archer: 0,
                heavy_cavalry: 0,
                ram: 0,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'Farma (miecz)',
            icon: miecznik,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 33,
                axe: 0,
                archer: 0,
                light_cavalry: 0,
                mounted_archer: 0,
                heavy_cavalry: 0,
                ram: 0,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'Farma (top)',
            icon: topornik,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 0,
                axe: 25,
                archer: 0,
                light_cavalry: 0,
                mounted_archer: 0,
                heavy_cavalry: 0,
                ram: 0,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'Farma (łuk)',
            icon: łucznik,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 0,
                axe: 0,
                archer: 50,
                light_cavalry: 0,
                mounted_archer: 0,
                heavy_cavalry: 0,
                ram: 0,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'Farma (lk)',
            icon: lk,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 0,
                axe: 0,
                archer: 0,
                light_cavalry: 10,
                mounted_archer: 0,
                heavy_cavalry: 0,
                ram: 0,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'Farma (łk)',
            icon: łk,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 0,
                axe: 0,
                archer: 0,
                light_cavalry: 0,
                mounted_archer: 10,
                heavy_cavalry: 0,
                ram: 0,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'Farma (ck)',
            icon: ck,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 0,
                axe: 0,
                archer: 0,
                light_cavalry: 0,
                mounted_archer: 0,
                heavy_cavalry: 10,
                ram: 0,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'PartDeff',
            icon: partDeff,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 180,
                sword: 140,
                axe: 0,
                archer: 100,
                light_cavalry: 0,
                mounted_archer: 0,
                heavy_cavalry: 0,
                ram: 0,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'FullDeff',
            icon: fullDeff,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 9000,
                sword: 7000,
                axe: 0,
                archer: 5000,
                light_cavalry: 0,
                mounted_archer: 0,
                heavy_cavalry: 0,
                ram: 0,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'PartOff',
            icon: partOff,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 0,
                axe: 200,
                archer: 0,
                light_cavalry: 75,
                mounted_archer: 87,
                heavy_cavalry: 0,
                ram: 15,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'FullOff',
            icon: fullOff,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 0,
                axe: 4000,
                archer: 0,
                light_cavalry: 1500,
                mounted_archer: 1750,
                heavy_cavalry: 0,
                ram: 300,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'fejk (pik)',
            icon: fejkpik,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 1,
                sword: 0,
                axe: 0,
                archer: 0,
                light_cavalry: 0,
                mounted_archer: 0,
                heavy_cavalry: 0,
                ram: 0,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'fejk (miecz)',
            icon: fejkmiecz,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 1,
                axe: 0,
                archer: 0,
                light_cavalry: 0,
                mounted_archer: 0,
                heavy_cavalry: 0,
                ram: 0,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'fejk (top)',
            icon: fejktop,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 0,
                axe: 1,
                archer: 0,
                light_cavalry: 0,
                mounted_archer: 0,
                heavy_cavalry: 0,
                ram: 0,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'fejk (łuk)',
            icon: fejkłuk,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 0,
                axe: 0,
                archer: 1,
                light_cavalry: 0,
                mounted_archer: 0,
                heavy_cavalry: 0,
                ram: 0,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'fejk (lk)',
            icon: fejklk,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 0,
                axe: 0,
                archer: 0,
                light_cavalry: 1,
                mounted_archer: 0,
                heavy_cavalry: 0,
                ram: 0,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'fejk (łk)',
            icon: fejkłk,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 0,
                axe: 0,
                archer: 0,
                light_cavalry: 0,
                mounted_archer: 1,
                heavy_cavalry: 0,
                ram: 0,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'fejk (ck)',
            icon: fejkck,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 0,
                axe: 0,
                archer: 0,
                light_cavalry: 0,
                mounted_archer: 0,
                heavy_cavalry: 1,
                ram: 0,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'fejk (tar)',
            icon: fejktar,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 0,
                axe: 0,
                archer: 0,
                light_cavalry: 0,
                mounted_archer: 0,
                heavy_cavalry: 0,
                ram: 1,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'fejk (kat)',
            icon: fejkkat,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 0,
                axe: 0,
                archer: 0,
                light_cavalry: 0,
                mounted_archer: 0,
                heavy_cavalry: 0,
                ram: 0,
                catapult: 1,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'fejk (treb)',
            icon: fejktreb,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 0,
                axe: 0,
                archer: 0,
                light_cavalry: 0,
                mounted_archer: 0,
                heavy_cavalry: 0,
                ram: 0,
                catapult: 0,
                trebuchet: 1,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'kareta (tar)',
            icon: karetatreb,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 0,
                axe: 0,
                archer: 0,
                light_cavalry: 0,
                mounted_archer: 0,
                heavy_cavalry: 0,
                ram: 1,
                catapult: 0,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'kareta (kat)',
            icon: karetatreb,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 0,
                axe: 0,
                archer: 0,
                light_cavalry: 0,
                mounted_archer: 0,
                heavy_cavalry: 0,
                ram: 0,
                catapult: 1,
                trebuchet: 0,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        socketService.emit(routeProvider.SAVE_NEW_PRESET, {
            village_id: villages[0].data.villageId,
            name: 'kareta (treb)',
            icon: karetatreb,
            officers: {
                leader: false,
                loot_master: false,
                medic: false,
                scout: false,
                supporter: false,
                bastard: false
            },
            units: {
                spear: 0,
                sword: 0,
                axe: 0,
                archer: 0,
                light_cavalry: 0,
                mounted_archer: 0,
                heavy_cavalry: 0,
                ram: 0,
                catapult: 0,
                trebuchet: 1,
                doppelsoldner: 0,
                snob: 0,
                knight: 0
            }
        })
        utils.notif('success', $filter('i18n')('done', $rootScope.loc.ale, 'preset_creator'))
        utils.notif('success', $filter('i18n')('deactivated', $rootScope.loc.ale, 'preset_creator'))
        presetCreator.stop()
    }
    var presetCreator = {}
    presetCreator.init = function() {
        initialized = true
    }
    presetCreator.start = function() {
        eventQueue.trigger(eventTypeProvider.PRESET_CREATOR_STARTED)
        running = true
        createPresets()
    }
    presetCreator.stop = function() {
        eventQueue.trigger(eventTypeProvider.PRESET_CREATOR_STOPPED)
        running = false
    }
    presetCreator.isRunning = function() {
        return running
    }
    presetCreator.isInitialized = function() {
        return initialized
    }
    return presetCreator
})
define('two/presetCreator/events', [], function () {
    angular.extend(eventTypeProvider, {
        PRESET_CREATOR_STARTED: 'preset_creator_started',
        PRESET_CREATOR_STOPPED: 'preset_creator_stopped'
    })
})

define('two/presetCreator/ui', [
    'two/ui',
    'two/presetCreator',
    'two/utils',
    'queues/EventQueue'
], function (
    interfaceOverflow,
    presetCreator,
    utils,
    eventQueue
) {
    let $button

    const init = function () {
        interfaceOverflow.addDivisor(41)
        $button = interfaceOverflow.addMenuButton3('Wojewoda', 40, $filter('i18n')('description', $rootScope.loc.ale, 'preset_creator'))

        $button.addEventListener('click', function () {
            if (presetCreator.isRunning()) {
                presetCreator.stop()
                utils.notif('success', $filter('i18n')('deactivated', $rootScope.loc.ale, 'preset_creator'))
            } else {
                presetCreator.start()
                utils.notif('success', $filter('i18n')('activated', $rootScope.loc.ale, 'preset_creator'))
            }
        })

        eventQueue.register(eventTypeProvider.PRESET_CREATOR_STARTED, function () {
            $button.classList.remove('btn-orange')
            $button.classList.add('btn-red')
        })

        eventQueue.register(eventTypeProvider.PRESET_CREATOR_STOPPED, function () {
            $button.classList.remove('btn-red')
            $button.classList.add('btn-orange')
        })

        if (presetCreator.isRunning()) {
            eventQueue.trigger(eventTypeProvider.PRESET_CREATOR_STARTED)
        }

        return opener
    }

    return init
})


require([
    'two/ready',
    'two/presetCreator',
    'two/presetCreator/ui',
    'Lockr',
    'queues/EventQueue',
    'two/presetCreator/events',
], function(
    ready,
    presetCreator,
    presetCreatorInterface,
    Lockr,
    eventQueue
) {
    const STORAGE_KEYS = {
        ACTIVE: 'preset_creator_active'
    }
	
    if (presetCreator.isInitialized()) {
        return false
    }
    ready(function() {
        presetCreator.init()
        presetCreatorInterface()

        ready(function() {
            if (Lockr.get(STORAGE_KEYS.ACTIVE, false, true)) {
                presetCreator.start()
            }
			
            eventQueue.register(eventTypeProvider.PRESET_CREATOR_STARTED, function() {
                Lockr.set(STORAGE_KEYS.ACTIVE, true)
            })

            eventQueue.register(eventTypeProvider.PRESET_CREATOR_STOPPED, function() {
                Lockr.set(STORAGE_KEYS.ACTIVE, false)
            })
        }, ['initial_village'])
    })
})
define('two/recruitQueue', [
    'two/Settings',
    'two/recruitQueue/types/errors',
    'two/recruitQueue/types/status',
    'two/recruitQueue/settings',
    'two/recruitQueue/settings/map',
    'two/recruitQueue/settings/updates',
    'two/recruitQueue/types/units',
    'two/recruitQueue/types/logs',
    'two/ready',
    'queues/EventQueue',
    'Lockr',
    'helper/time'
], function(
    Settings,
    ERROR_TYPES,
    STATUS,
    SETTINGS,
    SETTINGS_MAP,
    UPDATES,
    RQ_UNIT,
    LOG_TYPES,
    ready,
    eventQueue,
    Lockr,
    timeHelper
) {
    let initialized = false
    let running = false
    let settings
    let recruitQueueSettings
    let logs
    let nextCycleDate = null
    let logData = []
    const LOGS_LIMIT = 500
    const MINIMUM_RECRUIT_CYCLE_INTERVAL = 1
    let runningRecrutation = null
    let interval5 = 0
    let selectedGroups1 = []
    let selectedGroups2 = []
    let selectedGroups3 = []
    let selectedGroups4 = []
    let selectedGroups5 = []
    let selectedGroups6 = []
    let selectedGroups7 = []
    let selectedGroups8 = []
    let selectedGroups9 = []
    let selectedGroups10 = []
    let selectedGroups11 = []
    let selectedGroups12 = []
    let selectedGroups13 = []
    let selectedGroups14 = []
    let selectedGroups15 = []
    let selectedGroups16 = []
    let selectedGroups17 = []
    let selectedGroups18 = []
    let selectedGroups19 = []
    let selectedGroups20 = []
    let selectedGroups21 = []
    let selectedGroups22 = []
    let selectedGroups23 = []
    let selectedGroups24 = []
    let unitInterval = 6000
    const STORAGE_KEYS = {
        SETTINGS: 'recruit_queue_settings',
        LOGS: 'recruit_queue_log'
    }
    const RECRUIT_UNIT = {
        [RQ_UNIT.SPEAR]: 'spear',
        [RQ_UNIT.SWORD]: 'sword',
        [RQ_UNIT.AXE]: 'axe',
        [RQ_UNIT.ARCHER]: 'archer',
        [RQ_UNIT.LIGHT_CAVALRY]: 'light_cavalry',
        [RQ_UNIT.MOUNTED_ARCHER]: 'mounted_archer',
        [RQ_UNIT.HEAVT_CAVALRY]: 'heavy_cavalry',
        [RQ_UNIT.RAM]: 'ram',
        [RQ_UNIT.CATAPULT]: 'catapult'
    }
    console.log(RECRUIT_UNIT)
    const updateGroups = function() {
        selectedGroups1 = []
        selectedGroups2 = []
        selectedGroups3 = []
        selectedGroups4 = []
        selectedGroups5 = []
        selectedGroups6 = []
        selectedGroups7 = []
        selectedGroups8 = []
        selectedGroups9 = []
        selectedGroups10 = []
        selectedGroups11 = []
        selectedGroups12 = []
        selectedGroups13 = []
        selectedGroups14 = []
        selectedGroups15 = []
        selectedGroups16 = []
        selectedGroups17 = []
        selectedGroups18 = []
        selectedGroups19 = []
        selectedGroups20 = []
        selectedGroups21 = []
        selectedGroups22 = []
        selectedGroups23 = []
        selectedGroups24 = []
        const allGroups = modelDataService.getGroupList().getGroups()
        const groupsSelectedByTheUser1 = recruitQueueSettings[SETTINGS.GROUP1]
        const groupsSelectedByTheUser2 = recruitQueueSettings[SETTINGS.GROUP2]
        const groupsSelectedByTheUser3 = recruitQueueSettings[SETTINGS.GROUP3]
        const groupsSelectedByTheUser4 = recruitQueueSettings[SETTINGS.GROUP4]
        const groupsSelectedByTheUser5 = recruitQueueSettings[SETTINGS.GROUP5]
        const groupsSelectedByTheUser6 = recruitQueueSettings[SETTINGS.GROUP6]
        const groupsSelectedByTheUser7 = recruitQueueSettings[SETTINGS.GROUP7]
        const groupsSelectedByTheUser8 = recruitQueueSettings[SETTINGS.GROUP8]
        const groupsSelectedByTheUser9 = recruitQueueSettings[SETTINGS.GROUP9]
        const groupsSelectedByTheUser10 = recruitQueueSettings[SETTINGS.GROUP10]
        const groupsSelectedByTheUser11 = recruitQueueSettings[SETTINGS.GROUP11]
        const groupsSelectedByTheUser12 = recruitQueueSettings[SETTINGS.GROUP12]
        const groupsSelectedByTheUser13 = recruitQueueSettings[SETTINGS.GROUP13]
        const groupsSelectedByTheUser14 = recruitQueueSettings[SETTINGS.GROUP14]
        const groupsSelectedByTheUser15 = recruitQueueSettings[SETTINGS.GROUP15]
        const groupsSelectedByTheUser16 = recruitQueueSettings[SETTINGS.GROUP16]
        const groupsSelectedByTheUser17 = recruitQueueSettings[SETTINGS.GROUP17]
        const groupsSelectedByTheUser18 = recruitQueueSettings[SETTINGS.GROUP18]
        const groupsSelectedByTheUser19 = recruitQueueSettings[SETTINGS.GROUP19]
        const groupsSelectedByTheUser20 = recruitQueueSettings[SETTINGS.GROUP20]
        const groupsSelectedByTheUser21 = recruitQueueSettings[SETTINGS.GROUP21]
        const groupsSelectedByTheUser22 = recruitQueueSettings[SETTINGS.GROUP22]
        const groupsSelectedByTheUser23 = recruitQueueSettings[SETTINGS.GROUP23]
        const groupsSelectedByTheUser24 = recruitQueueSettings[SETTINGS.GROUP24]
        groupsSelectedByTheUser1.forEach(function(groupId) {
            selectedGroups1.push(allGroups[groupId])
        })
        groupsSelectedByTheUser2.forEach(function(groupId) {
            selectedGroups2.push(allGroups[groupId])
        })
        groupsSelectedByTheUser3.forEach(function(groupId) {
            selectedGroups3.push(allGroups[groupId])
        })
        groupsSelectedByTheUser4.forEach(function(groupId) {
            selectedGroups4.push(allGroups[groupId])
        })
        groupsSelectedByTheUser5.forEach(function(groupId) {
            selectedGroups5.push(allGroups[groupId])
        })
        groupsSelectedByTheUser6.forEach(function(groupId) {
            selectedGroups6.push(allGroups[groupId])
        })
        groupsSelectedByTheUser7.forEach(function(groupId) {
            selectedGroups7.push(allGroups[groupId])
        })
        groupsSelectedByTheUser8.forEach(function(groupId) {
            selectedGroups8.push(allGroups[groupId])
        })
        groupsSelectedByTheUser9.forEach(function(groupId) {
            selectedGroups9.push(allGroups[groupId])
        })
        groupsSelectedByTheUser10.forEach(function(groupId) {
            selectedGroups10.push(allGroups[groupId])
        })
        groupsSelectedByTheUser11.forEach(function(groupId) {
            selectedGroups11.push(allGroups[groupId])
        })
        groupsSelectedByTheUser12.forEach(function(groupId) {
            selectedGroups12.push(allGroups[groupId])
        })
        groupsSelectedByTheUser13.forEach(function(groupId) {
            selectedGroups13.push(allGroups[groupId])
        })
        groupsSelectedByTheUser14.forEach(function(groupId) {
            selectedGroups14.push(allGroups[groupId])
        })
        groupsSelectedByTheUser15.forEach(function(groupId) {
            selectedGroups15.push(allGroups[groupId])
        })
        groupsSelectedByTheUser16.forEach(function(groupId) {
            selectedGroups16.push(allGroups[groupId])
        })
        groupsSelectedByTheUser17.forEach(function(groupId) {
            selectedGroups17.push(allGroups[groupId])
        })
        groupsSelectedByTheUser18.forEach(function(groupId) {
            selectedGroups18.push(allGroups[groupId])
        })
        groupsSelectedByTheUser19.forEach(function(groupId) {
            selectedGroups19.push(allGroups[groupId])
        })
        groupsSelectedByTheUser20.forEach(function(groupId) {
            selectedGroups20.push(allGroups[groupId])
        })
        groupsSelectedByTheUser21.forEach(function(groupId) {
            selectedGroups21.push(allGroups[groupId])
        })
        groupsSelectedByTheUser22.forEach(function(groupId) {
            selectedGroups22.push(allGroups[groupId])
        })
        groupsSelectedByTheUser23.forEach(function(groupId) {
            selectedGroups23.push(allGroups[groupId])
        })
        groupsSelectedByTheUser24.forEach(function(groupId) {
            selectedGroups24.push(allGroups[groupId])
        })
    }
    const getCycleInterval = function() {
        return Math.max(MINIMUM_RECRUIT_CYCLE_INTERVAL, recruitQueueSettings[SETTINGS.RECRUIT_QUEUE_INTERVAL] * 60 * 1000)
    }
    const addLog = function(villageId, unit, amount) {
        let data = {
            time: timeHelper.gameTime(),
            villageId: villageId,
            unit: unit,
            amount: amount
        }
        logs.unshift(data)
        if (logs.length > LOGS_LIMIT) {
            logs.splice(logs.length - LOGS_LIMIT, logs.length)
        }
        Lockr.set(STORAGE_KEYS.LOGS, logs)
        return true
    }
    const recruitQueue = {}
    recruitQueue.init = function() {
        initialized = true
        logs = Lockr.get(STORAGE_KEYS.LOGS, [], true)
        settings = new Settings({
            settingsMap: SETTINGS_MAP,
            storageKey: STORAGE_KEYS.SETTINGS
        })
        settings.onChange(function(changes, updates) {
            recruitQueueSettings = settings.getAll()
            if (updates[UPDATES.GROUPS]) {
                updateGroups()
            }
        })
        recruitQueueSettings = settings.getAll()
        console.log('recruitQueue settings', recruitQueueSettings)
        $rootScope.$on(eventTypeProvider.GROUPS_CREATED, updateGroups)
        $rootScope.$on(eventTypeProvider.GROUPS_DESTROYED, updateGroups)
        $rootScope.$on(eventTypeProvider.GROUPS_UPDATED, updateGroups)
    }
    recruitQueue.ownRecrutation = function() {}
    recruitQueue.presetRecrutation = function() {
        eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_CYCLE_BEGIN)
        nextCycleDate = timeHelper.gameTime() + getCycleInterval()
        const groupList = modelDataService.getGroupList()
        const selectedGroup1 = recruitQueueSettings[SETTINGS.GROUP1]
        const selectedGroup2 = recruitQueueSettings[SETTINGS.GROUP2]
        const selectedGroup3 = recruitQueueSettings[SETTINGS.GROUP3]
        const selectedGroup4 = recruitQueueSettings[SETTINGS.GROUP4]
        var groupVillages1 = groupList.getGroupVillageIds(selectedGroup1)
        var groupVillages2 = groupList.getGroupVillageIds(selectedGroup2)
        var groupVillages3 = groupList.getGroupVillageIds(selectedGroup3)
        var groupVillages4 = groupList.getGroupVillageIds(selectedGroup4)
        const minimal1 = recruitQueueSettings[SETTINGS.MIN_PACK1]
        const minimal2 = recruitQueueSettings[SETTINGS.MIN_PACK2]
        const minimal3 = recruitQueueSettings[SETTINGS.MIN_PACK3]
        const minimal4 = recruitQueueSettings[SETTINGS.MIN_PACK4]
        const Archer1 = recruitQueueSettings[SETTINGS.START_AMOUNT4]
        const Axe1 = recruitQueueSettings[SETTINGS.START_AMOUNT3]
        const Catapult1 = recruitQueueSettings[SETTINGS.START_AMOUNT9]
        const HC1 = recruitQueueSettings[SETTINGS.START_AMOUNT7]
        const LC1 = recruitQueueSettings[SETTINGS.START_AMOUNT5]
        const MA1 = recruitQueueSettings[SETTINGS.START_AMOUNT6]
        const Ram1 = recruitQueueSettings[SETTINGS.START_AMOUNT8]
        const Spear1 = recruitQueueSettings[SETTINGS.START_AMOUNT1]
        const Sword1 = recruitQueueSettings[SETTINGS.START_AMOUNT2]
        const Archer2 = recruitQueueSettings[SETTINGS.START_AMOUNT14]
        const Axe2 = recruitQueueSettings[SETTINGS.START_AMOUNT13]
        const Catapult2 = recruitQueueSettings[SETTINGS.START_AMOUNT19]
        const HC2 = recruitQueueSettings[SETTINGS.START_AMOUNT17]
        const LC2 = recruitQueueSettings[SETTINGS.START_AMOUNT15]
        const MA2 = recruitQueueSettings[SETTINGS.START_AMOUNT16]
        const Ram2 = recruitQueueSettings[SETTINGS.START_AMOUNT18]
        const Spear2 = recruitQueueSettings[SETTINGS.START_AMOUNT11]
        const Sword2 = recruitQueueSettings[SETTINGS.START_AMOUNT12]
        const Archer3 = recruitQueueSettings[SETTINGS.START_AMOUNT24]
        const Axe3 = recruitQueueSettings[SETTINGS.START_AMOUNT23]
        const Catapult3 = recruitQueueSettings[SETTINGS.START_AMOUNT29]
        const HC3 = recruitQueueSettings[SETTINGS.START_AMOUNT27]
        const LC3 = recruitQueueSettings[SETTINGS.START_AMOUNT25]
        const MA3 = recruitQueueSettings[SETTINGS.START_AMOUNT26]
        const Ram3 = recruitQueueSettings[SETTINGS.START_AMOUNT28]
        const Spear3 = recruitQueueSettings[SETTINGS.START_AMOUNT21]
        const Sword3 = recruitQueueSettings[SETTINGS.START_AMOUNT22]
        const Archer4 = recruitQueueSettings[SETTINGS.START_AMOUNT34]
        const Axe4 = recruitQueueSettings[SETTINGS.START_AMOUNT33]
        const Catapult4 = recruitQueueSettings[SETTINGS.START_AMOUNT39]
        const HC4 = recruitQueueSettings[SETTINGS.START_AMOUNT37]
        const LC4 = recruitQueueSettings[SETTINGS.START_AMOUNT35]
        const MA4 = recruitQueueSettings[SETTINGS.START_AMOUNT36]
        const Ram4 = recruitQueueSettings[SETTINGS.START_AMOUNT38]
        const Spear4 = recruitQueueSettings[SETTINGS.START_AMOUNT31]
        const Sword4 = recruitQueueSettings[SETTINGS.START_AMOUNT32]
        const finalArcher1 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT4]
        const finalAxe1 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT3]
        const finalCatapult1 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT9]
        const finalHC1 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT7]
        const finalLC1 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT5]
        const finalMA1 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT6]
        const finalRam1 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT8]
        const finalSpear1 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT1]
        const finalSword1 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT2]
        const finalArcher2 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT14]
        const finalAxe2 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT13]
        const finalCatapult2 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT19]
        const finalHC2 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT17]
        const finalLC2 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT15]
        const finalMA2 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT16]
        const finalRam2 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT18]
        const finalSpear2 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT11]
        const finalSword2 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT12]
        const finalArcher3 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT24]
        const finalAxe3 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT23]
        const finalCatapult3 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT29]
        const finalHC3 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT27]
        const finalLC3 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT25]
        const finalMA3 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT26]
        const finalRam3 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT28]
        const finalSpear3 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT21]
        const finalSword3 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT22]
        const finalArcher4 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT34]
        const finalAxe4 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT33]
        const finalCatapult4 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT39]
        const finalHC4 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT37]
        const finalLC4 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT35]
        const finalMA4 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT36]
        const finalRam4 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT38]
        const finalSpear4 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT31]
        const finalSword4 = recruitQueueSettings[SETTINGS.FINAL_AMOUNT32]
        var wood = [50, 30, 60, 80, 125, 250, 200, 300, 320, 0, 40000, 4000, 1200]
        var clay = [30, 30, 30, 30, 100, 100, 150, 200, 400, 0, 50000, 2000, 1200]
        var iron = [20, 70, 40, 60, 250, 150, 600, 200, 100, 0, 50000, 2000, 2400]
        var food = [1, 1, 1, 1, 4, 5, 6, 5, 8, 1, 100, 10, 6]
        var spearAmount = 0
        var swordAmount = 0
        var axeAmount = 0
        var archerAmount = 0
        var light_cavalryAmount = 0
        var mounted_archerAmount = 0
        var ramAmount = 0
        var catapultAmount = 0
        var heavy_cavalryAmount = 0
        var Barracks1 = 0
        var queue1 = 0
        var recruitingQueues = 0
        var barracksQueue1 = 0
        var unit = ''
        var woodModifier1 = 0
        var woodModifier2 = 0
        var woodModifier3 = 0
        var woodModifier4 = 0
        var archernew1 = 0
        var archernew2 = 0
        var archernew3 = 0
        var archernew4 = 0
        var axenew1 = 0
        var axenew2 = 0
        var axenew3 = 0
        var axenew4 = 0
        var catapultnew1 = 0
        var catapultnew2 = 0
        var catapultnew3 = 0
        var catapultnew4 = 0
        var clayModifier1 = 0
        var clayModifier2 = 0
        var clayModifier3 = 0
        var clayModifier4 = 0
        var foodModifier1 = 0
        var foodModifier2 = 0
        var foodModifier3 = 0
        var foodModifier4 = 0
        var generalModifier1 = 0
        var generalModifier2 = 0
        var generalModifier3 = 0
        var generalModifier4 = 0
        var hcnew1 = 0
        var hcnew2 = 0
        var hcnew3 = 0
        var hcnew4 = 0
        var ironModifier1 = 0
        var ironModifier2 = 0
        var ironModifier3 = 0
        var ironModifier4 = 0
        var lcnew1 = 0
        var lcnew2 = 0
        var lcnew3 = 0
        var lcnew4 = 0
        var manew1 = 0
        var manew2 = 0
        var manew3 = 0
        var manew4 = 0
        var ramnew1 = 0
        var ramnew2 = 0
        var ramnew3 = 0
        var ramnew4 = 0
        var recruitingTime = 0
        var recruitingTimeToFinish = 0
        var spearnew1 = 0
        var spearnew2 = 0
        var spearnew3 = 0
        var spearnew4 = 0
        var swordnew1 = 0
        var swordnew2 = 0
        var swordnew3 = 0
        var swordnew4 = 0
        var totalRecruitingTime = 0
        var barracksRecrutingTime1 = []
        var barracks1TotalJobsLength = 0
        var modifier1 = 0
        var timeModifier1 = 0
        var barracksRecrutingTime2 = []
        var barracks2TotalJobsLength = 0
        var modifier2 = 0
        var timeModifier2 = 0
        var barracksRecrutingTime3 = []
        var barracks3TotalJobsLength = 0
        var modifier3 = 0
        var timeModifier3 = 0
        var barracksRecrutingTime4 = []
        var barracks4TotalJobsLength = 0
        var modifier4 = 0
        var timeModifier4 = 0
        var wood1 = 0
        var clay1 = 0
        var food1 = 0
        var iron1 = 0
        var villageFood1 = 0
        var villageWood1 = 0
        var villageClay1 = 0
        var villageIron1 = 0
        var villageIdSet = 0
        var Barracks2 = 0
        var queue2 = 0
        var barracksQueue2 = 0
        var villageFood2 = 0
        var villageWood2 = 0
        var villageClay2 = 0
        var villageIron2 = 0
        var Barracks3 = 0
        var queue3 = 0
        var barracksQueue3 = 0
        var villageFood3 = 0
        var villageWood3 = 0
        var villageClay3 = 0
        var villageIron3 = 0
        var Barracks4 = 0
        var queue4 = 0
        var barracksQueue4 = 0
        var villageFood4 = 0
        var villageWood4 = 0
        var villageClay4 = 0
        var villageIron4 = 0

        function modifier1Get() {
            if (selectedGroup1 > 0) {
                if (queue1.length >= 2) {
                    modifier1 = 1.0
                } else if (queue1.length == 1) {
                    modifier1 = 0.5
                } else {
                    modifier1 = 0.25
                }
            } else {
                modifier1 = 0.0
            }
            time1GetB()
        }

        function time1GetB() {
            if (barracksRecrutingTime1.length > 0) {
                barracks1TotalJobsLength = barracksRecrutingTime1.reduce(function(a, b) {
                    return a + b
                })
            } else {
                barracks1TotalJobsLength = 0
            }
            timeModifier1Get()
        }

        function timeModifier1Get() {
            if (selectedGroup1 > 0) {
                if (barracks1TotalJobsLength >= 93600000) {
                    timeModifier1 = 0.00
                } else if (barracks1TotalJobsLength < 93600000 && barracks1TotalJobsLength >= 86400000) {
                    timeModifier1 = 0.10
                } else if (barracks1TotalJobsLength < 86400000 && barracks1TotalJobsLength >= 72000000) {
                    timeModifier1 = 0.25
                } else if (barracks1TotalJobsLength < 72000000 && barracks1TotalJobsLength >= 57600000) {
                    timeModifier1 = 0.40
                } else if (barracks1TotalJobsLength < 57600000 && barracks1TotalJobsLength >= 43200000) {
                    timeModifier1 = 0.55
                } else if (barracks1TotalJobsLength < 43200000 && barracks1TotalJobsLength >= 28800000) {
                    timeModifier1 = 0.70
                } else if (barracks1TotalJobsLength < 28800000 && barracks1TotalJobsLength >= 14400000) {
                    timeModifier1 = 0.85
                } else if (barracks1TotalJobsLength < 14400000 && barracks1TotalJobsLength >= 7200000) {
                    timeModifier1 = 0.925
                } else if (barracks1TotalJobsLength < 7200000 && barracks1TotalJobsLength >= 3600000) {
                    timeModifier1 = 0.9625
                } else {
                    timeModifier1 = 1.00
                }
            } else {
                timeModifier1 = 0.00
            }
            recruit1()
        }

        function recruit1() {
            var spearToRecruit1 = finalSpear1 - spearAmount
            var swordToRecruit1 = finalSword1 - swordAmount
            var axeToRecruit1 = finalAxe1 - axeAmount
            var archerToRecruit1 = finalArcher1 - archerAmount
            var lcToRecruit1 = finalLC1 - light_cavalryAmount
            var maToRecruit1 = finalMA1 - mounted_archerAmount
            var ramToRecruit1 = finalRam1 - ramAmount
            var catapultToRecruit1 = finalCatapult1 - catapultAmount
            var hcToRecruit1 = finalHC1 - heavy_cavalryAmount
            var spear1 = Math.floor(Spear1 * timeModifier1 * modifier1)
            var sword1 = Math.floor(Sword1 * timeModifier1 * modifier1)
            var axe1 = Math.floor(Axe1 * timeModifier1 * modifier1)
            var archer1 = Math.floor(Archer1 * timeModifier1 * modifier1)
            var lc1 = Math.floor(LC1 * timeModifier1 * modifier1)
            var ma1 = Math.floor(MA1 * timeModifier1 * modifier1)
            var ram1 = Math.floor(Ram1 * timeModifier1 * modifier1)
            var catapult1 = Math.floor(Catapult1 * timeModifier1 * modifier1)
            var hc1 = Math.floor(HC1 * timeModifier1 * modifier1)
            console.log(spear1, sword1, axe1, archer1, lc1, ma1, ram1, hc1, catapult1)
            wood1 = spear1 * wood[0] + sword1 * wood[1] + axe1 * wood[2] + archer1 * wood[3] + lc1 * wood[4] + ma1 * wood[5] + ram1 * wood[7] + catapult1 * wood[8] + hc1 * wood[6]
            clay1 = spear1 * clay[0] + sword1 * clay[1] + axe1 * clay[2] + archer1 * clay[3] + lc1 * clay[4] + ma1 * clay[5] + ram1 * clay[7] + catapult1 * clay[8] + hc1 * clay[6]
            iron1 = spear1 * iron[0] + sword1 * iron[1] + axe1 * iron[2] + archer1 * iron[3] + lc1 * iron[4] + ma1 * iron[5] + ram1 * iron[7] + catapult1 * iron[8] + hc1 * iron[6]
            food1 = spear1 * food[0] + sword1 * food[1] + axe1 * food[2] + archer1 * food[3] + lc1 * food[4] + ma1 * food[5] + ram1 * food[7] + catapult1 * food[8] + hc1 * food[6]
            console.log(wood1, clay1, iron1, food1)
            if (spearToRecruit1 > 0 || hcToRecruit1 > 0 || catapultToRecruit1 > 0 || swordToRecruit1 > 0 || axeToRecruit1 > 0 || archerToRecruit1 > 0 || lcToRecruit1 > 0 || maToRecruit1 > 0 || ramToRecruit1 > 0) {
                if (wood1 <= villageWood1 && (spearToRecruit1 >= minimal1 || hcToRecruit1 >= minimal1 || catapultToRecruit1 >= minimal1 || swordToRecruit1 >= minimal1 || axeToRecruit1 >= minimal1 || archerToRecruit1 >= minimal1 || lcToRecruit1 >= minimal1 || maToRecruit1 >= minimal1 || ramToRecruit1 >= minimal1) && clay1 <= villageClay1 && iron1 <= villageIron1 && food1 <= villageFood1) {
                    spearnew1 = spear1
                    swordnew1 = sword1
                    axenew1 = axe1
                    archernew1 = archer1
                    lcnew1 = lc1
                    manew1 = ma1
                    ramnew1 = ram1
                    catapultnew1 = catapult1
                    hcnew1 = hc1
                } else if (wood1 >= villageWood1 && (spearToRecruit1 >= minimal1 || hcToRecruit1 >= minimal1 || catapultToRecruit1 >= minimal1 || swordToRecruit1 >= minimal1 || axeToRecruit1 >= minimal1 || archerToRecruit1 >= minimal1 || lcToRecruit1 >= minimal1 || maToRecruit1 >= minimal1 || ramToRecruit1 >= minimal1) && clay1 <= villageClay1 && iron1 <= villageIron1 && food1 <= villageFood1) {
                    generalModifier1 = villageWood1 / wood1
                    spearnew1 = Math.floor(generalModifier1 * spear1) - 1
                    swordnew1 = Math.floor(generalModifier1 * sword1) - 1
                    axenew1 = Math.floor(generalModifier1 * axe1) - 1
                    archernew1 = Math.floor(generalModifier1 * archer1) - 1
                    lcnew1 = Math.floor(generalModifier1 * lc1) - 1
                    manew1 = Math.floor(generalModifier1 * ma1) - 1
                    ramnew1 = Math.floor(generalModifier1 * ram1) - 1
                    catapultnew1 = Math.floor(generalModifier1 * catapult1) - 1
                    hcnew1 = Math.floor(generalModifier1 * hc1) - 1
                } else if (wood1 <= villageWood1 && (spearToRecruit1 >= minimal1 || hcToRecruit1 >= minimal1 || catapultToRecruit1 >= minimal1 || swordToRecruit1 >= minimal1 || axeToRecruit1 >= minimal1 || archerToRecruit1 >= minimal1 || lcToRecruit1 >= minimal1 || maToRecruit1 >= minimal1 || ramToRecruit1 >= minimal1) && clay1 >= villageClay1 && iron1 <= villageIron1 && food1 <= villageFood1) {
                    generalModifier1 = villageClay1 / clay1
                    spearnew1 = Math.floor(generalModifier1 * spear1) - 1
                    swordnew1 = Math.floor(generalModifier1 * sword1) - 1
                    axenew1 = Math.floor(generalModifier1 * axe1) - 1
                    archernew1 = Math.floor(generalModifier1 * archer1) - 1
                    lcnew1 = Math.floor(generalModifier1 * lc1) - 1
                    manew1 = Math.floor(generalModifier1 * ma1) - 1
                    ramnew1 = Math.floor(generalModifier1 * ram1) - 1
                    catapultnew1 = Math.floor(generalModifier1 * catapult1) - 1
                    hcnew1 = Math.floor(generalModifier1 * hc1) - 1
                } else if (wood1 <= villageWood1 && (spearToRecruit1 >= minimal1 || hcToRecruit1 >= minimal1 || catapultToRecruit1 >= minimal1 || swordToRecruit1 >= minimal1 || axeToRecruit1 >= minimal1 || archerToRecruit1 >= minimal1 || lcToRecruit1 >= minimal1 || maToRecruit1 >= minimal1 || ramToRecruit1 >= minimal1) && clay1 <= villageClay1 && iron1 >= villageIron1 && food1 <= villageFood1) {
                    generalModifier1 = villageIron1 / iron1
                    spearnew1 = Math.floor(generalModifier1 * spear1) - 1
                    swordnew1 = Math.floor(generalModifier1 * sword1) - 1
                    axenew1 = Math.floor(generalModifier1 * axe1) - 1
                    archernew1 = Math.floor(generalModifier1 * archer1) - 1
                    lcnew1 = Math.floor(generalModifier1 * lc1) - 1
                    manew1 = Math.floor(generalModifier1 * ma1) - 1
                    ramnew1 = Math.floor(generalModifier1 * ram1) - 1
                    catapultnew1 = Math.floor(generalModifier1 * catapult1) - 1
                    hcnew1 = Math.floor(generalModifier1 * hc1) - 1
                } else if (wood1 <= villageWood1 && (spearToRecruit1 >= minimal1 || hcToRecruit1 >= minimal1 || catapultToRecruit1 >= minimal1 || swordToRecruit1 >= minimal1 || axeToRecruit1 >= minimal1 || archerToRecruit1 >= minimal1 || lcToRecruit1 >= minimal1 || maToRecruit1 >= minimal1 || ramToRecruit1 >= minimal1) && clay1 <= villageClay1 && iron1 <= villageIron1 && food1 >= villageFood1) {
                    generalModifier1 = villageFood1 / food1
                    spearnew1 = Math.floor(generalModifier1 * spear1) - 1
                    swordnew1 = Math.floor(generalModifier1 * sword1) - 1
                    axenew1 = Math.floor(generalModifier1 * axe1) - 1
                    archernew1 = Math.floor(generalModifier1 * archer1) - 1
                    lcnew1 = Math.floor(generalModifier1 * lc1) - 1
                    manew1 = Math.floor(generalModifier1 * ma1) - 1
                    ramnew1 = Math.floor(generalModifier1 * ram1) - 1
                    catapultnew1 = Math.floor(generalModifier1 * catapult1) - 1
                    hcnew1 = Math.floor(generalModifier1 * hc1) - 1
                } else if (wood1 >= villageWood1 && (spearToRecruit1 >= minimal1 || hcToRecruit1 >= minimal1 || catapultToRecruit1 >= minimal1 || swordToRecruit1 >= minimal1 || axeToRecruit1 >= minimal1 || archerToRecruit1 >= minimal1 || lcToRecruit1 >= minimal1 || maToRecruit1 >= minimal1 || ramToRecruit1 >= minimal1) && clay1 >= villageClay1 && iron1 <= villageIron1 && food1 <= villageFood1) {
                    woodModifier1 = villageWood1 / wood1
                    clayModifier1 = villageClay1 / clay1
                    if (clayModifier1 > woodModifier1) {
                        spearnew1 = Math.floor(woodModifier1 * spear1) - 1
                        swordnew1 = Math.floor(woodModifier1 * sword1) - 1
                        axenew1 = Math.floor(woodModifier1 * axe1) - 1
                        archernew1 = Math.floor(woodModifier1 * archer1) - 1
                        lcnew1 = Math.floor(woodModifier1 * lc1) - 1
                        manew1 = Math.floor(woodModifier1 * ma1) - 1
                        ramnew1 = Math.floor(woodModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(woodModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(woodModifier1 * hc1) - 1
                    } else {
                        spearnew1 = Math.floor(clayModifier1 * spear1) - 1
                        swordnew1 = Math.floor(clayModifier1 * sword1) - 1
                        axenew1 = Math.floor(clayModifier1 * axe1) - 1
                        archernew1 = Math.floor(clayModifier1 * archer1) - 1
                        lcnew1 = Math.floor(clayModifier1 * lc1) - 1
                        manew1 = Math.floor(clayModifier1 * ma1) - 1
                        ramnew1 = Math.floor(clayModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(clayModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(clayModifier1 * hc1) - 1
                    }
                } else if (wood1 <= villageWood1 && (spearToRecruit1 >= minimal1 || hcToRecruit1 >= minimal1 || catapultToRecruit1 >= minimal1 || swordToRecruit1 >= minimal1 || axeToRecruit1 >= minimal1 || archerToRecruit1 >= minimal1 || lcToRecruit1 >= minimal1 || maToRecruit1 >= minimal1 || ramToRecruit1 >= minimal1) && clay1 >= villageClay1 && iron1 >= villageIron1 && food1 <= villageFood1) {
                    ironModifier1 = villageIron1 / iron1
                    clayModifier1 = villageClay1 / clay1
                    if (clayModifier1 > ironModifier1) {
                        spearnew1 = Math.floor(ironModifier1 * spear1) - 1
                        swordnew1 = Math.floor(ironModifier1 * sword1) - 1
                        axenew1 = Math.floor(ironModifier1 * axe1) - 1
                        archernew1 = Math.floor(ironModifier1 * archer1) - 1
                        lcnew1 = Math.floor(ironModifier1 * lc1) - 1
                        manew1 = Math.floor(ironModifier1 * ma1) - 1
                        ramnew1 = Math.floor(ironModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(ironModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(ironModifier1 * hc1) - 1
                    } else {
                        spearnew1 = Math.floor(clayModifier1 * spear1) - 1
                        swordnew1 = Math.floor(clayModifier1 * sword1) - 1
                        axenew1 = Math.floor(clayModifier1 * axe1) - 1
                        archernew1 = Math.floor(clayModifier1 * archer1) - 1
                        lcnew1 = Math.floor(clayModifier1 * lc1) - 1
                        manew1 = Math.floor(clayModifier1 * ma1) - 1
                        ramnew1 = Math.floor(clayModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(clayModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(clayModifier1 * hc1) - 1
                    }
                } else if (wood1 <= villageWood1 && (spearToRecruit1 >= minimal1 || hcToRecruit1 >= minimal1 || catapultToRecruit1 >= minimal1 || swordToRecruit1 >= minimal1 || axeToRecruit1 >= minimal1 || archerToRecruit1 >= minimal1 || lcToRecruit1 >= minimal1 || maToRecruit1 >= minimal1 || ramToRecruit1 >= minimal1) && clay1 >= villageClay1 && iron1 <= villageIron1 && food1 >= villageFood1) {
                    foodModifier1 = villageFood1 / food1
                    clayModifier1 = villageClay1 / clay1
                    if (clayModifier1 > foodModifier1) {
                        spearnew1 = Math.floor(foodModifier1 * spear1) - 1
                        swordnew1 = Math.floor(foodModifier1 * sword1) - 1
                        axenew1 = Math.floor(foodModifier1 * axe1) - 1
                        archernew1 = Math.floor(foodModifier1 * archer1) - 1
                        lcnew1 = Math.floor(foodModifier1 * lc1) - 1
                        manew1 = Math.floor(foodModifier1 * ma1) - 1
                        ramnew1 = Math.floor(foodModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(foodModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(foodModifier1 * hc1) - 1
                    } else {
                        spearnew1 = Math.floor(clayModifier1 * spear1) - 1
                        swordnew1 = Math.floor(clayModifier1 * sword1) - 1
                        axenew1 = Math.floor(clayModifier1 * axe1) - 1
                        archernew1 = Math.floor(clayModifier1 * archer1) - 1
                        lcnew1 = Math.floor(clayModifier1 * lc1) - 1
                        manew1 = Math.floor(clayModifier1 * ma1) - 1
                        ramnew1 = Math.floor(clayModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(clayModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(clayModifier1 * hc1) - 1
                    }
                } else if (wood1 >= villageWood1 && (spearToRecruit1 >= minimal1 || hcToRecruit1 >= minimal1 || catapultToRecruit1 >= minimal1 || swordToRecruit1 >= minimal1 || axeToRecruit1 >= minimal1 || archerToRecruit1 >= minimal1 || lcToRecruit1 >= minimal1 || maToRecruit1 >= minimal1 || ramToRecruit1 >= minimal1) && clay1 <= villageClay1 && iron1 >= villageIron1 && food1 <= villageFood1) {
                    woodModifier1 = villageWood1 / wood1
                    ironModifier1 = villageIron1 / iron1
                    if (ironModifier1 > woodModifier1) {
                        spearnew1 = Math.floor(woodModifier1 * spear1) - 1
                        swordnew1 = Math.floor(woodModifier1 * sword1) - 1
                        axenew1 = Math.floor(woodModifier1 * axe1) - 1
                        archernew1 = Math.floor(woodModifier1 * archer1) - 1
                        lcnew1 = Math.floor(woodModifier1 * lc1) - 1
                        manew1 = Math.floor(woodModifier1 * ma1) - 1
                        ramnew1 = Math.floor(woodModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(woodModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(woodModifier1 * hc1) - 1
                    } else {
                        spearnew1 = Math.floor(ironModifier1 * spear1) - 1
                        swordnew1 = Math.floor(ironModifier1 * sword1) - 1
                        axenew1 = Math.floor(ironModifier1 * axe1) - 1
                        archernew1 = Math.floor(ironModifier1 * archer1) - 1
                        lcnew1 = Math.floor(ironModifier1 * lc1) - 1
                        manew1 = Math.floor(ironModifier1 * ma1) - 1
                        ramnew1 = Math.floor(ironModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(ironModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(ironModifier1 * hc1) - 1
                    }
                } else if (wood1 <= villageWood1 && (spearToRecruit1 >= minimal1 || hcToRecruit1 >= minimal1 || catapultToRecruit1 >= minimal1 || swordToRecruit1 >= minimal1 || axeToRecruit1 >= minimal1 || archerToRecruit1 >= minimal1 || lcToRecruit1 >= minimal1 || maToRecruit1 >= minimal1 || ramToRecruit1 >= minimal1) && clay1 <= villageClay1 && iron1 >= villageIron1 && food1 >= villageFood1) {
                    foodModifier1 = villageFood1 / food1
                    ironModifier1 = villageIron1 / iron1
                    if (ironModifier1 > foodModifier1) {
                        spearnew1 = Math.floor(foodModifier1 * spear1) - 1
                        swordnew1 = Math.floor(foodModifier1 * sword1) - 1
                        axenew1 = Math.floor(foodModifier1 * axe1) - 1
                        archernew1 = Math.floor(foodModifier1 * archer1) - 1
                        lcnew1 = Math.floor(foodModifier1 * lc1) - 1
                        manew1 = Math.floor(foodModifier1 * ma1) - 1
                        ramnew1 = Math.floor(foodModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(foodModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(foodModifier1 * hc1) - 1
                    } else {
                        spearnew1 = Math.floor(ironModifier1 * spear1) - 1
                        swordnew1 = Math.floor(ironModifier1 * sword1) - 1
                        axenew1 = Math.floor(ironModifier1 * axe1) - 1
                        archernew1 = Math.floor(ironModifier1 * archer1) - 1
                        lcnew1 = Math.floor(ironModifier1 * lc1) - 1
                        manew1 = Math.floor(ironModifier1 * ma1) - 1
                        ramnew1 = Math.floor(ironModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(ironModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(ironModifier1 * hc1) - 1
                    }
                } else if (wood1 >= villageWood1 && (spearToRecruit1 >= minimal1 || hcToRecruit1 >= minimal1 || catapultToRecruit1 >= minimal1 || swordToRecruit1 >= minimal1 || axeToRecruit1 >= minimal1 || archerToRecruit1 >= minimal1 || lcToRecruit1 >= minimal1 || maToRecruit1 >= minimal1 || ramToRecruit1 >= minimal1) && clay1 <= villageClay1 && iron1 <= villageIron1 && food1 >= villageFood1) {
                    woodModifier1 = villageWood1 / wood1
                    foodModifier1 = villageFood1 / food1
                    if (foodModifier1 > woodModifier1) {
                        spearnew1 = Math.floor(woodModifier1 * spear1) - 1
                        swordnew1 = Math.floor(woodModifier1 * sword1) - 1
                        axenew1 = Math.floor(woodModifier1 * axe1) - 1
                        archernew1 = Math.floor(woodModifier1 * archer1) - 1
                        lcnew1 = Math.floor(woodModifier1 * lc1) - 1
                        manew1 = Math.floor(woodModifier1 * ma1) - 1
                        ramnew1 = Math.floor(woodModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(woodModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(woodModifier1 * hc1) - 1
                    } else {
                        spearnew1 = Math.floor(foodModifier1 * spear1) - 1
                        swordnew1 = Math.floor(foodModifier1 * sword1) - 1
                        axenew1 = Math.floor(foodModifier1 * axe1) - 1
                        archernew1 = Math.floor(foodModifier1 * archer1) - 1
                        lcnew1 = Math.floor(foodModifier1 * lc1) - 1
                        manew1 = Math.floor(foodModifier1 * ma1) - 1
                        ramnew1 = Math.floor(foodModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(foodModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(foodModifier1 * hc1) - 1
                    }
                } else if (wood1 >= villageWood1 && (spearToRecruit1 >= minimal1 || hcToRecruit1 >= minimal1 || catapultToRecruit1 >= minimal1 || swordToRecruit1 >= minimal1 || axeToRecruit1 >= minimal1 || archerToRecruit1 >= minimal1 || lcToRecruit1 >= minimal1 || maToRecruit1 >= minimal1 || ramToRecruit1 >= minimal1) && clay1 >= villageClay1 && iron1 >= villageIron1 && food1 <= villageFood1) {
                    woodModifier1 = villageWood1 / wood1
                    ironModifier1 = villageIron1 / iron1
                    clayModifier1 = villageClay1 / clay1
                    if (clayModifier1 > ironModifier1 && woodModifier1 > ironModifier1) {
                        spearnew1 = Math.floor(ironModifier1 * spear1) - 1
                        swordnew1 = Math.floor(ironModifier1 * sword1) - 1
                        axenew1 = Math.floor(ironModifier1 * axe1) - 1
                        archernew1 = Math.floor(ironModifier1 * archer1) - 1
                        lcnew1 = Math.floor(ironModifier1 * lc1) - 1
                        manew1 = Math.floor(ironModifier1 * ma1) - 1
                        ramnew1 = Math.floor(ironModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(ironModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(ironModifier1 * hc1) - 1
                    } else if (ironModifier1 > clayModifier1 && woodModifier1 > clayModifier1) {
                        spearnew1 = Math.floor(clayModifier1 * spear1) - 1
                        swordnew1 = Math.floor(clayModifier1 * sword1) - 1
                        axenew1 = Math.floor(clayModifier1 * axe1) - 1
                        archernew1 = Math.floor(clayModifier1 * archer1) - 1
                        lcnew1 = Math.floor(clayModifier1 * lc1) - 1
                        manew1 = Math.floor(clayModifier1 * ma1) - 1
                        ramnew1 = Math.floor(clayModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(clayModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(clayModifier1 * hc1) - 1
                    } else if (ironModifier1 > woodModifier1 && clayModifier1 > woodModifier1) {
                        spearnew1 = Math.floor(woodModifier1 * spear1) - 1
                        swordnew1 = Math.floor(woodModifier1 * sword1) - 1
                        axenew1 = Math.floor(woodModifier1 * axe1) - 1
                        archernew1 = Math.floor(woodModifier1 * archer1) - 1
                        lcnew1 = Math.floor(woodModifier1 * lc1) - 1
                        manew1 = Math.floor(woodModifier1 * ma1) - 1
                        ramnew1 = Math.floor(woodModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(woodModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(woodModifier1 * hc1) - 1
                    } else {
                        console.log('Nie znam przyczyny :P')
                    }
                } else if (wood1 >= villageWood1 && (spearToRecruit1 >= minimal1 || hcToRecruit1 >= minimal1 || catapultToRecruit1 >= minimal1 || swordToRecruit1 >= minimal1 || axeToRecruit1 >= minimal1 || archerToRecruit1 >= minimal1 || lcToRecruit1 >= minimal1 || maToRecruit1 >= minimal1 || ramToRecruit1 >= minimal1) && clay1 >= villageClay1 && iron1 <= villageIron1 && food1 >= villageFood1) {
                    woodModifier1 = villageWood1 / wood1
                    foodModifier1 = villageFood1 / food1
                    clayModifier1 = villageClay1 / clay1
                    if (clayModifier1 > foodModifier1 && woodModifier1 > foodModifier1) {
                        spearnew1 = Math.floor(foodModifier1 * spear1) - 1
                        swordnew1 = Math.floor(foodModifier1 * sword1) - 1
                        axenew1 = Math.floor(foodModifier1 * axe1) - 1
                        archernew1 = Math.floor(foodModifier1 * archer1) - 1
                        lcnew1 = Math.floor(foodModifier1 * lc1) - 1
                        manew1 = Math.floor(foodModifier1 * ma1) - 1
                        ramnew1 = Math.floor(foodModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(foodModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(foodModifier1 * hc1) - 1
                    } else if (foodModifier1 > clayModifier1 && woodModifier1 > clayModifier1) {
                        spearnew1 = Math.floor(clayModifier1 * spear1) - 1
                        swordnew1 = Math.floor(clayModifier1 * sword1) - 1
                        axenew1 = Math.floor(clayModifier1 * axe1) - 1
                        archernew1 = Math.floor(clayModifier1 * archer1) - 1
                        lcnew1 = Math.floor(clayModifier1 * lc1) - 1
                        manew1 = Math.floor(clayModifier1 * ma1) - 1
                        ramnew1 = Math.floor(clayModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(clayModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(clayModifier1 * hc1) - 1
                    } else if (foodModifier1 > woodModifier1 && clayModifier1 > woodModifier1) {
                        spearnew1 = Math.floor(woodModifier1 * spear1) - 1
                        swordnew1 = Math.floor(woodModifier1 * sword1) - 1
                        axenew1 = Math.floor(woodModifier1 * axe1) - 1
                        archernew1 = Math.floor(woodModifier1 * archer1) - 1
                        lcnew1 = Math.floor(woodModifier1 * lc1) - 1
                        manew1 = Math.floor(woodModifier1 * ma1) - 1
                        ramnew1 = Math.floor(woodModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(woodModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(woodModifier1 * hc1) - 1
                    } else {
                        console.log('Nie znam przyczyny :P')
                    }
                } else if (wood1 >= villageWood1 && (spearToRecruit1 >= minimal1 || hcToRecruit1 >= minimal1 || catapultToRecruit1 >= minimal1 || swordToRecruit1 >= minimal1 || axeToRecruit1 >= minimal1 || archerToRecruit1 >= minimal1 || lcToRecruit1 >= minimal1 || maToRecruit1 >= minimal1 || ramToRecruit1 >= minimal1) && clay1 <= villageClay1 && iron1 >= villageIron1 && food1 >= villageFood1) {
                    woodModifier1 = villageWood1 / wood1
                    foodModifier1 = villageFood1 / food1
                    ironModifier1 = villageIron1 / iron1
                    if (foodModifier1 > ironModifier1 && woodModifier1 > ironModifier1) {
                        spearnew1 = Math.floor(ironModifier1 * spear1) - 1
                        swordnew1 = Math.floor(ironModifier1 * sword1) - 1
                        axenew1 = Math.floor(ironModifier1 * axe1) - 1
                        archernew1 = Math.floor(ironModifier1 * archer1) - 1
                        lcnew1 = Math.floor(ironModifier1 * lc1) - 1
                        manew1 = Math.floor(ironModifier1 * ma1) - 1
                        ramnew1 = Math.floor(ironModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(ironModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(ironModifier1 * hc1) - 1
                    } else if (ironModifier1 > foodModifier1 && woodModifier1 > foodModifier1) {
                        spearnew1 = Math.floor(foodModifier1 * spear1) - 1
                        swordnew1 = Math.floor(foodModifier1 * sword1) - 1
                        axenew1 = Math.floor(foodModifier1 * axe1) - 1
                        archernew1 = Math.floor(foodModifier1 * archer1) - 1
                        lcnew1 = Math.floor(foodModifier1 * lc1) - 1
                        manew1 = Math.floor(foodModifier1 * ma1) - 1
                        ramnew1 = Math.floor(foodModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(foodModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(foodModifier1 * hc1) - 1
                    } else if (ironModifier1 > woodModifier1 && foodModifier1 > woodModifier1) {
                        spearnew1 = Math.floor(woodModifier1 * spear1) - 1
                        swordnew1 = Math.floor(woodModifier1 * sword1) - 1
                        axenew1 = Math.floor(woodModifier1 * axe1) - 1
                        archernew1 = Math.floor(woodModifier1 * archer1) - 1
                        lcnew1 = Math.floor(woodModifier1 * lc1) - 1
                        manew1 = Math.floor(woodModifier1 * ma1) - 1
                        ramnew1 = Math.floor(woodModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(woodModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(woodModifier1 * hc1) - 1
                    } else {
                        console.log('Nie znam przyczyny :P')
                    }
                } else if (wood1 <= villageWood1 && (spearToRecruit1 >= minimal1 || hcToRecruit1 >= minimal1 || catapultToRecruit1 >= minimal1 || swordToRecruit1 >= minimal1 || axeToRecruit1 >= minimal1 || archerToRecruit1 >= minimal1 || lcToRecruit1 >= minimal1 || maToRecruit1 >= minimal1 || ramToRecruit1 >= minimal1) && clay1 >= villageClay1 && iron1 >= villageIron1 && food1 >= villageFood1) {
                    foodModifier1 = villageFood1 / food1
                    ironModifier1 = villageIron1 / iron1
                    clayModifier1 = villageClay1 / clay1
                    if (clayModifier1 > ironModifier1 && foodModifier1 > ironModifier1) {
                        spearnew1 = Math.floor(ironModifier1 * spear1) - 1
                        swordnew1 = Math.floor(ironModifier1 * sword1) - 1
                        axenew1 = Math.floor(ironModifier1 * axe1) - 1
                        archernew1 = Math.floor(ironModifier1 * archer1) - 1
                        lcnew1 = Math.floor(ironModifier1 * lc1) - 1
                        manew1 = Math.floor(ironModifier1 * ma1) - 1
                        ramnew1 = Math.floor(ironModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(ironModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(ironModifier1 * hc1) - 1
                    } else if (ironModifier1 > clayModifier1 && foodModifier1 > clayModifier1) {
                        spearnew1 = Math.floor(clayModifier1 * spear1) - 1
                        swordnew1 = Math.floor(clayModifier1 * sword1) - 1
                        axenew1 = Math.floor(clayModifier1 * axe1) - 1
                        archernew1 = Math.floor(clayModifier1 * archer1) - 1
                        lcnew1 = Math.floor(clayModifier1 * lc1) - 1
                        manew1 = Math.floor(clayModifier1 * ma1) - 1
                        ramnew1 = Math.floor(clayModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(clayModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(clayModifier1 * hc1) - 1
                    } else if (ironModifier1 > foodModifier1 && clayModifier1 > foodModifier1) {
                        spearnew1 = Math.floor(foodModifier1 * spear1) - 1
                        swordnew1 = Math.floor(foodModifier1 * sword1) - 1
                        axenew1 = Math.floor(foodModifier1 * axe1) - 1
                        archernew1 = Math.floor(foodModifier1 * archer1) - 1
                        lcnew1 = Math.floor(foodModifier1 * lc1) - 1
                        manew1 = Math.floor(foodModifier1 * ma1) - 1
                        ramnew1 = Math.floor(foodModifier1 * ram1) - 1
                        catapultnew1 = Math.floor(foodModifier1 * catapult1) - 1
                        hcnew1 = Math.floor(foodModifier1 * hc1) - 1
                    } else {
                        console.log('Nie znam przyczyny :P')
                    }
                }
                setInterval(function() {
                    if (running == false) {
                        return
                    }
                }, 5000)
                setTimeout(function() {
                    recruitSpear1()
                }, unitInterval)
                setTimeout(function() {
                    if (Barracks1 >= 3) {
                        recruitSword1()
                    }
                }, unitInterval * 2)
                setTimeout(function() {
                    if (Barracks1 >= 5) {
                        recruitAxe1()
                    }
                }, unitInterval * 3)
                setTimeout(function() {
                    if (Barracks1 >= 9) {
                        recruitArcher1()
                    }
                }, unitInterval * 4)
                setTimeout(function() {
                    if (Barracks1 >= 11) {
                        recruitLc1()
                    }
                }, unitInterval * 5)
                setTimeout(function() {
                    if (Barracks1 >= 13) {
                        recruitMa1()
                    }
                }, unitInterval * 6)
                setTimeout(function() {
                    if (Barracks1 >= 15) {
                        recruitRam1()
                    }
                }, unitInterval * 7)
                setTimeout(function() {
                    if (Barracks1 >= 17) {
                        recruitCatapult1()
                    }
                }, unitInterval * 8)
                setTimeout(function() {
                    if (Barracks1 >= 21) {
                        recruitHc1()
                    }
                }, unitInterval * 9)
            } else {
                console.log('Brak jednostek do rekrutacji')
            }

            function recruitSpear1() {
                if (spearnew1 >= minimal1) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'spear',
                        amount: spearnew1
                    })
                    unit = 'spear'
                    logData = [
                        unit,
                        spearnew1
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, spearnew1)
                } else {
                    console.log('Niezrekrutowano pikinierów - mniej niż wskazane minimum')
                }
            }

            function recruitSword1() {
                if (swordnew1 >= minimal1) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'sword',
                        amount: swordnew1
                    })
                    unit = 'sword'
                    logData = [
                        unit,
                        swordnew1
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, swordnew1)
                } else {
                    console.log('Niezrekrutowano mieczników - mniej niż wskazane minimum')
                }
            }

            function recruitAxe1() {
                if (axenew1 >= minimal1) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'axe',
                        amount: axenew1
                    })
                    unit = 'axe'
                    logData = [
                        unit,
                        axenew1
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, axenew1)
                } else {
                    console.log('Niezrekrutowano toporników - mniej niż wskazane minimum')
                }
            }

            function recruitArcher1() {
                if (archernew1 >= minimal1) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'archer',
                        amount: archernew1
                    })
                    unit = 'archer'
                    logData = [
                        unit,
                        archernew1
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, archernew1)
                } else {
                    console.log('Niezrekrutowano łuczników - mniej niż wskazane minimum')
                }
            }

            function recruitLc1() {
                if (lcnew1 >= minimal1) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'light_cavalry',
                        amount: lcnew1
                    })
                    unit = 'light_cavalry'
                    logData = [
                        unit,
                        lcnew1
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, lcnew1)
                } else {
                    console.log('Niezrekrutowano lk - mniej niż wskazane minimum')
                }
            }

            function recruitMa1() {
                if (manew1 >= minimal1) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'mounted_archer',
                        amount: manew1
                    })
                    unit = 'mounted_archer'
                    logData = [
                        unit,
                        manew1
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, manew1)
                } else {
                    console.log('Niezrekrutowano łk - mniej niż wskazane minimum')
                }
            }

            function recruitRam1() {
                if (ramnew1 >= minimal1) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'ram',
                        amount: ramnew1
                    })
                    unit = 'ram'
                    logData = [
                        unit,
                        ramnew1
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, ramnew1)
                } else {
                    console.log('Niezrekrutowano taranów - mniej niż wskazane minimum')
                }
            }

            function recruitCatapult1() {
                if (catapultnew1 >= minimal1) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'catapult',
                        amount: catapultnew1
                    })
                    unit = 'catapult'
                    logData = [
                        unit,
                        catapultnew1
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, catapultnew1)
                } else {
                    console.log('Niezrekrutowano katapult - mniej niż wskazane minimum')
                }
            }

            function recruitHc1() {
                if (hcnew1 >= minimal1) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'heavy_cavalry',
                        amount: hcnew1
                    })
                    unit = 'heavy_cavalry'
                    logData = [
                        unit,
                        hcnew1
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, hcnew1)
                } else {
                    console.log('Niezrekrutowano ck - mniej niż wskazane minimum')
                }
            }
        }

        function modifier2Get() {
            if (selectedGroup2 > 0) {
                if (queue2.length >= 2) {
                    modifier2 = 1.0
                } else if (queue2.length == 1) {
                    modifier2 = 0.5
                } else {
                    modifier2 = 0.25
                }
            } else {
                modifier2 = 0.0
            }
            time2GetB()
        }

        function time2GetB() {
            if (barracksRecrutingTime2.length > 0) {
                barracks2TotalJobsLength = barracksRecrutingTime2.reduce(function(a, b) {
                    return a + b
                })
            } else {
                barracks2TotalJobsLength = 0
            }
            timeModifier2Get()
        }

        function timeModifier2Get() {
            if (selectedGroup2 > 0) {
                if (barracks2TotalJobsLength >= 93600000) {
                    timeModifier2 = 0.00
                } else if (barracks2TotalJobsLength < 93600000 && barracks2TotalJobsLength >= 86400000) {
                    timeModifier2 = 0.10
                } else if (barracks2TotalJobsLength < 86400000 && barracks2TotalJobsLength >= 72000000) {
                    timeModifier2 = 0.25
                } else if (barracks2TotalJobsLength < 72000000 && barracks2TotalJobsLength >= 57600000) {
                    timeModifier2 = 0.40
                } else if (barracks2TotalJobsLength < 57600000 && barracks2TotalJobsLength >= 43200000) {
                    timeModifier2 = 0.55
                } else if (barracks2TotalJobsLength < 43200000 && barracks2TotalJobsLength >= 28800000) {
                    timeModifier2 = 0.70
                } else if (barracks2TotalJobsLength < 28800000 && barracks2TotalJobsLength >= 14400000) {
                    timeModifier2 = 0.85
                } else if (barracks2TotalJobsLength < 14400000 && barracks2TotalJobsLength >= 7200000) {
                    timeModifier2 = 0.925
                } else if (barracks2TotalJobsLength < 7200000 && barracks2TotalJobsLength >= 3600000) {
                    timeModifier2 = 0.9625
                } else {
                    timeModifier2 = 1.00
                }
            } else {
                timeModifier2 = 0.00
            }
            recruit2()
        }

        function recruit2() {
            var spearToRecruit2 = finalSpear2 - spearAmount
            var swordToRecruit2 = finalSword2 - swordAmount
            var axeToRecruit2 = finalAxe2 - axeAmount
            var archerToRecruit2 = finalArcher2 - archerAmount
            var lcToRecruit2 = finalLC2 - light_cavalryAmount
            var maToRecruit2 = finalMA2 - mounted_archerAmount
            var ramToRecruit2 = finalRam2 - ramAmount
            var catapultToRecruit2 = finalCatapult2 - catapultAmount
            var hcToRecruit2 = finalHC2 - heavy_cavalryAmount
            var spear2 = Math.floor(Spear2 * timeModifier2 * modifier2)
            var sword2 = Math.floor(Sword2 * timeModifier2 * modifier2)
            var axe2 = Math.floor(Axe2 * timeModifier2 * modifier2)
            var archer2 = Math.floor(Archer2 * timeModifier2 * modifier2)
            var lc2 = Math.floor(LC2 * timeModifier2 * modifier2)
            var ma2 = Math.floor(MA2 * timeModifier2 * modifier2)
            var ram2 = Math.floor(Ram2 * timeModifier2 * modifier2)
            var catapult2 = Math.floor(Catapult2 * timeModifier2 * modifier2)
            var hc2 = Math.floor(HC2 * timeModifier2 * modifier2)
            var wood2 = spear2 * wood[0] + sword2 * wood[1] + axe2 * wood[2] + archer2 * wood[3] + lc2 * wood[4] + ma2 * wood[5] + ram2 * wood[7] + catapult2 * wood[8] + hc2 * wood[6]
            var clay2 = spear2 * clay[0] + sword2 * clay[1] + axe2 * clay[2] + archer2 * clay[3] + lc2 * clay[4] + ma2 * clay[5] + ram2 * clay[7] + catapult2 * clay[8] + hc2 * clay[6]
            var iron2 = spear2 * iron[0] + sword2 * iron[1] + axe2 * iron[2] + archer2 * iron[3] + lc2 * iron[4] + ma2 * iron[5] + ram2 * iron[7] + catapult2 * iron[8] + hc2 * iron[6]
            var food2 = spear2 * food[0] + sword2 * food[1] + axe2 * food[2] + archer2 * food[3] + lc2 * food[4] + ma2 * food[5] + ram2 * food[7] + catapult2 * food[8] + hc2 * food[6]
            console.log(wood2, clay2, iron2, food2)
            if (spearToRecruit2 > 0 || hcToRecruit2 > 0 || catapultToRecruit2 > 0 || swordToRecruit2 > 0 || axeToRecruit2 > 0 || archerToRecruit2 > 0 || lcToRecruit2 > 0 || maToRecruit2 > 0 || ramToRecruit2 > 0) {
                if (wood2 <= villageWood2 && (spearToRecruit2 >= minimal2 || hcToRecruit2 >= minimal2 || catapultToRecruit2 >= minimal2 || swordToRecruit2 >= minimal2 || axeToRecruit2 >= minimal2 || archerToRecruit2 >= minimal2 || lcToRecruit2 >= minimal2 || maToRecruit2 >= minimal2 || ramToRecruit2 >= minimal2) && clay2 <= villageClay2 && iron2 <= villageIron2 && food2 <= villageFood2) {
                    spearnew2 = spear2
                    swordnew2 = sword2
                    axenew2 = axe2
                    archernew2 = archer2
                    lcnew2 = lc2
                    manew2 = ma2
                    ramnew2 = ram2
                    catapultnew2 = catapult2
                    hcnew2 = hc2
                } else if (wood2 >= villageWood2 && (spearToRecruit2 >= minimal2 || hcToRecruit2 >= minimal2 || catapultToRecruit2 >= minimal2 || swordToRecruit2 >= minimal2 || axeToRecruit2 >= minimal2 || archerToRecruit2 >= minimal2 || lcToRecruit2 >= minimal2 || maToRecruit2 >= minimal2 || ramToRecruit2 >= minimal2) && clay2 <= villageClay2 && iron2 <= villageIron2 && food2 <= villageFood2) {
                    generalModifier2 = villageWood2 / wood2
                    spearnew2 = Math.floor(generalModifier2 * spear2) - 1
                    swordnew2 = Math.floor(generalModifier2 * sword2) - 1
                    axenew2 = Math.floor(generalModifier2 * axe2) - 1
                    archernew2 = Math.floor(generalModifier2 * archer2) - 1
                    lcnew2 = Math.floor(generalModifier2 * lc2) - 1
                    manew2 = Math.floor(generalModifier2 * ma2) - 1
                    ramnew2 = Math.floor(generalModifier2 * ram2) - 1
                    catapultnew2 = Math.floor(generalModifier2 * catapult2) - 1
                    hcnew2 = Math.floor(generalModifier2 * hc2) - 1
                } else if (wood2 <= villageWood2 && (spearToRecruit2 >= minimal2 || hcToRecruit2 >= minimal2 || catapultToRecruit2 >= minimal2 || swordToRecruit2 >= minimal2 || axeToRecruit2 >= minimal2 || archerToRecruit2 >= minimal2 || lcToRecruit2 >= minimal2 || maToRecruit2 >= minimal2 || ramToRecruit2 >= minimal2) && clay2 >= villageClay2 && iron2 <= villageIron2 && food2 <= villageFood2) {
                    generalModifier2 = villageClay2 / clay2
                    spearnew2 = Math.floor(generalModifier2 * spear2) - 1
                    swordnew2 = Math.floor(generalModifier2 * sword2) - 1
                    axenew2 = Math.floor(generalModifier2 * axe2) - 1
                    archernew2 = Math.floor(generalModifier2 * archer2) - 1
                    lcnew2 = Math.floor(generalModifier2 * lc2) - 1
                    manew2 = Math.floor(generalModifier2 * ma2) - 1
                    ramnew2 = Math.floor(generalModifier2 * ram2) - 1
                    catapultnew2 = Math.floor(generalModifier2 * catapult2) - 1
                    hcnew2 = Math.floor(generalModifier2 * hc2) - 1
                } else if (wood2 <= villageWood2 && (spearToRecruit2 >= minimal2 || hcToRecruit2 >= minimal2 || catapultToRecruit2 >= minimal2 || swordToRecruit2 >= minimal2 || axeToRecruit2 >= minimal2 || archerToRecruit2 >= minimal2 || lcToRecruit2 >= minimal2 || maToRecruit2 >= minimal2 || ramToRecruit2 >= minimal2) && clay2 <= villageClay2 && iron2 >= villageIron2 && food2 <= villageFood2) {
                    generalModifier2 = villageIron2 / iron2
                    spearnew2 = Math.floor(generalModifier2 * spear2) - 1
                    swordnew2 = Math.floor(generalModifier2 * sword2) - 1
                    axenew2 = Math.floor(generalModifier2 * axe2) - 1
                    archernew2 = Math.floor(generalModifier2 * archer2) - 1
                    lcnew2 = Math.floor(generalModifier2 * lc2) - 1
                    manew2 = Math.floor(generalModifier2 * ma2) - 1
                    ramnew2 = Math.floor(generalModifier2 * ram2) - 1
                    catapultnew2 = Math.floor(generalModifier2 * catapult2) - 1
                    hcnew2 = Math.floor(generalModifier2 * hc2) - 1
                } else if (wood2 <= villageWood2 && (spearToRecruit2 >= minimal2 || hcToRecruit2 >= minimal2 || catapultToRecruit2 >= minimal2 || swordToRecruit2 >= minimal2 || axeToRecruit2 >= minimal2 || archerToRecruit2 >= minimal2 || lcToRecruit2 >= minimal2 || maToRecruit2 >= minimal2 || ramToRecruit2 >= minimal2) && clay2 <= villageClay2 && iron2 <= villageIron2 && food2 >= villageFood2) {
                    generalModifier2 = villageFood2 / food2
                    spearnew2 = Math.floor(generalModifier2 * spear2) - 1
                    swordnew2 = Math.floor(generalModifier2 * sword2) - 1
                    axenew2 = Math.floor(generalModifier2 * axe2) - 1
                    archernew2 = Math.floor(generalModifier2 * archer2) - 1
                    lcnew2 = Math.floor(generalModifier2 * lc2) - 1
                    manew2 = Math.floor(generalModifier2 * ma2) - 1
                    ramnew2 = Math.floor(generalModifier2 * ram2) - 1
                    catapultnew2 = Math.floor(generalModifier2 * catapult2) - 1
                    hcnew2 = Math.floor(generalModifier2 * hc2) - 1
                } else if (wood2 >= villageWood2 && (spearToRecruit2 >= minimal2 || hcToRecruit2 >= minimal2 || catapultToRecruit2 >= minimal2 || swordToRecruit2 >= minimal2 || axeToRecruit2 >= minimal2 || archerToRecruit2 >= minimal2 || lcToRecruit2 >= minimal2 || maToRecruit2 >= minimal2 || ramToRecruit2 >= minimal2) && clay2 >= villageClay2 && iron2 <= villageIron2 && food2 <= villageFood2) {
                    woodModifier2 = villageWood2 / wood2
                    clayModifier2 = villageClay2 / clay2
                    if (clayModifier2 > woodModifier2) {
                        spearnew2 = Math.floor(woodModifier2 * spear2) - 1
                        swordnew2 = Math.floor(woodModifier2 * sword2) - 1
                        axenew2 = Math.floor(woodModifier2 * axe2) - 1
                        archernew2 = Math.floor(woodModifier2 * archer2) - 1
                        lcnew2 = Math.floor(woodModifier2 * lc2) - 1
                        manew2 = Math.floor(woodModifier2 * ma2) - 1
                        ramnew2 = Math.floor(woodModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(woodModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(woodModifier2 * hc2) - 1
                    } else {
                        spearnew2 = Math.floor(clayModifier2 * spear2) - 1
                        swordnew2 = Math.floor(clayModifier2 * sword2) - 1
                        axenew2 = Math.floor(clayModifier2 * axe2) - 1
                        archernew2 = Math.floor(clayModifier2 * archer2) - 1
                        lcnew2 = Math.floor(clayModifier2 * lc2) - 1
                        manew2 = Math.floor(clayModifier2 * ma2) - 1
                        ramnew2 = Math.floor(clayModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(clayModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(clayModifier2 * hc2) - 1
                    }
                } else if (wood2 <= villageWood2 && (spearToRecruit2 >= minimal2 || hcToRecruit2 >= minimal2 || catapultToRecruit2 >= minimal2 || swordToRecruit2 >= minimal2 || axeToRecruit2 >= minimal2 || archerToRecruit2 >= minimal2 || lcToRecruit2 >= minimal2 || maToRecruit2 >= minimal2 || ramToRecruit2 >= minimal2) && clay2 >= villageClay2 && iron2 >= villageIron2 && food2 <= villageFood2) {
                    ironModifier2 = villageIron2 / iron2
                    clayModifier2 = villageClay2 / clay2
                    if (clayModifier2 > ironModifier2) {
                        spearnew2 = Math.floor(ironModifier2 * spear2) - 1
                        swordnew2 = Math.floor(ironModifier2 * sword2) - 1
                        axenew2 = Math.floor(ironModifier2 * axe2) - 1
                        archernew2 = Math.floor(ironModifier2 * archer2) - 1
                        lcnew2 = Math.floor(ironModifier2 * lc2) - 1
                        manew2 = Math.floor(ironModifier2 * ma2) - 1
                        ramnew2 = Math.floor(ironModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(ironModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(ironModifier2 * hc2) - 1
                    } else {
                        spearnew2 = Math.floor(clayModifier2 * spear2) - 1
                        swordnew2 = Math.floor(clayModifier2 * sword2) - 1
                        axenew2 = Math.floor(clayModifier2 * axe2) - 1
                        archernew2 = Math.floor(clayModifier2 * archer2) - 1
                        lcnew2 = Math.floor(clayModifier2 * lc2) - 1
                        manew2 = Math.floor(clayModifier2 * ma2) - 1
                        ramnew2 = Math.floor(clayModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(clayModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(clayModifier2 * hc2) - 1
                    }
                } else if (wood2 <= villageWood2 && (spearToRecruit2 >= minimal2 || hcToRecruit2 >= minimal2 || catapultToRecruit2 >= minimal2 || swordToRecruit2 >= minimal2 || axeToRecruit2 >= minimal2 || archerToRecruit2 >= minimal2 || lcToRecruit2 >= minimal2 || maToRecruit2 >= minimal2 || ramToRecruit2 >= minimal2) && clay2 >= villageClay2 && iron2 <= villageIron2 && food2 >= villageFood2) {
                    foodModifier2 = villageFood2 / food2
                    clayModifier2 = villageClay2 / clay2
                    if (clayModifier2 > foodModifier2) {
                        spearnew2 = Math.floor(foodModifier2 * spear2) - 1
                        swordnew2 = Math.floor(foodModifier2 * sword2) - 1
                        axenew2 = Math.floor(foodModifier2 * axe2) - 1
                        archernew2 = Math.floor(foodModifier2 * archer2) - 1
                        lcnew2 = Math.floor(foodModifier2 * lc2) - 1
                        manew2 = Math.floor(foodModifier2 * ma2) - 1
                        ramnew2 = Math.floor(foodModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(foodModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(foodModifier2 * hc2) - 1
                    } else {
                        spearnew2 = Math.floor(clayModifier2 * spear2) - 1
                        swordnew2 = Math.floor(clayModifier2 * sword2) - 1
                        axenew2 = Math.floor(clayModifier2 * axe2) - 1
                        archernew2 = Math.floor(clayModifier2 * archer2) - 1
                        lcnew2 = Math.floor(clayModifier2 * lc2) - 1
                        manew2 = Math.floor(clayModifier2 * ma2) - 1
                        ramnew2 = Math.floor(clayModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(clayModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(clayModifier2 * hc2) - 1
                    }
                } else if (wood2 >= villageWood2 && (spearToRecruit2 >= minimal2 || hcToRecruit2 >= minimal2 || catapultToRecruit2 >= minimal2 || swordToRecruit2 >= minimal2 || axeToRecruit2 >= minimal2 || archerToRecruit2 >= minimal2 || lcToRecruit2 >= minimal2 || maToRecruit2 >= minimal2 || ramToRecruit2 >= minimal2) && clay2 <= villageClay2 && iron2 >= villageIron2 && food2 <= villageFood2) {
                    woodModifier2 = villageWood2 / wood2
                    ironModifier2 = villageIron2 / iron2
                    if (ironModifier2 > woodModifier2) {
                        spearnew2 = Math.floor(woodModifier2 * spear2) - 1
                        swordnew2 = Math.floor(woodModifier2 * sword2) - 1
                        axenew2 = Math.floor(woodModifier2 * axe2) - 1
                        archernew2 = Math.floor(woodModifier2 * archer2) - 1
                        lcnew2 = Math.floor(woodModifier2 * lc2) - 1
                        manew2 = Math.floor(woodModifier2 * ma2) - 1
                        ramnew2 = Math.floor(woodModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(woodModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(woodModifier2 * hc2) - 1
                    } else {
                        spearnew2 = Math.floor(ironModifier2 * spear2) - 1
                        swordnew2 = Math.floor(ironModifier2 * sword2) - 1
                        axenew2 = Math.floor(ironModifier2 * axe2) - 1
                        archernew2 = Math.floor(ironModifier2 * archer2) - 1
                        lcnew2 = Math.floor(ironModifier2 * lc2) - 1
                        manew2 = Math.floor(ironModifier2 * ma2) - 1
                        ramnew2 = Math.floor(ironModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(ironModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(ironModifier2 * hc2) - 1
                    }
                } else if (wood2 <= villageWood2 && (spearToRecruit2 >= minimal2 || hcToRecruit2 >= minimal2 || catapultToRecruit2 >= minimal2 || swordToRecruit2 >= minimal2 || axeToRecruit2 >= minimal2 || archerToRecruit2 >= minimal2 || lcToRecruit2 >= minimal2 || maToRecruit2 >= minimal2 || ramToRecruit2 >= minimal2) && clay2 <= villageClay2 && iron2 >= villageIron2 && food2 >= villageFood2) {
                    foodModifier2 = villageFood2 / food2
                    ironModifier2 = villageIron2 / iron2
                    if (ironModifier2 > foodModifier2) {
                        spearnew2 = Math.floor(foodModifier2 * spear2) - 1
                        swordnew2 = Math.floor(foodModifier2 * sword2) - 1
                        axenew2 = Math.floor(foodModifier2 * axe2) - 1
                        archernew2 = Math.floor(foodModifier2 * archer2) - 1
                        lcnew2 = Math.floor(foodModifier2 * lc2) - 1
                        manew2 = Math.floor(foodModifier2 * ma2) - 1
                        ramnew2 = Math.floor(foodModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(foodModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(foodModifier2 * hc2) - 1
                    } else {
                        spearnew2 = Math.floor(ironModifier2 * spear2) - 1
                        swordnew2 = Math.floor(ironModifier2 * sword2) - 1
                        axenew2 = Math.floor(ironModifier2 * axe2) - 1
                        archernew2 = Math.floor(ironModifier2 * archer2) - 1
                        lcnew2 = Math.floor(ironModifier2 * lc2) - 1
                        manew2 = Math.floor(ironModifier2 * ma2) - 1
                        ramnew2 = Math.floor(ironModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(ironModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(ironModifier2 * hc2) - 1
                    }
                } else if (wood2 >= villageWood2 && (spearToRecruit2 >= minimal2 || hcToRecruit2 >= minimal2 || catapultToRecruit2 >= minimal2 || swordToRecruit2 >= minimal2 || axeToRecruit2 >= minimal2 || archerToRecruit2 >= minimal2 || lcToRecruit2 >= minimal2 || maToRecruit2 >= minimal2 || ramToRecruit2 >= minimal2) && clay2 <= villageClay2 && iron2 <= villageIron2 && food2 >= villageFood2) {
                    woodModifier2 = villageWood2 / wood2
                    foodModifier2 = villageFood2 / food2
                    if (foodModifier2 > woodModifier2) {
                        spearnew2 = Math.floor(woodModifier2 * spear2) - 1
                        swordnew2 = Math.floor(woodModifier2 * sword2) - 1
                        axenew2 = Math.floor(woodModifier2 * axe2) - 1
                        archernew2 = Math.floor(woodModifier2 * archer2) - 1
                        lcnew2 = Math.floor(woodModifier2 * lc2) - 1
                        manew2 = Math.floor(woodModifier2 * ma2) - 1
                        ramnew2 = Math.floor(woodModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(woodModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(woodModifier2 * hc2) - 1
                    } else {
                        spearnew2 = Math.floor(foodModifier2 * spear2) - 1
                        swordnew2 = Math.floor(foodModifier2 * sword2) - 1
                        axenew2 = Math.floor(foodModifier2 * axe2) - 1
                        archernew2 = Math.floor(foodModifier2 * archer2) - 1
                        lcnew2 = Math.floor(foodModifier2 * lc2) - 1
                        manew2 = Math.floor(foodModifier2 * ma2) - 1
                        ramnew2 = Math.floor(foodModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(foodModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(foodModifier2 * hc2) - 1
                    }
                } else if (wood2 >= villageWood2 && (spearToRecruit2 >= minimal2 || hcToRecruit2 >= minimal2 || catapultToRecruit2 >= minimal2 || swordToRecruit2 >= minimal2 || axeToRecruit2 >= minimal2 || archerToRecruit2 >= minimal2 || lcToRecruit2 >= minimal2 || maToRecruit2 >= minimal2 || ramToRecruit2 >= minimal2) && clay2 >= villageClay2 && iron2 >= villageIron2 && food2 <= villageFood2) {
                    woodModifier2 = villageWood2 / wood2
                    ironModifier2 = villageIron2 / iron2
                    clayModifier2 = villageClay2 / clay2
                    if (clayModifier2 > ironModifier2 && woodModifier2 > ironModifier2) {
                        spearnew2 = Math.floor(ironModifier2 * spear2) - 1
                        swordnew2 = Math.floor(ironModifier2 * sword2) - 1
                        axenew2 = Math.floor(ironModifier2 * axe2) - 1
                        archernew2 = Math.floor(ironModifier2 * archer2) - 1
                        lcnew2 = Math.floor(ironModifier2 * lc2) - 1
                        manew2 = Math.floor(ironModifier2 * ma2) - 1
                        ramnew2 = Math.floor(ironModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(ironModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(ironModifier2 * hc2) - 1
                    } else if (ironModifier2 > clayModifier2 && woodModifier2 > clayModifier2) {
                        spearnew2 = Math.floor(clayModifier2 * spear2) - 1
                        swordnew2 = Math.floor(clayModifier2 * sword2) - 1
                        axenew2 = Math.floor(clayModifier2 * axe2) - 1
                        archernew2 = Math.floor(clayModifier2 * archer2) - 1
                        lcnew2 = Math.floor(clayModifier2 * lc2) - 1
                        manew2 = Math.floor(clayModifier2 * ma2) - 1
                        ramnew2 = Math.floor(clayModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(clayModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(clayModifier2 * hc2) - 1
                    } else if (ironModifier2 > woodModifier2 && clayModifier2 > woodModifier2) {
                        spearnew2 = Math.floor(woodModifier2 * spear2) - 1
                        swordnew2 = Math.floor(woodModifier2 * sword2) - 1
                        axenew2 = Math.floor(woodModifier2 * axe2) - 1
                        archernew2 = Math.floor(woodModifier2 * archer2) - 1
                        lcnew2 = Math.floor(woodModifier2 * lc2) - 1
                        manew2 = Math.floor(woodModifier2 * ma2) - 1
                        ramnew2 = Math.floor(woodModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(woodModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(woodModifier2 * hc2) - 1
                    } else {
                        console.log('Nie znam przyczyny :P')
                    }
                } else if (wood2 >= villageWood2 && (spearToRecruit2 >= minimal2 || hcToRecruit2 >= minimal2 || catapultToRecruit2 >= minimal2 || swordToRecruit2 >= minimal2 || axeToRecruit2 >= minimal2 || archerToRecruit2 >= minimal2 || lcToRecruit2 >= minimal2 || maToRecruit2 >= minimal2 || ramToRecruit2 >= minimal2) && clay2 >= villageClay2 && iron2 <= villageIron2 && food2 >= villageFood2) {
                    woodModifier2 = villageWood2 / wood2
                    foodModifier2 = villageFood2 / food2
                    clayModifier2 = villageClay2 / clay2
                    if (clayModifier2 > foodModifier2 && woodModifier2 > foodModifier2) {
                        spearnew2 = Math.floor(foodModifier2 * spear2) - 1
                        swordnew2 = Math.floor(foodModifier2 * sword2) - 1
                        axenew2 = Math.floor(foodModifier2 * axe2) - 1
                        archernew2 = Math.floor(foodModifier2 * archer2) - 1
                        lcnew2 = Math.floor(foodModifier2 * lc2) - 1
                        manew2 = Math.floor(foodModifier2 * ma2) - 1
                        ramnew2 = Math.floor(foodModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(foodModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(foodModifier2 * hc2) - 1
                    } else if (foodModifier2 > clayModifier2 && woodModifier2 > clayModifier2) {
                        spearnew2 = Math.floor(clayModifier2 * spear2) - 1
                        swordnew2 = Math.floor(clayModifier2 * sword2) - 1
                        axenew2 = Math.floor(clayModifier2 * axe2) - 1
                        archernew2 = Math.floor(clayModifier2 * archer2) - 1
                        lcnew2 = Math.floor(clayModifier2 * lc2) - 1
                        manew2 = Math.floor(clayModifier2 * ma2) - 1
                        ramnew2 = Math.floor(clayModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(clayModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(clayModifier2 * hc2) - 1
                    } else if (foodModifier2 > woodModifier2 && clayModifier2 > woodModifier2) {
                        spearnew2 = Math.floor(woodModifier2 * spear2) - 1
                        swordnew2 = Math.floor(woodModifier2 * sword2) - 1
                        axenew2 = Math.floor(woodModifier2 * axe2) - 1
                        archernew2 = Math.floor(woodModifier2 * archer2) - 1
                        lcnew2 = Math.floor(woodModifier2 * lc2) - 1
                        manew2 = Math.floor(woodModifier2 * ma2) - 1
                        ramnew2 = Math.floor(woodModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(woodModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(woodModifier2 * hc2) - 1
                    } else {
                        console.log('Nie znam przyczyny :P')
                    }
                } else if (wood2 >= villageWood2 && (spearToRecruit2 >= minimal2 || hcToRecruit2 >= minimal2 || catapultToRecruit2 >= minimal2 || swordToRecruit2 >= minimal2 || axeToRecruit2 >= minimal2 || archerToRecruit2 >= minimal2 || lcToRecruit2 >= minimal2 || maToRecruit2 >= minimal2 || ramToRecruit2 >= minimal2) && clay2 <= villageClay2 && iron2 >= villageIron2 && food2 >= villageFood2) {
                    woodModifier2 = villageWood2 / wood2
                    foodModifier2 = villageFood2 / food2
                    ironModifier2 = villageIron2 / iron2
                    if (foodModifier2 > ironModifier2 && woodModifier2 > ironModifier2) {
                        spearnew2 = Math.floor(ironModifier2 * spear2) - 1
                        swordnew2 = Math.floor(ironModifier2 * sword2) - 1
                        axenew2 = Math.floor(ironModifier2 * axe2) - 1
                        archernew2 = Math.floor(ironModifier2 * archer2) - 1
                        lcnew2 = Math.floor(ironModifier2 * lc2) - 1
                        manew2 = Math.floor(ironModifier2 * ma2) - 1
                        ramnew2 = Math.floor(ironModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(ironModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(ironModifier2 * hc2) - 1
                    } else if (ironModifier2 > foodModifier2 && woodModifier2 > foodModifier2) {
                        spearnew2 = Math.floor(foodModifier2 * spear2) - 1
                        swordnew2 = Math.floor(foodModifier2 * sword2) - 1
                        axenew2 = Math.floor(foodModifier2 * axe2) - 1
                        archernew2 = Math.floor(foodModifier2 * archer2) - 1
                        lcnew2 = Math.floor(foodModifier2 * lc2) - 1
                        manew2 = Math.floor(foodModifier2 * ma2) - 1
                        ramnew2 = Math.floor(foodModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(foodModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(foodModifier2 * hc2) - 1
                    } else if (ironModifier2 > woodModifier2 && foodModifier2 > woodModifier2) {
                        spearnew2 = Math.floor(woodModifier2 * spear2) - 1
                        swordnew2 = Math.floor(woodModifier2 * sword2) - 1
                        axenew2 = Math.floor(woodModifier2 * axe2) - 1
                        archernew2 = Math.floor(woodModifier2 * archer2) - 1
                        lcnew2 = Math.floor(woodModifier2 * lc2) - 1
                        manew2 = Math.floor(woodModifier2 * ma2) - 1
                        ramnew2 = Math.floor(woodModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(woodModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(woodModifier2 * hc2) - 1
                    } else {
                        console.log('Nie znam przyczyny :P')
                    }
                } else if (wood2 <= villageWood2 && (spearToRecruit2 >= minimal2 || hcToRecruit2 >= minimal2 || catapultToRecruit2 >= minimal2 || swordToRecruit2 >= minimal2 || axeToRecruit2 >= minimal2 || archerToRecruit2 >= minimal2 || lcToRecruit2 >= minimal2 || maToRecruit2 >= minimal2 || ramToRecruit2 >= minimal2) && clay2 >= villageClay2 && iron2 >= villageIron2 && food2 >= villageFood2) {
                    foodModifier2 = villageFood2 / food2
                    ironModifier2 = villageIron2 / iron2
                    clayModifier2 = villageClay2 / clay2
                    if (clayModifier2 > ironModifier2 && foodModifier2 > ironModifier2) {
                        spearnew2 = Math.floor(ironModifier2 * spear2) - 1
                        swordnew2 = Math.floor(ironModifier2 * sword2) - 1
                        axenew2 = Math.floor(ironModifier2 * axe2) - 1
                        archernew2 = Math.floor(ironModifier2 * archer2) - 1
                        lcnew2 = Math.floor(ironModifier2 * lc2) - 1
                        manew2 = Math.floor(ironModifier2 * ma2) - 1
                        ramnew2 = Math.floor(ironModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(ironModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(ironModifier2 * hc2) - 1
                    } else if (ironModifier2 > clayModifier2 && foodModifier2 > clayModifier2) {
                        spearnew2 = Math.floor(clayModifier2 * spear2) - 1
                        swordnew2 = Math.floor(clayModifier2 * sword2) - 1
                        axenew2 = Math.floor(clayModifier2 * axe2) - 1
                        archernew2 = Math.floor(clayModifier2 * archer2) - 1
                        lcnew2 = Math.floor(clayModifier2 * lc2) - 1
                        manew2 = Math.floor(clayModifier2 * ma2) - 1
                        ramnew2 = Math.floor(clayModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(clayModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(clayModifier2 * hc2) - 1
                    } else if (ironModifier2 > foodModifier2 && clayModifier2 > foodModifier2) {
                        spearnew2 = Math.floor(foodModifier2 * spear2) - 1
                        swordnew2 = Math.floor(foodModifier2 * sword2) - 1
                        axenew2 = Math.floor(foodModifier2 * axe2) - 1
                        archernew2 = Math.floor(foodModifier2 * archer2) - 1
                        lcnew2 = Math.floor(foodModifier2 * lc2) - 1
                        manew2 = Math.floor(foodModifier2 * ma2) - 1
                        ramnew2 = Math.floor(foodModifier2 * ram2) - 1
                        catapultnew2 = Math.floor(foodModifier2 * catapult2) - 1
                        hcnew2 = Math.floor(foodModifier2 * hc2) - 1
                    } else {
                        console.log('Nie znam przyczyny :P')
                    }
                }
                setInterval(function() {
                    if (running == false) {
                        return
                    }
                }, 5000)
                setTimeout(function() {
                    recruitSpear2()
                }, unitInterval)
                setTimeout(function() {
                    if (Barracks2 >= 3) {
                        recruitSword2()
                    }
                }, unitInterval * 2)
                setTimeout(function() {
                    if (Barracks2 >= 5) {
                        recruitAxe2()
                    }
                }, unitInterval * 3)
                setTimeout(function() {
                    if (Barracks2 >= 9) {
                        recruitArcher2()
                    }
                }, unitInterval * 4)
                setTimeout(function() {
                    if (Barracks2 >= 11) {
                        recruitLc2()
                    }
                }, unitInterval * 5)
                setTimeout(function() {
                    if (Barracks2 >= 13) {
                        recruitMa2()
                    }
                }, unitInterval * 6)
                setTimeout(function() {
                    if (Barracks2 >= 15) {
                        recruitRam2()
                    }
                }, unitInterval * 7)
                setTimeout(function() {
                    if (Barracks2 >= 17) {
                        recruitCatapult2()
                    }
                }, unitInterval * 8)
                setTimeout(function() {
                    if (Barracks2 >= 21) {
                        recruitHc2()
                    }
                }, unitInterval * 9)
            } else {
                console.log('Brak jednostek do rekrutacji')
            }

            function recruitSpear2() {
                if (spearnew2 >= minimal2) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'spear',
                        amount: spearnew2
                    })
                    unit = 'spear'
                    logData = [
                        unit,
                        spearnew2
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, spearnew2)
                } else {
                    console.log('Niezrekrutowano pikinierów - mniej niż wskazane minimum')
                }
            }

            function recruitSword2() {
                if (swordnew2 >= minimal2) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'sword',
                        amount: swordnew2
                    })
                    unit = 'sword'
                    logData = [
                        unit,
                        swordnew2
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, swordnew2)
                } else {
                    console.log('Niezrekrutowano mieczników - mniej niż wskazane minimum')
                }
            }

            function recruitAxe2() {
                if (axenew2 >= minimal2) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'axe',
                        amount: axenew2
                    })
                    unit = 'axe'
                    logData = [
                        unit,
                        axenew2
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, axenew2)
                } else {
                    console.log('Niezrekrutowano toporników - mniej niż wskazane minimum')
                }
            }

            function recruitArcher2() {
                if (archernew2 >= minimal2) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'archer',
                        amount: archernew2
                    })
                    unit = 'archer'
                    logData = [
                        unit,
                        archernew2
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, archernew2)
                } else {
                    console.log('Niezrekrutowano łuczników - mniej niż wskazane minimum')
                }
            }

            function recruitLc2() {
                if (lcnew2 >= minimal2) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'light_cavalry',
                        amount: lcnew2
                    })
                    unit = 'light_cavalry'
                    logData = [
                        unit,
                        lcnew2
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, lcnew2)
                } else {
                    console.log('Niezrekrutowano lk - mniej niż wskazane minimum')
                }
            }

            function recruitMa2() {
                if (manew2 >= minimal2) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'mounted_archer',
                        amount: manew2
                    })
                    unit = 'mounted_archer'
                    logData = [
                        unit,
                        manew2
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, manew2)
                } else {
                    console.log('Niezrekrutowano łk - mniej niż wskazane minimum')
                }
            }

            function recruitRam2() {
                if (ramnew2 >= minimal2) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'ram',
                        amount: ramnew2
                    })
                    unit = 'ram'
                    logData = [
                        unit,
                        ramnew2
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, ramnew2)
                } else {
                    console.log('Niezrekrutowano taranów - mniej niż wskazane minimum')
                }
            }

            function recruitCatapult2() {
                if (catapultnew2 >= minimal2) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'catapult',
                        amount: catapultnew2
                    })
                    unit = 'catapult'
                    logData = [
                        unit,
                        catapultnew2
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, catapultnew2)
                } else {
                    console.log('Niezrekrutowano katapult - mniej niż wskazane minimum')
                }
            }

            function recruitHc2() {
                if (hcnew2 >= minimal2) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'heavy_cavalry',
                        amount: hcnew2
                    })
                    unit = 'heavy_cavalry'
                    logData = [
                        unit,
                        hcnew2
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, hcnew2)
                } else {
                    console.log('Niezrekrutowano ck - mniej niż wskazane minimum')
                }
            }
        }

        function modifier3Get() {
            if (selectedGroup3 > 0) {
                if (queue3.length >= 2) {
                    modifier3 = 1.0
                } else if (queue3.length == 1) {
                    modifier3 = 0.5
                } else {
                    modifier3 = 0.25
                }
            } else {
                modifier3 = 0.0
            }
            time3GetB()
        }

        function time3GetB() {
            if (barracksRecrutingTime3.length > 0) {
                barracks3TotalJobsLength = barracksRecrutingTime3.reduce(function(a, b) {
                    return a + b
                })
            } else {
                barracks3TotalJobsLength = 0
            }
            timeModifier3Get()
        }

        function timeModifier3Get() {
            if (selectedGroup3 > 0) {
                if (barracks3TotalJobsLength >= 93600000) {
                    timeModifier3 = 0.00
                } else if (barracks3TotalJobsLength < 93600000 && barracks3TotalJobsLength >= 86400000) {
                    timeModifier3 = 0.10
                } else if (barracks3TotalJobsLength < 86400000 && barracks3TotalJobsLength >= 72000000) {
                    timeModifier3 = 0.25
                } else if (barracks3TotalJobsLength < 72000000 && barracks3TotalJobsLength >= 57600000) {
                    timeModifier3 = 0.40
                } else if (barracks3TotalJobsLength < 57600000 && barracks3TotalJobsLength >= 43200000) {
                    timeModifier3 = 0.55
                } else if (barracks3TotalJobsLength < 43200000 && barracks3TotalJobsLength >= 28800000) {
                    timeModifier3 = 0.70
                } else if (barracks3TotalJobsLength < 28800000 && barracks3TotalJobsLength >= 14400000) {
                    timeModifier3 = 0.85
                } else if (barracks3TotalJobsLength < 14400000 && barracks3TotalJobsLength >= 7200000) {
                    timeModifier3 = 0.925
                } else if (barracks3TotalJobsLength < 7200000 && barracks3TotalJobsLength >= 3600000) {
                    timeModifier3 = 0.9625
                } else {
                    timeModifier3 = 1.00
                }
            } else {
                timeModifier3 = 0.00
            }
            recruit3()
        }

        function recruit3() {
            var spearToRecruit3 = finalSpear3 - spearAmount
            var swordToRecruit3 = finalSword3 - swordAmount
            var axeToRecruit3 = finalAxe3 - axeAmount
            var archerToRecruit3 = finalArcher3 - archerAmount
            var lcToRecruit3 = finalLC3 - light_cavalryAmount
            var maToRecruit3 = finalMA3 - mounted_archerAmount
            var ramToRecruit3 = finalRam3 - ramAmount
            var catapultToRecruit3 = finalCatapult3 - catapultAmount
            var hcToRecruit3 = finalHC3 - heavy_cavalryAmount
            var spear3 = Math.floor(Spear3 * timeModifier3 * modifier3)
            var sword3 = Math.floor(Sword3 * timeModifier3 * modifier3)
            var axe3 = Math.floor(Axe3 * timeModifier3 * modifier3)
            var archer3 = Math.floor(Archer3 * timeModifier3 * modifier3)
            var lc3 = Math.floor(LC3 * timeModifier3 * modifier3)
            var ma3 = Math.floor(MA3 * timeModifier3 * modifier3)
            var ram3 = Math.floor(Ram3 * timeModifier3 * modifier3)
            var catapult3 = Math.floor(Catapult3 * timeModifier3 * modifier3)
            var hc3 = Math.floor(HC3 * timeModifier3 * modifier3)
            var wood3 = spear3 * wood[0] + sword3 * wood[1] + axe3 * wood[2] + archer3 * wood[3] + lc3 * wood[4] + ma3 * wood[5] + ram3 * wood[7] + catapult3 * wood[8] + hc3 * wood[6]
            var clay3 = spear3 * clay[0] + sword3 * clay[1] + axe3 * clay[2] + archer3 * clay[3] + lc3 * clay[4] + ma3 * clay[5] + ram3 * clay[7] + catapult3 * clay[8] + hc3 * clay[6]
            var iron3 = spear3 * iron[0] + sword3 * iron[1] + axe3 * iron[2] + archer3 * iron[3] + lc3 * iron[4] + ma3 * iron[5] + ram3 * iron[7] + catapult3 * iron[8] + hc3 * iron[6]
            var food3 = spear3 * food[0] + sword3 * food[1] + axe3 * food[2] + archer3 * food[3] + lc3 * food[4] + ma3 * food[5] + ram3 * food[7] + catapult3 * food[8] + hc3 * food[6]
            console.log(wood3, clay3, iron3, food3)
            if (spearToRecruit3 > 0 || hcToRecruit3 > 0 || catapultToRecruit3 > 0 || swordToRecruit3 > 0 || axeToRecruit3 > 0 || archerToRecruit3 > 0 || lcToRecruit3 > 0 || maToRecruit3 > 0 || ramToRecruit3 > 0) {
                if (wood3 <= villageWood3 && (spearToRecruit3 >= minimal3 || hcToRecruit3 >= minimal3 || catapultToRecruit3 >= minimal3 || swordToRecruit3 >= minimal3 || axeToRecruit3 >= minimal3 || archerToRecruit3 >= minimal3 || lcToRecruit3 >= minimal3 || maToRecruit3 >= minimal3 || ramToRecruit3 >= minimal3) && clay3 <= villageClay3 && iron3 <= villageIron3 && food3 <= villageFood3) {
                    spearnew3 = spear3
                    swordnew3 = sword3
                    axenew3 = axe3
                    archernew3 = archer3
                    lcnew3 = lc3
                    manew3 = ma3
                    ramnew3 = ram3
                    catapultnew3 = catapult3
                    hcnew3 = hc3
                } else if (wood3 >= villageWood3 && (spearToRecruit3 >= minimal3 || hcToRecruit3 >= minimal3 || catapultToRecruit3 >= minimal3 || swordToRecruit3 >= minimal3 || axeToRecruit3 >= minimal3 || archerToRecruit3 >= minimal3 || lcToRecruit3 >= minimal3 || maToRecruit3 >= minimal3 || ramToRecruit3 >= minimal3) && clay3 <= villageClay3 && iron3 <= villageIron3 && food3 <= villageFood3) {
                    generalModifier3 = villageWood3 / wood3
                    spearnew3 = Math.floor(generalModifier3 * spear3) - 1
                    swordnew3 = Math.floor(generalModifier3 * sword3) - 1
                    axenew3 = Math.floor(generalModifier3 * axe3) - 1
                    archernew3 = Math.floor(generalModifier3 * archer3) - 1
                    lcnew3 = Math.floor(generalModifier3 * lc3) - 1
                    manew3 = Math.floor(generalModifier3 * ma3) - 1
                    ramnew3 = Math.floor(generalModifier3 * ram3) - 1
                    catapultnew3 = Math.floor(generalModifier3 * catapult3) - 1
                    hcnew3 = Math.floor(generalModifier3 * hc3) - 1
                } else if (wood3 <= villageWood3 && (spearToRecruit3 >= minimal3 || hcToRecruit3 >= minimal3 || catapultToRecruit3 >= minimal3 || swordToRecruit3 >= minimal3 || axeToRecruit3 >= minimal3 || archerToRecruit3 >= minimal3 || lcToRecruit3 >= minimal3 || maToRecruit3 >= minimal3 || ramToRecruit3 >= minimal3) && clay3 >= villageClay3 && iron3 <= villageIron3 && food3 <= villageFood3) {
                    generalModifier3 = villageClay3 / clay3
                    spearnew3 = Math.floor(generalModifier3 * spear3) - 1
                    swordnew3 = Math.floor(generalModifier3 * sword3) - 1
                    axenew3 = Math.floor(generalModifier3 * axe3) - 1
                    archernew3 = Math.floor(generalModifier3 * archer3) - 1
                    lcnew3 = Math.floor(generalModifier3 * lc3) - 1
                    manew3 = Math.floor(generalModifier3 * ma3) - 1
                    ramnew3 = Math.floor(generalModifier3 * ram3) - 1
                    catapultnew3 = Math.floor(generalModifier3 * catapult3) - 1
                    hcnew3 = Math.floor(generalModifier3 * hc3) - 1
                } else if (wood3 <= villageWood3 && (spearToRecruit3 >= minimal3 || hcToRecruit3 >= minimal3 || catapultToRecruit3 >= minimal3 || swordToRecruit3 >= minimal3 || axeToRecruit3 >= minimal3 || archerToRecruit3 >= minimal3 || lcToRecruit3 >= minimal3 || maToRecruit3 >= minimal3 || ramToRecruit3 >= minimal3) && clay3 <= villageClay3 && iron3 >= villageIron3 && food3 <= villageFood3) {
                    generalModifier3 = villageIron3 / iron3
                    spearnew3 = Math.floor(generalModifier3 * spear3) - 1
                    swordnew3 = Math.floor(generalModifier3 * sword3) - 1
                    axenew3 = Math.floor(generalModifier3 * axe3) - 1
                    archernew3 = Math.floor(generalModifier3 * archer3) - 1
                    lcnew3 = Math.floor(generalModifier3 * lc3) - 1
                    manew3 = Math.floor(generalModifier3 * ma3) - 1
                    ramnew3 = Math.floor(generalModifier3 * ram3) - 1
                    catapultnew3 = Math.floor(generalModifier3 * catapult3) - 1
                    hcnew3 = Math.floor(generalModifier3 * hc3) - 1
                } else if (wood3 <= villageWood3 && (spearToRecruit3 >= minimal3 || hcToRecruit3 >= minimal3 || catapultToRecruit3 >= minimal3 || swordToRecruit3 >= minimal3 || axeToRecruit3 >= minimal3 || archerToRecruit3 >= minimal3 || lcToRecruit3 >= minimal3 || maToRecruit3 >= minimal3 || ramToRecruit3 >= minimal3) && clay3 <= villageClay3 && iron3 <= villageIron3 && food3 >= villageFood3) {
                    generalModifier3 = villageFood3 / food3
                    spearnew3 = Math.floor(generalModifier3 * spear3) - 1
                    swordnew3 = Math.floor(generalModifier3 * sword3) - 1
                    axenew3 = Math.floor(generalModifier3 * axe3) - 1
                    archernew3 = Math.floor(generalModifier3 * archer3) - 1
                    lcnew3 = Math.floor(generalModifier3 * lc3) - 1
                    manew3 = Math.floor(generalModifier3 * ma3) - 1
                    ramnew3 = Math.floor(generalModifier3 * ram3) - 1
                    catapultnew3 = Math.floor(generalModifier3 * catapult3) - 1
                    hcnew3 = Math.floor(generalModifier3 * hc3) - 1
                } else if (wood3 >= villageWood3 && (spearToRecruit3 >= minimal3 || hcToRecruit3 >= minimal3 || catapultToRecruit3 >= minimal3 || swordToRecruit3 >= minimal3 || axeToRecruit3 >= minimal3 || archerToRecruit3 >= minimal3 || lcToRecruit3 >= minimal3 || maToRecruit3 >= minimal3 || ramToRecruit3 >= minimal3) && clay3 >= villageClay3 && iron3 <= villageIron3 && food3 <= villageFood3) {
                    woodModifier3 = villageWood3 / wood3
                    clayModifier3 = villageClay3 / clay3
                    if (clayModifier3 > woodModifier3) {
                        spearnew3 = Math.floor(woodModifier3 * spear3) - 1
                        swordnew3 = Math.floor(woodModifier3 * sword3) - 1
                        axenew3 = Math.floor(woodModifier3 * axe3) - 1
                        archernew3 = Math.floor(woodModifier3 * archer3) - 1
                        lcnew3 = Math.floor(woodModifier3 * lc3) - 1
                        manew3 = Math.floor(woodModifier3 * ma3) - 1
                        ramnew3 = Math.floor(woodModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(woodModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(woodModifier3 * hc3) - 1
                    } else {
                        spearnew3 = Math.floor(clayModifier3 * spear3) - 1
                        swordnew3 = Math.floor(clayModifier3 * sword3) - 1
                        axenew3 = Math.floor(clayModifier3 * axe3) - 1
                        archernew3 = Math.floor(clayModifier3 * archer3) - 1
                        lcnew3 = Math.floor(clayModifier3 * lc3) - 1
                        manew3 = Math.floor(clayModifier3 * ma3) - 1
                        ramnew3 = Math.floor(clayModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(clayModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(clayModifier3 * hc3) - 1
                    }
                } else if (wood3 <= villageWood3 && (spearToRecruit3 >= minimal3 || hcToRecruit3 >= minimal3 || catapultToRecruit3 >= minimal3 || swordToRecruit3 >= minimal3 || axeToRecruit3 >= minimal3 || archerToRecruit3 >= minimal3 || lcToRecruit3 >= minimal3 || maToRecruit3 >= minimal3 || ramToRecruit3 >= minimal3) && clay3 >= villageClay3 && iron3 >= villageIron3 && food3 <= villageFood3) {
                    ironModifier3 = villageIron3 / iron3
                    clayModifier3 = villageClay3 / clay3
                    if (clayModifier3 > ironModifier3) {
                        spearnew3 = Math.floor(ironModifier3 * spear3) - 1
                        swordnew3 = Math.floor(ironModifier3 * sword3) - 1
                        axenew3 = Math.floor(ironModifier3 * axe3) - 1
                        archernew3 = Math.floor(ironModifier3 * archer3) - 1
                        lcnew3 = Math.floor(ironModifier3 * lc3) - 1
                        manew3 = Math.floor(ironModifier3 * ma3) - 1
                        ramnew3 = Math.floor(ironModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(ironModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(ironModifier3 * hc3) - 1
                    } else {
                        spearnew3 = Math.floor(clayModifier3 * spear3) - 1
                        swordnew3 = Math.floor(clayModifier3 * sword3) - 1
                        axenew3 = Math.floor(clayModifier3 * axe3) - 1
                        archernew3 = Math.floor(clayModifier3 * archer3) - 1
                        lcnew3 = Math.floor(clayModifier3 * lc3) - 1
                        manew3 = Math.floor(clayModifier3 * ma3) - 1
                        ramnew3 = Math.floor(clayModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(clayModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(clayModifier3 * hc3) - 1
                    }
                } else if (wood3 <= villageWood3 && (spearToRecruit3 >= minimal3 || hcToRecruit3 >= minimal3 || catapultToRecruit3 >= minimal3 || swordToRecruit3 >= minimal3 || axeToRecruit3 >= minimal3 || archerToRecruit3 >= minimal3 || lcToRecruit3 >= minimal3 || maToRecruit3 >= minimal3 || ramToRecruit3 >= minimal3) && clay3 >= villageClay3 && iron3 <= villageIron3 && food3 >= villageFood3) {
                    foodModifier3 = villageFood3 / food3
                    clayModifier3 = villageClay3 / clay3
                    if (clayModifier3 > foodModifier3) {
                        spearnew3 = Math.floor(foodModifier3 * spear3) - 1
                        swordnew3 = Math.floor(foodModifier3 * sword3) - 1
                        axenew3 = Math.floor(foodModifier3 * axe3) - 1
                        archernew3 = Math.floor(foodModifier3 * archer3) - 1
                        lcnew3 = Math.floor(foodModifier3 * lc3) - 1
                        manew3 = Math.floor(foodModifier3 * ma3) - 1
                        ramnew3 = Math.floor(foodModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(foodModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(foodModifier3 * hc3) - 1
                    } else {
                        spearnew3 = Math.floor(clayModifier3 * spear3) - 1
                        swordnew3 = Math.floor(clayModifier3 * sword3) - 1
                        axenew3 = Math.floor(clayModifier3 * axe3) - 1
                        archernew3 = Math.floor(clayModifier3 * archer3) - 1
                        lcnew3 = Math.floor(clayModifier3 * lc3) - 1
                        manew3 = Math.floor(clayModifier3 * ma3) - 1
                        ramnew3 = Math.floor(clayModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(clayModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(clayModifier3 * hc3) - 1
                    }
                } else if (wood3 >= villageWood3 && (spearToRecruit3 >= minimal3 || hcToRecruit3 >= minimal3 || catapultToRecruit3 >= minimal3 || swordToRecruit3 >= minimal3 || axeToRecruit3 >= minimal3 || archerToRecruit3 >= minimal3 || lcToRecruit3 >= minimal3 || maToRecruit3 >= minimal3 || ramToRecruit3 >= minimal3) && clay3 <= villageClay3 && iron3 >= villageIron3 && food3 <= villageFood3) {
                    woodModifier3 = villageWood3 / wood3
                    ironModifier3 = villageIron3 / iron3
                    if (ironModifier3 > woodModifier3) {
                        spearnew3 = Math.floor(woodModifier3 * spear3) - 1
                        swordnew3 = Math.floor(woodModifier3 * sword3) - 1
                        axenew3 = Math.floor(woodModifier3 * axe3) - 1
                        archernew3 = Math.floor(woodModifier3 * archer3) - 1
                        lcnew3 = Math.floor(woodModifier3 * lc3) - 1
                        manew3 = Math.floor(woodModifier3 * ma3) - 1
                        ramnew3 = Math.floor(woodModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(woodModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(woodModifier3 * hc3) - 1
                    } else {
                        spearnew3 = Math.floor(ironModifier3 * spear3) - 1
                        swordnew3 = Math.floor(ironModifier3 * sword3) - 1
                        axenew3 = Math.floor(ironModifier3 * axe3) - 1
                        archernew3 = Math.floor(ironModifier3 * archer3) - 1
                        lcnew3 = Math.floor(ironModifier3 * lc3) - 1
                        manew3 = Math.floor(ironModifier3 * ma3) - 1
                        ramnew3 = Math.floor(ironModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(ironModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(ironModifier3 * hc3) - 1
                    }
                } else if (wood3 <= villageWood3 && (spearToRecruit3 >= minimal3 || hcToRecruit3 >= minimal3 || catapultToRecruit3 >= minimal3 || swordToRecruit3 >= minimal3 || axeToRecruit3 >= minimal3 || archerToRecruit3 >= minimal3 || lcToRecruit3 >= minimal3 || maToRecruit3 >= minimal3 || ramToRecruit3 >= minimal3) && clay3 <= villageClay3 && iron3 >= villageIron3 && food3 >= villageFood3) {
                    foodModifier3 = villageFood3 / food3
                    ironModifier3 = villageIron3 / iron3
                    if (ironModifier3 > foodModifier3) {
                        spearnew3 = Math.floor(foodModifier3 * spear3) - 1
                        swordnew3 = Math.floor(foodModifier3 * sword3) - 1
                        axenew3 = Math.floor(foodModifier3 * axe3) - 1
                        archernew3 = Math.floor(foodModifier3 * archer3) - 1
                        lcnew3 = Math.floor(foodModifier3 * lc3) - 1
                        manew3 = Math.floor(foodModifier3 * ma3) - 1
                        ramnew3 = Math.floor(foodModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(foodModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(foodModifier3 * hc3) - 1
                    } else {
                        spearnew3 = Math.floor(ironModifier3 * spear3) - 1
                        swordnew3 = Math.floor(ironModifier3 * sword3) - 1
                        axenew3 = Math.floor(ironModifier3 * axe3) - 1
                        archernew3 = Math.floor(ironModifier3 * archer3) - 1
                        lcnew3 = Math.floor(ironModifier3 * lc3) - 1
                        manew3 = Math.floor(ironModifier3 * ma3) - 1
                        ramnew3 = Math.floor(ironModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(ironModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(ironModifier3 * hc3) - 1
                    }
                } else if (wood3 >= villageWood3 && (spearToRecruit3 >= minimal3 || hcToRecruit3 >= minimal3 || catapultToRecruit3 >= minimal3 || swordToRecruit3 >= minimal3 || axeToRecruit3 >= minimal3 || archerToRecruit3 >= minimal3 || lcToRecruit3 >= minimal3 || maToRecruit3 >= minimal3 || ramToRecruit3 >= minimal3) && clay3 <= villageClay3 && iron3 <= villageIron3 && food3 >= villageFood3) {
                    woodModifier3 = villageWood3 / wood3
                    foodModifier3 = villageFood3 / food3
                    if (foodModifier3 > woodModifier3) {
                        spearnew3 = Math.floor(woodModifier3 * spear3) - 1
                        swordnew3 = Math.floor(woodModifier3 * sword3) - 1
                        axenew3 = Math.floor(woodModifier3 * axe3) - 1
                        archernew3 = Math.floor(woodModifier3 * archer3) - 1
                        lcnew3 = Math.floor(woodModifier3 * lc3) - 1
                        manew3 = Math.floor(woodModifier3 * ma3) - 1
                        ramnew3 = Math.floor(woodModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(woodModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(woodModifier3 * hc3) - 1
                    } else {
                        spearnew3 = Math.floor(foodModifier3 * spear3) - 1
                        swordnew3 = Math.floor(foodModifier3 * sword3) - 1
                        axenew3 = Math.floor(foodModifier3 * axe3) - 1
                        archernew3 = Math.floor(foodModifier3 * archer3) - 1
                        lcnew3 = Math.floor(foodModifier3 * lc3) - 1
                        manew3 = Math.floor(foodModifier3 * ma3) - 1
                        ramnew3 = Math.floor(foodModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(foodModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(foodModifier3 * hc3) - 1
                    }
                } else if (wood3 >= villageWood3 && (spearToRecruit3 >= minimal3 || hcToRecruit3 >= minimal3 || catapultToRecruit3 >= minimal3 || swordToRecruit3 >= minimal3 || axeToRecruit3 >= minimal3 || archerToRecruit3 >= minimal3 || lcToRecruit3 >= minimal3 || maToRecruit3 >= minimal3 || ramToRecruit3 >= minimal3) && clay3 >= villageClay3 && iron3 >= villageIron3 && food3 <= villageFood3) {
                    woodModifier3 = villageWood3 / wood3
                    ironModifier3 = villageIron3 / iron3
                    clayModifier3 = villageClay3 / clay3
                    if (clayModifier3 > ironModifier3 && woodModifier3 > ironModifier3) {
                        spearnew3 = Math.floor(ironModifier3 * spear3) - 1
                        swordnew3 = Math.floor(ironModifier3 * sword3) - 1
                        axenew3 = Math.floor(ironModifier3 * axe3) - 1
                        archernew3 = Math.floor(ironModifier3 * archer3) - 1
                        lcnew3 = Math.floor(ironModifier3 * lc3) - 1
                        manew3 = Math.floor(ironModifier3 * ma3) - 1
                        ramnew3 = Math.floor(ironModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(ironModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(ironModifier3 * hc3) - 1
                    } else if (ironModifier3 > clayModifier3 && woodModifier3 > clayModifier3) {
                        spearnew3 = Math.floor(clayModifier3 * spear3) - 1
                        swordnew3 = Math.floor(clayModifier3 * sword3) - 1
                        axenew3 = Math.floor(clayModifier3 * axe3) - 1
                        archernew3 = Math.floor(clayModifier3 * archer3) - 1
                        lcnew3 = Math.floor(clayModifier3 * lc3) - 1
                        manew3 = Math.floor(clayModifier3 * ma3) - 1
                        ramnew3 = Math.floor(clayModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(clayModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(clayModifier3 * hc3) - 1
                    } else if (ironModifier3 > woodModifier3 && clayModifier3 > woodModifier3) {
                        spearnew3 = Math.floor(woodModifier3 * spear3) - 1
                        swordnew3 = Math.floor(woodModifier3 * sword3) - 1
                        axenew3 = Math.floor(woodModifier3 * axe3) - 1
                        archernew3 = Math.floor(woodModifier3 * archer3) - 1
                        lcnew3 = Math.floor(woodModifier3 * lc3) - 1
                        manew3 = Math.floor(woodModifier3 * ma3) - 1
                        ramnew3 = Math.floor(woodModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(woodModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(woodModifier3 * hc3) - 1
                    } else {
                        console.log('Nie znam przyczyny :P')
                    }
                } else if (wood3 >= villageWood3 && (spearToRecruit3 >= minimal3 || hcToRecruit3 >= minimal3 || catapultToRecruit3 >= minimal3 || swordToRecruit3 >= minimal3 || axeToRecruit3 >= minimal3 || archerToRecruit3 >= minimal3 || lcToRecruit3 >= minimal3 || maToRecruit3 >= minimal3 || ramToRecruit3 >= minimal3) && clay3 >= villageClay3 && iron3 <= villageIron3 && food3 >= villageFood3) {
                    woodModifier3 = villageWood3 / wood3
                    foodModifier3 = villageFood3 / food3
                    clayModifier3 = villageClay3 / clay3
                    if (clayModifier3 > foodModifier3 && woodModifier3 > foodModifier3) {
                        spearnew3 = Math.floor(foodModifier3 * spear3) - 1
                        swordnew3 = Math.floor(foodModifier3 * sword3) - 1
                        axenew3 = Math.floor(foodModifier3 * axe3) - 1
                        archernew3 = Math.floor(foodModifier3 * archer3) - 1
                        lcnew3 = Math.floor(foodModifier3 * lc3) - 1
                        manew3 = Math.floor(foodModifier3 * ma3) - 1
                        ramnew3 = Math.floor(foodModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(foodModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(foodModifier3 * hc3) - 1
                    } else if (foodModifier3 > clayModifier3 && woodModifier3 > clayModifier3) {
                        spearnew3 = Math.floor(clayModifier3 * spear3) - 1
                        swordnew3 = Math.floor(clayModifier3 * sword3) - 1
                        axenew3 = Math.floor(clayModifier3 * axe3) - 1
                        archernew3 = Math.floor(clayModifier3 * archer3) - 1
                        lcnew3 = Math.floor(clayModifier3 * lc3) - 1
                        manew3 = Math.floor(clayModifier3 * ma3) - 1
                        ramnew3 = Math.floor(clayModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(clayModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(clayModifier3 * hc3) - 1
                    } else if (foodModifier3 > woodModifier3 && clayModifier3 > woodModifier3) {
                        spearnew3 = Math.floor(woodModifier3 * spear3) - 1
                        swordnew3 = Math.floor(woodModifier3 * sword3) - 1
                        axenew3 = Math.floor(woodModifier3 * axe3) - 1
                        archernew3 = Math.floor(woodModifier3 * archer3) - 1
                        lcnew3 = Math.floor(woodModifier3 * lc3) - 1
                        manew3 = Math.floor(woodModifier3 * ma3) - 1
                        ramnew3 = Math.floor(woodModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(woodModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(woodModifier3 * hc3) - 1
                    } else {
                        console.log('Nie znam przyczyny :P')
                    }
                } else if (wood3 >= villageWood3 && (spearToRecruit3 >= minimal3 || hcToRecruit3 >= minimal3 || catapultToRecruit3 >= minimal3 || swordToRecruit3 >= minimal3 || axeToRecruit3 >= minimal3 || archerToRecruit3 >= minimal3 || lcToRecruit3 >= minimal3 || maToRecruit3 >= minimal3 || ramToRecruit3 >= minimal3) && clay3 <= villageClay3 && iron3 >= villageIron3 && food3 >= villageFood3) {
                    woodModifier3 = villageWood3 / wood3
                    foodModifier3 = villageFood3 / food3
                    ironModifier3 = villageIron3 / iron3
                    if (foodModifier3 > ironModifier3 && woodModifier3 > ironModifier3) {
                        spearnew3 = Math.floor(ironModifier3 * spear3) - 1
                        swordnew3 = Math.floor(ironModifier3 * sword3) - 1
                        axenew3 = Math.floor(ironModifier3 * axe3) - 1
                        archernew3 = Math.floor(ironModifier3 * archer3) - 1
                        lcnew3 = Math.floor(ironModifier3 * lc3) - 1
                        manew3 = Math.floor(ironModifier3 * ma3) - 1
                        ramnew3 = Math.floor(ironModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(ironModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(ironModifier3 * hc3) - 1
                    } else if (ironModifier3 > foodModifier3 && woodModifier3 > foodModifier3) {
                        spearnew3 = Math.floor(foodModifier3 * spear3) - 1
                        swordnew3 = Math.floor(foodModifier3 * sword3) - 1
                        axenew3 = Math.floor(foodModifier3 * axe3) - 1
                        archernew3 = Math.floor(foodModifier3 * archer3) - 1
                        lcnew3 = Math.floor(foodModifier3 * lc3) - 1
                        manew3 = Math.floor(foodModifier3 * ma3) - 1
                        ramnew3 = Math.floor(foodModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(foodModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(foodModifier3 * hc3) - 1
                    } else if (ironModifier3 > woodModifier3 && foodModifier3 > woodModifier3) {
                        spearnew3 = Math.floor(woodModifier3 * spear3) - 1
                        swordnew3 = Math.floor(woodModifier3 * sword3) - 1
                        axenew3 = Math.floor(woodModifier3 * axe3) - 1
                        archernew3 = Math.floor(woodModifier3 * archer3) - 1
                        lcnew3 = Math.floor(woodModifier3 * lc3) - 1
                        manew3 = Math.floor(woodModifier3 * ma3) - 1
                        ramnew3 = Math.floor(woodModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(woodModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(woodModifier3 * hc3) - 1
                    } else {
                        console.log('Nie znam przyczyny :P')
                    }
                } else if (wood3 <= villageWood3 && (spearToRecruit3 >= minimal3 || hcToRecruit3 >= minimal3 || catapultToRecruit3 >= minimal3 || swordToRecruit3 >= minimal3 || axeToRecruit3 >= minimal3 || archerToRecruit3 >= minimal3 || lcToRecruit3 >= minimal3 || maToRecruit3 >= minimal3 || ramToRecruit3 >= minimal3) && clay3 >= villageClay3 && iron3 >= villageIron3 && food3 >= villageFood3) {
                    foodModifier3 = villageFood3 / food3
                    ironModifier3 = villageIron3 / iron3
                    clayModifier3 = villageClay3 / clay3
                    if (clayModifier3 > ironModifier3 && foodModifier3 > ironModifier3) {
                        spearnew3 = Math.floor(ironModifier3 * spear3) - 1
                        swordnew3 = Math.floor(ironModifier3 * sword3) - 1
                        axenew3 = Math.floor(ironModifier3 * axe3) - 1
                        archernew3 = Math.floor(ironModifier3 * archer3) - 1
                        lcnew3 = Math.floor(ironModifier3 * lc3) - 1
                        manew3 = Math.floor(ironModifier3 * ma3) - 1
                        ramnew3 = Math.floor(ironModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(ironModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(ironModifier3 * hc3) - 1
                    } else if (ironModifier3 > clayModifier3 && foodModifier3 > clayModifier3) {
                        spearnew3 = Math.floor(clayModifier3 * spear3) - 1
                        swordnew3 = Math.floor(clayModifier3 * sword3) - 1
                        axenew3 = Math.floor(clayModifier3 * axe3) - 1
                        archernew3 = Math.floor(clayModifier3 * archer3) - 1
                        lcnew3 = Math.floor(clayModifier3 * lc3) - 1
                        manew3 = Math.floor(clayModifier3 * ma3) - 1
                        ramnew3 = Math.floor(clayModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(clayModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(clayModifier3 * hc3) - 1
                    } else if (ironModifier3 > foodModifier3 && clayModifier3 > foodModifier3) {
                        spearnew3 = Math.floor(foodModifier3 * spear3) - 1
                        swordnew3 = Math.floor(foodModifier3 * sword3) - 1
                        axenew3 = Math.floor(foodModifier3 * axe3) - 1
                        archernew3 = Math.floor(foodModifier3 * archer3) - 1
                        lcnew3 = Math.floor(foodModifier3 * lc3) - 1
                        manew3 = Math.floor(foodModifier3 * ma3) - 1
                        ramnew3 = Math.floor(foodModifier3 * ram3) - 1
                        catapultnew3 = Math.floor(foodModifier3 * catapult3) - 1
                        hcnew3 = Math.floor(foodModifier3 * hc3) - 1
                    } else {
                        console.log('Nie znam przyczyny :P')
                    }
                }
                setInterval(function() {
                    if (running == false) {
                        return
                    }
                }, 5000)
                setTimeout(function() {
                    recruitSpear3()
                }, unitInterval)
                setTimeout(function() {
                    if (Barracks3 >= 3) {
                        recruitSword3()
                    }
                }, unitInterval * 2)
                setTimeout(function() {
                    if (Barracks3 >= 5) {
                        recruitAxe3()
                    }
                }, unitInterval * 3)
                setTimeout(function() {
                    if (Barracks3 >= 9) {
                        recruitArcher3()
                    }
                }, unitInterval * 4)
                setTimeout(function() {
                    if (Barracks3 >= 11) {
                        recruitLc3()
                    }
                }, unitInterval * 5)
                setTimeout(function() {
                    if (Barracks3 >= 13) {
                        recruitMa3()
                    }
                }, unitInterval * 6)
                setTimeout(function() {
                    if (Barracks3 >= 15) {
                        recruitRam3()
                    }
                }, unitInterval * 7)
                setTimeout(function() {
                    if (Barracks3 >= 17) {
                        recruitCatapult3()
                    }
                }, unitInterval * 8)
                setTimeout(function() {
                    if (Barracks3 >= 21) {
                        recruitHc3()
                    }
                }, unitInterval * 9)
            } else {
                console.log('Brak jednostek do rekrutacji')
            }

            function recruitSpear3() {
                if (spearnew3 >= minimal3) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'spear',
                        amount: spearnew3
                    })
                    unit = 'spear'
                    logData = [
                        unit,
                        spearnew3
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, spearnew3)
                } else {
                    console.log('Niezrekrutowano pikinierów - mniej niż wskazane minimum')
                }
            }

            function recruitSword3() {
                if (swordnew3 >= minimal3) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'sword',
                        amount: swordnew3
                    })
                    unit = 'sword'
                    logData = [
                        unit,
                        swordnew3
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, swordnew3)
                } else {
                    console.log('Niezrekrutowano mieczników - mniej niż wskazane minimum')
                }
            }

            function recruitAxe3() {
                if (axenew3 >= minimal3) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'axe',
                        amount: axenew3
                    })
                    unit = 'axe'
                    logData = [
                        unit,
                        axenew3
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, axenew3)
                } else {
                    console.log('Niezrekrutowano toporników - mniej niż wskazane minimum')
                }
            }

            function recruitArcher3() {
                if (archernew3 >= minimal3) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'archer',
                        amount: archernew3
                    })
                    unit = 'archer'
                    logData = [
                        unit,
                        archernew3
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, archernew3)
                } else {
                    console.log('Niezrekrutowano łuczników - mniej niż wskazane minimum')
                }
            }

            function recruitLc3() {
                if (lcnew3 >= minimal3) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'light_cavalry',
                        amount: lcnew3
                    })
                    unit = 'light_cavalry'
                    logData = [
                        unit,
                        lcnew3
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, lcnew3)
                } else {
                    console.log('Niezrekrutowano lk - mniej niż wskazane minimum')
                }
            }

            function recruitMa3() {
                if (manew3 >= minimal3) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'mounted_archer',
                        amount: manew3
                    })
                    unit = 'mounted_archer'
                    logData = [
                        unit,
                        manew3
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, manew3)
                } else {
                    console.log('Niezrekrutowano łk - mniej niż wskazane minimum')
                }
            }

            function recruitRam3() {
                if (ramnew3 >= minimal3) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'ram',
                        amount: ramnew3
                    })
                    unit = 'ram'
                    logData = [
                        unit,
                        ramnew3
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, ramnew3)
                } else {
                    console.log('Niezrekrutowano taranów - mniej niż wskazane minimum')
                }
            }

            function recruitCatapult3() {
                if (catapultnew3 >= minimal3) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'catapult',
                        amount: catapultnew3
                    })
                    unit = 'catapult'
                    logData = [
                        unit,
                        catapultnew3
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, catapultnew3)
                } else {
                    console.log('Niezrekrutowano katapult - mniej niż wskazane minimum')
                }
            }

            function recruitHc3() {
                if (hcnew3 >= minimal3) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'heavy_cavalry',
                        amount: hcnew3
                    })
                    unit = 'heavy_cavalry'
                    logData = [
                        unit,
                        hcnew3
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, hcnew3)
                } else {
                    console.log('Niezrekrutowano ck - mniej niż wskazane minimum')
                }
            }
        }

        function modifier4Get() {
            if (selectedGroup4 > 0) {
                if (queue4.length >= 2) {
                    modifier4 = 1.0
                } else if (queue4.length == 1) {
                    modifier4 = 0.5
                } else {
                    modifier4 = 0.25
                }
            } else {
                modifier4 = 0.0
            }
            time4GetB()
        }

        function time4GetB() {
            if (barracksRecrutingTime4.length > 0) {
                barracks4TotalJobsLength = barracksRecrutingTime4.reduce(function(a, b) {
                    return a + b
                })
            } else {
                barracks4TotalJobsLength = 0
            }
            timeModifier4Get()
        }

        function timeModifier4Get() {
            if (selectedGroup4 > 0) {
                if (barracks4TotalJobsLength >= 93600000) {
                    timeModifier4 = 0.00
                } else if (barracks4TotalJobsLength < 93600000 && barracks4TotalJobsLength >= 86400000) {
                    timeModifier4 = 0.10
                } else if (barracks4TotalJobsLength < 86400000 && barracks4TotalJobsLength >= 72000000) {
                    timeModifier4 = 0.25
                } else if (barracks4TotalJobsLength < 72000000 && barracks4TotalJobsLength >= 57600000) {
                    timeModifier4 = 0.40
                } else if (barracks4TotalJobsLength < 57600000 && barracks4TotalJobsLength >= 43200000) {
                    timeModifier4 = 0.55
                } else if (barracks4TotalJobsLength < 43200000 && barracks4TotalJobsLength >= 28800000) {
                    timeModifier4 = 0.70
                } else if (barracks4TotalJobsLength < 28800000 && barracks4TotalJobsLength >= 14400000) {
                    timeModifier4 = 0.85
                } else if (barracks4TotalJobsLength < 14400000 && barracks4TotalJobsLength >= 7200000) {
                    timeModifier4 = 0.925
                } else if (barracks4TotalJobsLength < 7200000 && barracks4TotalJobsLength >= 3600000) {
                    timeModifier4 = 0.9625
                } else {
                    timeModifier4 = 1.00
                }
            } else {
                timeModifier4 = 0.00
            }
            recruit4()
        }

        function recruit4() {
            var spearToRecruit4 = finalSpear4 - spearAmount
            var swordToRecruit4 = finalSword4 - swordAmount
            var axeToRecruit4 = finalAxe4 - axeAmount
            var archerToRecruit4 = finalArcher4 - archerAmount
            var lcToRecruit4 = finalLC4 - light_cavalryAmount
            var maToRecruit4 = finalMA4 - mounted_archerAmount
            var ramToRecruit4 = finalRam4 - ramAmount
            var catapultToRecruit4 = finalCatapult4 - catapultAmount
            var hcToRecruit4 = finalHC4 - heavy_cavalryAmount
            var spear4 = Math.floor(Spear4 * timeModifier4 * modifier4)
            var sword4 = Math.floor(Sword4 * timeModifier4 * modifier4)
            var axe4 = Math.floor(Axe4 * timeModifier4 * modifier4)
            var archer4 = Math.floor(Archer4 * timeModifier4 * modifier4)
            var lc4 = Math.floor(LC4 * timeModifier4 * modifier4)
            var ma4 = Math.floor(MA4 * timeModifier4 * modifier4)
            var ram4 = Math.floor(Ram4 * timeModifier4 * modifier4)
            var catapult4 = Math.floor(Catapult4 * timeModifier4 * modifier4)
            var hc4 = Math.floor(HC4 * timeModifier4 * modifier4)
            var wood4 = spear4 * wood[0] + sword4 * wood[1] + axe4 * wood[2] + archer4 * wood[3] + lc4 * wood[4] + ma4 * wood[5] + ram4 * wood[7] + catapult4 * wood[8] + hc4 * wood[6]
            var clay4 = spear4 * clay[0] + sword4 * clay[1] + axe4 * clay[2] + archer4 * clay[3] + lc4 * clay[4] + ma4 * clay[5] + ram4 * clay[7] + catapult4 * clay[8] + hc4 * clay[6]
            var iron4 = spear4 * iron[0] + sword4 * iron[1] + axe4 * iron[2] + archer4 * iron[3] + lc4 * iron[4] + ma4 * iron[5] + ram4 * iron[7] + catapult4 * iron[8] + hc4 * iron[6]
            var food4 = spear4 * food[0] + sword4 * food[1] + axe4 * food[2] + archer4 * food[3] + lc4 * food[4] + ma4 * food[5] + ram4 * food[7] + catapult4 * food[8] + hc4 * food[6]
            console.log(wood4, clay4, iron4, food4)
            if (spearToRecruit4 <= 0 || hcToRecruit4 <= 0 || catapultToRecruit4 <= 0 || swordToRecruit4 <= 0 || axeToRecruit4 <= 0 || archerToRecruit4 <= 0 || lcToRecruit4 <= 0 || maToRecruit4 <= 0 || ramToRecruit4 <= 0) {
                console.log('Brak jednostek do rekrutacji')
            } else {
                if (wood4 <= villageWood4 && (spearToRecruit4 >= minimal4 || hcToRecruit4 >= minimal4 || catapultToRecruit4 >= minimal4 || swordToRecruit4 >= minimal4 || axeToRecruit4 >= minimal4 || archerToRecruit4 >= minimal4 || lcToRecruit4 >= minimal4 || maToRecruit4 >= minimal4 || ramToRecruit4 >= minimal4) && clay4 <= villageClay4 && iron4 <= villageIron4 && food4 <= villageFood4) {
                    spearnew4 = spear4
                    swordnew4 = sword4
                    axenew4 = axe4
                    archernew4 = archer4
                    lcnew4 = lc4
                    manew4 = ma4
                    ramnew4 = ram4
                    catapultnew4 = catapult4
                    hcnew4 = hc4
                } else if (wood4 >= villageWood4 && (spearToRecruit4 >= minimal4 || hcToRecruit4 >= minimal4 || catapultToRecruit4 >= minimal4 || swordToRecruit4 >= minimal4 || axeToRecruit4 >= minimal4 || archerToRecruit4 >= minimal4 || lcToRecruit4 >= minimal4 || maToRecruit4 >= minimal4 || ramToRecruit4 >= minimal4) && clay4 <= villageClay4 && iron4 <= villageIron4 && food4 <= villageFood4) {
                    generalModifier4 = villageWood4 / wood4
                    spearnew4 = Math.floor(generalModifier4 * spear4) - 1
                    swordnew4 = Math.floor(generalModifier4 * sword4) - 1
                    axenew4 = Math.floor(generalModifier4 * axe4) - 1
                    archernew4 = Math.floor(generalModifier4 * archer4) - 1
                    lcnew4 = Math.floor(generalModifier4 * lc4) - 1
                    manew4 = Math.floor(generalModifier4 * ma4) - 1
                    ramnew4 = Math.floor(generalModifier4 * ram4) - 1
                    catapultnew4 = Math.floor(generalModifier4 * catapult4) - 1
                    hcnew4 = Math.floor(generalModifier4 * hc4) - 1
                } else if (wood4 <= villageWood4 && (spearToRecruit4 >= minimal4 || hcToRecruit4 >= minimal4 || catapultToRecruit4 >= minimal4 || swordToRecruit4 >= minimal4 || axeToRecruit4 >= minimal4 || archerToRecruit4 >= minimal4 || lcToRecruit4 >= minimal4 || maToRecruit4 >= minimal4 || ramToRecruit4 >= minimal4) && clay4 >= villageClay4 && iron4 <= villageIron4 && food4 <= villageFood4) {
                    generalModifier4 = villageClay4 / clay4
                    spearnew4 = Math.floor(generalModifier4 * spear4) - 1
                    swordnew4 = Math.floor(generalModifier4 * sword4) - 1
                    axenew4 = Math.floor(generalModifier4 * axe4) - 1
                    archernew4 = Math.floor(generalModifier4 * archer4) - 1
                    lcnew4 = Math.floor(generalModifier4 * lc4) - 1
                    manew4 = Math.floor(generalModifier4 * ma4) - 1
                    ramnew4 = Math.floor(generalModifier4 * ram4) - 1
                    catapultnew4 = Math.floor(generalModifier4 * catapult4) - 1
                    hcnew4 = Math.floor(generalModifier4 * hc4) - 1
                } else if (wood4 <= villageWood4 && (spearToRecruit4 >= minimal4 || hcToRecruit4 >= minimal4 || catapultToRecruit4 >= minimal4 || swordToRecruit4 >= minimal4 || axeToRecruit4 >= minimal4 || archerToRecruit4 >= minimal4 || lcToRecruit4 >= minimal4 || maToRecruit4 >= minimal4 || ramToRecruit4 >= minimal4) && clay4 <= villageClay4 && iron4 >= villageIron4 && food4 <= villageFood4) {
                    generalModifier4 = villageIron4 / iron4
                    spearnew4 = Math.floor(generalModifier4 * spear4) - 1
                    swordnew4 = Math.floor(generalModifier4 * sword4) - 1
                    axenew4 = Math.floor(generalModifier4 * axe4) - 1
                    archernew4 = Math.floor(generalModifier4 * archer4) - 1
                    lcnew4 = Math.floor(generalModifier4 * lc4) - 1
                    manew4 = Math.floor(generalModifier4 * ma4) - 1
                    ramnew4 = Math.floor(generalModifier4 * ram4) - 1
                    catapultnew4 = Math.floor(generalModifier4 * catapult4) - 1
                    hcnew4 = Math.floor(generalModifier4 * hc4) - 1
                } else if (wood4 <= villageWood4 && (spearToRecruit4 >= minimal4 || hcToRecruit4 >= minimal4 || catapultToRecruit4 >= minimal4 || swordToRecruit4 >= minimal4 || axeToRecruit4 >= minimal4 || archerToRecruit4 >= minimal4 || lcToRecruit4 >= minimal4 || maToRecruit4 >= minimal4 || ramToRecruit4 >= minimal4) && clay4 <= villageClay4 && iron4 <= villageIron4 && food4 >= villageFood4) {
                    generalModifier4 = villageFood4 / food4
                    spearnew4 = Math.floor(generalModifier4 * spear4) - 1
                    swordnew4 = Math.floor(generalModifier4 * sword4) - 1
                    axenew4 = Math.floor(generalModifier4 * axe4) - 1
                    archernew4 = Math.floor(generalModifier4 * archer4) - 1
                    lcnew4 = Math.floor(generalModifier4 * lc4) - 1
                    manew4 = Math.floor(generalModifier4 * ma4) - 1
                    ramnew4 = Math.floor(generalModifier4 * ram4) - 1
                    catapultnew4 = Math.floor(generalModifier4 * catapult4) - 1
                    hcnew4 = Math.floor(generalModifier4 * hc4) - 1
                } else if (wood4 >= villageWood4 && (spearToRecruit4 >= minimal4 || hcToRecruit4 >= minimal4 || catapultToRecruit4 >= minimal4 || swordToRecruit4 >= minimal4 || axeToRecruit4 >= minimal4 || archerToRecruit4 >= minimal4 || lcToRecruit4 >= minimal4 || maToRecruit4 >= minimal4 || ramToRecruit4 >= minimal4) && clay4 >= villageClay4 && iron4 <= villageIron4 && food4 <= villageFood4) {
                    woodModifier4 = villageWood4 / wood4
                    clayModifier4 = villageClay4 / clay4
                    if (clayModifier4 > woodModifier4) {
                        spearnew4 = Math.floor(woodModifier4 * spear4) - 1
                        swordnew4 = Math.floor(woodModifier4 * sword4) - 1
                        axenew4 = Math.floor(woodModifier4 * axe4) - 1
                        archernew4 = Math.floor(woodModifier4 * archer4) - 1
                        lcnew4 = Math.floor(woodModifier4 * lc4) - 1
                        manew4 = Math.floor(woodModifier4 * ma4) - 1
                        ramnew4 = Math.floor(woodModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(woodModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(woodModifier4 * hc4) - 1
                    } else {
                        spearnew4 = Math.floor(clayModifier4 * spear4) - 1
                        swordnew4 = Math.floor(clayModifier4 * sword4) - 1
                        axenew4 = Math.floor(clayModifier4 * axe4) - 1
                        archernew4 = Math.floor(clayModifier4 * archer4) - 1
                        lcnew4 = Math.floor(clayModifier4 * lc4) - 1
                        manew4 = Math.floor(clayModifier4 * ma4) - 1
                        ramnew4 = Math.floor(clayModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(clayModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(clayModifier4 * hc4) - 1
                    }
                } else if (wood4 <= villageWood4 && (spearToRecruit4 >= minimal4 || hcToRecruit4 >= minimal4 || catapultToRecruit4 >= minimal4 || swordToRecruit4 >= minimal4 || axeToRecruit4 >= minimal4 || archerToRecruit4 >= minimal4 || lcToRecruit4 >= minimal4 || maToRecruit4 >= minimal4 || ramToRecruit4 >= minimal4) && clay4 >= villageClay4 && iron4 >= villageIron4 && food4 <= villageFood4) {
                    ironModifier4 = villageIron4 / iron4
                    clayModifier4 = villageClay4 / clay4
                    if (clayModifier4 > ironModifier4) {
                        spearnew4 = Math.floor(ironModifier4 * spear4) - 1
                        swordnew4 = Math.floor(ironModifier4 * sword4) - 1
                        axenew4 = Math.floor(ironModifier4 * axe4) - 1
                        archernew4 = Math.floor(ironModifier4 * archer4) - 1
                        lcnew4 = Math.floor(ironModifier4 * lc4) - 1
                        manew4 = Math.floor(ironModifier4 * ma4) - 1
                        ramnew4 = Math.floor(ironModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(ironModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(ironModifier4 * hc4) - 1
                    } else {
                        spearnew4 = Math.floor(clayModifier4 * spear4) - 1
                        swordnew4 = Math.floor(clayModifier4 * sword4) - 1
                        axenew4 = Math.floor(clayModifier4 * axe4) - 1
                        archernew4 = Math.floor(clayModifier4 * archer4) - 1
                        lcnew4 = Math.floor(clayModifier4 * lc4) - 1
                        manew4 = Math.floor(clayModifier4 * ma4) - 1
                        ramnew4 = Math.floor(clayModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(clayModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(clayModifier4 * hc4) - 1
                    }
                } else if (wood4 <= villageWood4 && (spearToRecruit4 >= minimal4 || hcToRecruit4 >= minimal4 || catapultToRecruit4 >= minimal4 || swordToRecruit4 >= minimal4 || axeToRecruit4 >= minimal4 || archerToRecruit4 >= minimal4 || lcToRecruit4 >= minimal4 || maToRecruit4 >= minimal4 || ramToRecruit4 >= minimal4) && clay4 >= villageClay4 && iron4 <= villageIron4 && food4 >= villageFood4) {
                    foodModifier4 = villageFood4 / food4
                    clayModifier4 = villageClay4 / clay4
                    if (clayModifier4 > foodModifier4) {
                        spearnew4 = Math.floor(foodModifier4 * spear4) - 1
                        swordnew4 = Math.floor(foodModifier4 * sword4) - 1
                        axenew4 = Math.floor(foodModifier4 * axe4) - 1
                        archernew4 = Math.floor(foodModifier4 * archer4) - 1
                        lcnew4 = Math.floor(foodModifier4 * lc4) - 1
                        manew4 = Math.floor(foodModifier4 * ma4) - 1
                        ramnew4 = Math.floor(foodModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(foodModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(foodModifier4 * hc4) - 1
                    } else {
                        spearnew4 = Math.floor(clayModifier4 * spear4) - 1
                        swordnew4 = Math.floor(clayModifier4 * sword4) - 1
                        axenew4 = Math.floor(clayModifier4 * axe4) - 1
                        archernew4 = Math.floor(clayModifier4 * archer4) - 1
                        lcnew4 = Math.floor(clayModifier4 * lc4) - 1
                        manew4 = Math.floor(clayModifier4 * ma4) - 1
                        ramnew4 = Math.floor(clayModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(clayModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(clayModifier4 * hc4) - 1
                    }
                } else if (wood4 >= villageWood4 && (spearToRecruit4 >= minimal4 || hcToRecruit4 >= minimal4 || catapultToRecruit4 >= minimal4 || swordToRecruit4 >= minimal4 || axeToRecruit4 >= minimal4 || archerToRecruit4 >= minimal4 || lcToRecruit4 >= minimal4 || maToRecruit4 >= minimal4 || ramToRecruit4 >= minimal4) && clay4 <= villageClay4 && iron4 >= villageIron4 && food4 <= villageFood4) {
                    woodModifier4 = villageWood4 / wood4
                    ironModifier4 = villageIron4 / iron4
                    if (ironModifier4 > woodModifier4) {
                        spearnew4 = Math.floor(woodModifier4 * spear4) - 1
                        swordnew4 = Math.floor(woodModifier4 * sword4) - 1
                        axenew4 = Math.floor(woodModifier4 * axe4) - 1
                        archernew4 = Math.floor(woodModifier4 * archer4) - 1
                        lcnew4 = Math.floor(woodModifier4 * lc4) - 1
                        manew4 = Math.floor(woodModifier4 * ma4) - 1
                        ramnew4 = Math.floor(woodModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(woodModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(woodModifier4 * hc4) - 1
                    } else {
                        spearnew4 = Math.floor(ironModifier4 * spear4) - 1
                        swordnew4 = Math.floor(ironModifier4 * sword4) - 1
                        axenew4 = Math.floor(ironModifier4 * axe4) - 1
                        archernew4 = Math.floor(ironModifier4 * archer4) - 1
                        lcnew4 = Math.floor(ironModifier4 * lc4) - 1
                        manew4 = Math.floor(ironModifier4 * ma4) - 1
                        ramnew4 = Math.floor(ironModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(ironModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(ironModifier4 * hc4) - 1
                    }
                } else if (wood4 <= villageWood4 && (spearToRecruit4 >= minimal4 || hcToRecruit4 >= minimal4 || catapultToRecruit4 >= minimal4 || swordToRecruit4 >= minimal4 || axeToRecruit4 >= minimal4 || archerToRecruit4 >= minimal4 || lcToRecruit4 >= minimal4 || maToRecruit4 >= minimal4 || ramToRecruit4 >= minimal4) && clay4 <= villageClay4 && iron4 >= villageIron4 && food4 >= villageFood4) {
                    foodModifier4 = villageFood4 / food4
                    ironModifier4 = villageIron4 / iron4
                    if (ironModifier4 > foodModifier4) {
                        spearnew4 = Math.floor(foodModifier4 * spear4) - 1
                        swordnew4 = Math.floor(foodModifier4 * sword4) - 1
                        axenew4 = Math.floor(foodModifier4 * axe4) - 1
                        archernew4 = Math.floor(foodModifier4 * archer4) - 1
                        lcnew4 = Math.floor(foodModifier4 * lc4) - 1
                        manew4 = Math.floor(foodModifier4 * ma4) - 1
                        ramnew4 = Math.floor(foodModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(foodModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(foodModifier4 * hc4) - 1
                    } else {
                        spearnew4 = Math.floor(ironModifier4 * spear4) - 1
                        swordnew4 = Math.floor(ironModifier4 * sword4) - 1
                        axenew4 = Math.floor(ironModifier4 * axe4) - 1
                        archernew4 = Math.floor(ironModifier4 * archer4) - 1
                        lcnew4 = Math.floor(ironModifier4 * lc4) - 1
                        manew4 = Math.floor(ironModifier4 * ma4) - 1
                        ramnew4 = Math.floor(ironModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(ironModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(ironModifier4 * hc4) - 1
                    }
                } else if (wood4 >= villageWood4 && (spearToRecruit4 >= minimal4 || hcToRecruit4 >= minimal4 || catapultToRecruit4 >= minimal4 || swordToRecruit4 >= minimal4 || axeToRecruit4 >= minimal4 || archerToRecruit4 >= minimal4 || lcToRecruit4 >= minimal4 || maToRecruit4 >= minimal4 || ramToRecruit4 >= minimal4) && clay4 <= villageClay4 && iron4 <= villageIron4 && food4 >= villageFood4) {
                    woodModifier4 = villageWood4 / wood4
                    foodModifier4 = villageFood4 / food4
                    if (foodModifier4 > woodModifier4) {
                        spearnew4 = Math.floor(woodModifier4 * spear4) - 1
                        swordnew4 = Math.floor(woodModifier4 * sword4) - 1
                        axenew4 = Math.floor(woodModifier4 * axe4) - 1
                        archernew4 = Math.floor(woodModifier4 * archer4) - 1
                        lcnew4 = Math.floor(woodModifier4 * lc4) - 1
                        manew4 = Math.floor(woodModifier4 * ma4) - 1
                        ramnew4 = Math.floor(woodModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(woodModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(woodModifier4 * hc4) - 1
                    } else {
                        spearnew4 = Math.floor(foodModifier4 * spear4) - 1
                        swordnew4 = Math.floor(foodModifier4 * sword4) - 1
                        axenew4 = Math.floor(foodModifier4 * axe4) - 1
                        archernew4 = Math.floor(foodModifier4 * archer4) - 1
                        lcnew4 = Math.floor(foodModifier4 * lc4) - 1
                        manew4 = Math.floor(foodModifier4 * ma4) - 1
                        ramnew4 = Math.floor(foodModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(foodModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(foodModifier4 * hc4) - 1
                    }
                } else if (wood4 >= villageWood4 && (spearToRecruit4 >= minimal4 || hcToRecruit4 >= minimal4 || catapultToRecruit4 >= minimal4 || swordToRecruit4 >= minimal4 || axeToRecruit4 >= minimal4 || archerToRecruit4 >= minimal4 || lcToRecruit4 >= minimal4 || maToRecruit4 >= minimal4 || ramToRecruit4 >= minimal4) && clay4 >= villageClay4 && iron4 >= villageIron4 && food4 <= villageFood4) {
                    woodModifier4 = villageWood4 / wood4
                    ironModifier4 = villageIron4 / iron4
                    clayModifier4 = villageClay4 / clay4
                    if (clayModifier4 > ironModifier4 && woodModifier4 > ironModifier4) {
                        spearnew4 = Math.floor(ironModifier4 * spear4) - 1
                        swordnew4 = Math.floor(ironModifier4 * sword4) - 1
                        axenew4 = Math.floor(ironModifier4 * axe4) - 1
                        archernew4 = Math.floor(ironModifier4 * archer4) - 1
                        lcnew4 = Math.floor(ironModifier4 * lc4) - 1
                        manew4 = Math.floor(ironModifier4 * ma4) - 1
                        ramnew4 = Math.floor(ironModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(ironModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(ironModifier4 * hc4) - 1
                    } else if (ironModifier4 > clayModifier4 && woodModifier4 > clayModifier4) {
                        spearnew4 = Math.floor(clayModifier4 * spear4) - 1
                        swordnew4 = Math.floor(clayModifier4 * sword4) - 1
                        axenew4 = Math.floor(clayModifier4 * axe4) - 1
                        archernew4 = Math.floor(clayModifier4 * archer4) - 1
                        lcnew4 = Math.floor(clayModifier4 * lc4) - 1
                        manew4 = Math.floor(clayModifier4 * ma4) - 1
                        ramnew4 = Math.floor(clayModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(clayModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(clayModifier4 * hc4) - 1
                    } else if (ironModifier4 > woodModifier4 && clayModifier4 > woodModifier4) {
                        spearnew4 = Math.floor(woodModifier4 * spear4) - 1
                        swordnew4 = Math.floor(woodModifier4 * sword4) - 1
                        axenew4 = Math.floor(woodModifier4 * axe4) - 1
                        archernew4 = Math.floor(woodModifier4 * archer4) - 1
                        lcnew4 = Math.floor(woodModifier4 * lc4) - 1
                        manew4 = Math.floor(woodModifier4 * ma4) - 1
                        ramnew4 = Math.floor(woodModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(woodModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(woodModifier4 * hc4) - 1
                    } else {
                        console.log('Nie znam przyczyny :P')
                    }
                } else if (wood4 >= villageWood4 && (spearToRecruit4 >= minimal4 || hcToRecruit4 >= minimal4 || catapultToRecruit4 >= minimal4 || swordToRecruit4 >= minimal4 || axeToRecruit4 >= minimal4 || archerToRecruit4 >= minimal4 || lcToRecruit4 >= minimal4 || maToRecruit4 >= minimal4 || ramToRecruit4 >= minimal4) && clay4 >= villageClay4 && iron4 <= villageIron4 && food4 >= villageFood4) {
                    woodModifier4 = villageWood4 / wood4
                    foodModifier4 = villageFood4 / food4
                    clayModifier4 = villageClay4 / clay4
                    if (clayModifier4 > foodModifier4 && woodModifier4 > foodModifier4) {
                        spearnew4 = Math.floor(foodModifier4 * spear4) - 1
                        swordnew4 = Math.floor(foodModifier4 * sword4) - 1
                        axenew4 = Math.floor(foodModifier4 * axe4) - 1
                        archernew4 = Math.floor(foodModifier4 * archer4) - 1
                        lcnew4 = Math.floor(foodModifier4 * lc4) - 1
                        manew4 = Math.floor(foodModifier4 * ma4) - 1
                        ramnew4 = Math.floor(foodModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(foodModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(foodModifier4 * hc4) - 1
                    } else if (foodModifier4 > clayModifier4 && woodModifier4 > clayModifier4) {
                        spearnew4 = Math.floor(clayModifier4 * spear4) - 1
                        swordnew4 = Math.floor(clayModifier4 * sword4) - 1
                        axenew4 = Math.floor(clayModifier4 * axe4) - 1
                        archernew4 = Math.floor(clayModifier4 * archer4) - 1
                        lcnew4 = Math.floor(clayModifier4 * lc4) - 1
                        manew4 = Math.floor(clayModifier4 * ma4) - 1
                        ramnew4 = Math.floor(clayModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(clayModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(clayModifier4 * hc4) - 1
                    } else if (foodModifier4 > woodModifier4 && clayModifier4 > woodModifier4) {
                        spearnew4 = Math.floor(woodModifier4 * spear4) - 1
                        swordnew4 = Math.floor(woodModifier4 * sword4) - 1
                        axenew4 = Math.floor(woodModifier4 * axe4) - 1
                        archernew4 = Math.floor(woodModifier4 * archer4) - 1
                        lcnew4 = Math.floor(woodModifier4 * lc4) - 1
                        manew4 = Math.floor(woodModifier4 * ma4) - 1
                        ramnew4 = Math.floor(woodModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(woodModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(woodModifier4 * hc4) - 1
                    } else {
                        console.log('Nie znam przyczyny :P')
                    }
                } else if (wood4 >= villageWood4 && (spearToRecruit4 >= minimal4 || hcToRecruit4 >= minimal4 || catapultToRecruit4 >= minimal4 || swordToRecruit4 >= minimal4 || axeToRecruit4 >= minimal4 || archerToRecruit4 >= minimal4 || lcToRecruit4 >= minimal4 || maToRecruit4 >= minimal4 || ramToRecruit4 >= minimal4) && clay4 <= villageClay4 && iron4 >= villageIron4 && food4 >= villageFood4) {
                    woodModifier4 = villageWood4 / wood4
                    foodModifier4 = villageFood4 / food4
                    ironModifier4 = villageIron4 / iron4
                    if (foodModifier4 > ironModifier4 && woodModifier4 > ironModifier4) {
                        spearnew4 = Math.floor(ironModifier4 * spear4) - 1
                        swordnew4 = Math.floor(ironModifier4 * sword4) - 1
                        axenew4 = Math.floor(ironModifier4 * axe4) - 1
                        archernew4 = Math.floor(ironModifier4 * archer4) - 1
                        lcnew4 = Math.floor(ironModifier4 * lc4) - 1
                        manew4 = Math.floor(ironModifier4 * ma4) - 1
                        ramnew4 = Math.floor(ironModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(ironModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(ironModifier4 * hc4) - 1
                    } else if (ironModifier4 > foodModifier4 && woodModifier4 > foodModifier4) {
                        spearnew4 = Math.floor(foodModifier4 * spear4) - 1
                        swordnew4 = Math.floor(foodModifier4 * sword4) - 1
                        axenew4 = Math.floor(foodModifier4 * axe4) - 1
                        archernew4 = Math.floor(foodModifier4 * archer4) - 1
                        lcnew4 = Math.floor(foodModifier4 * lc4) - 1
                        manew4 = Math.floor(foodModifier4 * ma4) - 1
                        ramnew4 = Math.floor(foodModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(foodModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(foodModifier4 * hc4) - 1
                    } else if (ironModifier4 > woodModifier4 && foodModifier4 > woodModifier4) {
                        spearnew4 = Math.floor(woodModifier4 * spear4) - 1
                        swordnew4 = Math.floor(woodModifier4 * sword4) - 1
                        axenew4 = Math.floor(woodModifier4 * axe4) - 1
                        archernew4 = Math.floor(woodModifier4 * archer4) - 1
                        lcnew4 = Math.floor(woodModifier4 * lc4) - 1
                        manew4 = Math.floor(woodModifier4 * ma4) - 1
                        ramnew4 = Math.floor(woodModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(woodModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(woodModifier4 * hc4) - 1
                    } else {
                        console.log('Nie znam przyczyny :P')
                    }
                } else if (wood4 <= villageWood4 && (spearToRecruit4 >= minimal4 || hcToRecruit4 >= minimal4 || catapultToRecruit4 >= minimal4 || swordToRecruit4 >= minimal4 || axeToRecruit4 >= minimal4 || archerToRecruit4 >= minimal4 || lcToRecruit4 >= minimal4 || maToRecruit4 >= minimal4 || ramToRecruit4 >= minimal4) && clay4 >= villageClay4 && iron4 >= villageIron4 && food4 >= villageFood4) {
                    foodModifier4 = villageFood4 / food4
                    ironModifier4 = villageIron4 / iron4
                    clayModifier4 = villageClay4 / clay4
                    if (clayModifier4 > ironModifier4 && foodModifier4 > ironModifier4) {
                        spearnew4 = Math.floor(ironModifier4 * spear4) - 1
                        swordnew4 = Math.floor(ironModifier4 * sword4) - 1
                        axenew4 = Math.floor(ironModifier4 * axe4) - 1
                        archernew4 = Math.floor(ironModifier4 * archer4) - 1
                        lcnew4 = Math.floor(ironModifier4 * lc4) - 1
                        manew4 = Math.floor(ironModifier4 * ma4) - 1
                        ramnew4 = Math.floor(ironModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(ironModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(ironModifier4 * hc4) - 1
                    } else if (ironModifier4 > clayModifier4 && foodModifier4 > clayModifier4) {
                        spearnew4 = Math.floor(clayModifier4 * spear4) - 1
                        swordnew4 = Math.floor(clayModifier4 * sword4) - 1
                        axenew4 = Math.floor(clayModifier4 * axe4) - 1
                        archernew4 = Math.floor(clayModifier4 * archer4) - 1
                        lcnew4 = Math.floor(clayModifier4 * lc4) - 1
                        manew4 = Math.floor(clayModifier4 * ma4) - 1
                        ramnew4 = Math.floor(clayModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(clayModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(clayModifier4 * hc4) - 1
                    } else if (ironModifier4 > foodModifier4 && clayModifier4 > foodModifier4) {
                        spearnew4 = Math.floor(foodModifier4 * spear4) - 1
                        swordnew4 = Math.floor(foodModifier4 * sword4) - 1
                        axenew4 = Math.floor(foodModifier4 * axe4) - 1
                        archernew4 = Math.floor(foodModifier4 * archer4) - 1
                        lcnew4 = Math.floor(foodModifier4 * lc4) - 1
                        manew4 = Math.floor(foodModifier4 * ma4) - 1
                        ramnew4 = Math.floor(foodModifier4 * ram4) - 1
                        catapultnew4 = Math.floor(foodModifier4 * catapult4) - 1
                        hcnew4 = Math.floor(foodModifier4 * hc4) - 1
                    } else {
                        console.log('Nie znam przyczyny :P')
                    }
                }
                setInterval(function() {
                    if (running == false) {
                        return
                    }
                }, 5000)
                setTimeout(function() {
                    recruitSpear4()
                }, unitInterval)
                setTimeout(function() {
                    if (Barracks4 >= 3) {
                        recruitSword4()
                    }
                }, unitInterval * 2)
                setTimeout(function() {
                    if (Barracks4 >= 5) {
                        recruitAxe4()
                    }
                }, unitInterval * 3)
                setTimeout(function() {
                    if (Barracks4 >= 9) {
                        recruitArcher4()
                    }
                }, unitInterval * 4)
                setTimeout(function() {
                    if (Barracks4 >= 11) {
                        recruitLc4()
                    }
                }, unitInterval * 5)
                setTimeout(function() {
                    if (Barracks4 >= 13) {
                        recruitMa4()
                    }
                }, unitInterval * 6)
                setTimeout(function() {
                    if (Barracks4 >= 15) {
                        recruitRam4()
                    }
                }, unitInterval * 7)
                setTimeout(function() {
                    if (Barracks4 >= 17) {
                        recruitCatapult4()
                    }
                }, unitInterval * 8)
                setTimeout(function() {
                    if (Barracks4 >= 21) {
                        recruitHc4()
                    }
                }, unitInterval * 9)
            }

            function recruitSpear4() {
                if (spearnew4 >= minimal4) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'spear',
                        amount: spearnew4
                    })
                    unit = 'spear'
                    logData = [
                        unit,
                        spearnew4
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, spearnew4)
                } else {
                    console.log('Niezrekrutowano pikinierów - mniej niż wskazane minimum')
                }
            }

            function recruitSword4() {
                if (swordnew4 >= minimal4) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'sword',
                        amount: swordnew4
                    })
                    unit = 'sword'
                    logData = [
                        unit,
                        swordnew4
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, swordnew4)
                } else {
                    console.log('Niezrekrutowano mieczników - mniej niż wskazane minimum')
                }
            }

            function recruitAxe4() {
                if (axenew4 >= minimal4) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'axe',
                        amount: axenew4
                    })
                    unit = 'axe'
                    logData = [
                        unit,
                        axenew4
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, axenew4)
                } else {
                    console.log('Niezrekrutowano toporników - mniej niż wskazane minimum')
                }
            }

            function recruitArcher4() {
                if (archernew4 >= minimal4) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'archer',
                        amount: archernew4
                    })
                    unit = 'archer'
                    logData = [
                        unit,
                        archernew4
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, archernew4)
                } else {
                    console.log('Niezrekrutowano łuczników - mniej niż wskazane minimum')
                }
            }

            function recruitLc4() {
                if (lcnew4 >= minimal4) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'light_cavalry',
                        amount: lcnew4
                    })
                    unit = 'light_cavalry'
                    logData = [
                        unit,
                        lcnew4
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, lcnew4)
                } else {
                    console.log('Niezrekrutowano lk - mniej niż wskazane minimum')
                }
            }

            function recruitMa4() {
                if (manew4 >= minimal4) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'mounted_archer',
                        amount: manew4
                    })
                    unit = 'mounted_archer'
                    logData = [
                        unit,
                        manew4
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, manew4)
                } else {
                    console.log('Niezrekrutowano łk - mniej niż wskazane minimum')
                }
            }

            function recruitRam4() {
                if (ramnew4 >= minimal4) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'ram',
                        amount: ramnew4
                    })
                    unit = 'ram'
                    logData = [
                        unit,
                        ramnew4
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, ramnew4)
                } else {
                    console.log('Niezrekrutowano taranów - mniej niż wskazane minimum')
                }
            }

            function recruitCatapult4() {
                if (catapultnew4 >= minimal4) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'catapult',
                        amount: catapultnew4
                    })
                    unit = 'catapult'
                    logData = [
                        unit,
                        catapultnew4
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, catapultnew4)
                } else {
                    console.log('Niezrekrutowano katapult - mniej niż wskazane minimum')
                }
            }

            function recruitHc4() {
                if (hcnew4 >= minimal4) {
                    socketService.emit(routeProvider.BARRACKS_RECRUIT, {
                        village_id: villageIdSet,
                        unit_type: 'heavy_cavalry',
                        amount: hcnew4
                    })
                    unit = 'heavy_cavalry'
                    logData = [
                        unit,
                        hcnew4
                    ]
                    eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, logData)
                    addLog(villageIdSet, unit, hcnew4)
                } else {
                    console.log('Niezrekrutowano ck - mniej niż wskazane minimum')
                }
            }
        }

        function getVillageData() {
            var player = modelDataService.getSelectedCharacter()
            var villages = player.getVillageList()
            unitInterval = recruitQueueSettings[SETTINGS.UNIT_QUEUE_INTERVAL] * 1000
            var interval = recruitQueueSettings[SETTINGS.GROUP_QUEUE_INTERVAL] * 1000
            var interval2 = (villages.length * recruitQueueSettings[SETTINGS.GROUP_QUEUE_INTERVAL] * 1000) + (recruitQueueSettings[SETTINGS.GROUP_QUEUE_INTERVAL] * 1000)
            var interval3 = (villages.length * recruitQueueSettings[SETTINGS.GROUP_QUEUE_INTERVAL] * 1000 * 2) + (recruitQueueSettings[SETTINGS.GROUP_QUEUE_INTERVAL] * 1000)
            var interval4 = (villages.length * recruitQueueSettings[SETTINGS.GROUP_QUEUE_INTERVAL] * 1000 * 3) + (recruitQueueSettings[SETTINGS.GROUP_QUEUE_INTERVAL] * 1000)
            if (selectedGroup1) {
                villages.forEach(function(village, index) {
                    setTimeout(function() {
                        groupVillages1.forEach(function(id1) {
                            if (village.data.villageId == id1) {
                                console.log('wioska:' + village.getName())
                                villageIdSet = village.getId()
                                spearAmount = village.unitInfo.units.spear.own + village.unitInfo.units.spear.recruiting
                                swordAmount = village.unitInfo.units.sword.own + village.unitInfo.units.sword.recruiting
                                axeAmount = village.unitInfo.units.axe.own + village.unitInfo.units.axe.recruiting
                                archerAmount = village.unitInfo.units.archer.own + village.unitInfo.units.archer.recruiting
                                light_cavalryAmount = village.unitInfo.units.light_cavalry.own + village.unitInfo.units.light_cavalry.recruiting
                                mounted_archerAmount = village.unitInfo.units.mounted_archer.own + village.unitInfo.units.mounted_archer.recruiting
                                ramAmount = village.unitInfo.units.ram.own + village.unitInfo.units.ram.recruiting
                                catapultAmount = village.unitInfo.units.catapult.own + village.unitInfo.units.catapult.recruiting
                                heavy_cavalryAmount = village.unitInfo.units.heavy_cavalry.own + village.unitInfo.units.heavy_cavalry.recruiting
                                Barracks1 = village.buildingData.data.barracks.level
                                queue1 = village.buildingQueue.data.queue
                                recruitingQueues = village.getRecruitingQueues()
                                barracksQueue1 = recruitingQueues.barracks.jobs
                                var resources = village.getResources()
                                var computed = resources.getComputed()
                                var woodComputed = computed.wood
                                var clayComputed = computed.clay
                                var ironComputed = computed.iron
                                var foodComputed = computed.food
                                villageFood1 = foodComputed.currentStock
                                villageWood1 = woodComputed.currentStock
                                villageClay1 = clayComputed.currentStock
                                villageIron1 = ironComputed.currentStock
                                barracksQueue1.forEach(function(job) {
                                    recruitingTime = job.clientRecruitingTime
                                    totalRecruitingTime = (job.data.time_completed - job.data.start_time) * 1000
                                    recruitingTimeToFinish = totalRecruitingTime - recruitingTime
                                    barracksRecrutingTime1.push(recruitingTimeToFinish)
                                })
                                modifier1Get()
                            }
                        })
                    }, index * interval)
                })
            } else {
                console.log('Nie wybrano grupy nr1')
            }
            if (selectedGroup2) {
                villages.forEach(function(village, index) {
                    setTimeout(function() {
                        groupVillages2.forEach(function(id2) {
                            if (village.data.villageId == id2) {
                                console.log('wioska:' + village.getName())
                                villageIdSet = village.getId()
                                spearAmount = village.unitInfo.units.spear.own + village.unitInfo.units.spear.recruiting
                                swordAmount = village.unitInfo.units.sword.own + village.unitInfo.units.sword.recruiting
                                axeAmount = village.unitInfo.units.axe.own + village.unitInfo.units.axe.recruiting
                                archerAmount = village.unitInfo.units.archer.own + village.unitInfo.units.archer.recruiting
                                light_cavalryAmount = village.unitInfo.units.light_cavalry.own + village.unitInfo.units.light_cavalry.recruiting
                                mounted_archerAmount = village.unitInfo.units.mounted_archer.own + village.unitInfo.units.mounted_archer.recruiting
                                ramAmount = village.unitInfo.units.ram.own + village.unitInfo.units.ram.recruiting
                                catapultAmount = village.unitInfo.units.catapult.own + village.unitInfo.units.catapult.recruiting
                                heavy_cavalryAmount = village.unitInfo.units.heavy_cavalry.own + village.unitInfo.units.heavy_cavalry.recruiting
                                Barracks2 = village.buildingData.data.barracks.level
                                queue2 = village.buildingQueue.data.queue
                                recruitingQueues = village.getRecruitingQueues()
                                barracksQueue2 = recruitingQueues.barracks.jobs
                                var resources = village.getResources()
                                var computed = resources.getComputed()
                                var woodComputed = computed.wood
                                var clayComputed = computed.clay
                                var ironComputed = computed.iron
                                var foodComputed = computed.food
                                villageFood2 = foodComputed.currentStock
                                villageWood2 = woodComputed.currentStock
                                villageClay2 = clayComputed.currentStock
                                villageIron2 = ironComputed.currentStock
                                barracksQueue2.forEach(function(job) {
                                    recruitingTime = job.clientRecruitingTime
                                    totalRecruitingTime = (job.data.time_completed - job.data.start_time) * 1000
                                    recruitingTimeToFinish = totalRecruitingTime - recruitingTime
                                    barracksRecrutingTime2.push(recruitingTimeToFinish)
                                })
                                modifier2Get()
                            }
                        })
                    }, (index * interval) + interval2)
                })
            } else {
                console.log('Nie wybrano grupy nr2')
            }
            if (selectedGroup3) {
                villages.forEach(function(village, index) {
                    setTimeout(function() {
                        groupVillages3.forEach(function(id3) {
                            if (village.data.villageId == id3) {
                                console.log('wioska:' + village.getName())
                                villageIdSet = village.getId()
                                spearAmount = village.unitInfo.units.spear.own + village.unitInfo.units.spear.recruiting
                                swordAmount = village.unitInfo.units.sword.own + village.unitInfo.units.sword.recruiting
                                axeAmount = village.unitInfo.units.axe.own + village.unitInfo.units.axe.recruiting
                                archerAmount = village.unitInfo.units.archer.own + village.unitInfo.units.archer.recruiting
                                light_cavalryAmount = village.unitInfo.units.light_cavalry.own + village.unitInfo.units.light_cavalry.recruiting
                                mounted_archerAmount = village.unitInfo.units.mounted_archer.own + village.unitInfo.units.mounted_archer.recruiting
                                ramAmount = village.unitInfo.units.ram.own + village.unitInfo.units.ram.recruiting
                                catapultAmount = village.unitInfo.units.catapult.own + village.unitInfo.units.catapult.recruiting
                                heavy_cavalryAmount = village.unitInfo.units.heavy_cavalry.own + village.unitInfo.units.heavy_cavalry.recruiting
                                Barracks3 = village.buildingData.data.barracks.level
                                queue3 = village.buildingQueue.data.queue
                                recruitingQueues = village.getRecruitingQueues()
                                barracksQueue3 = recruitingQueues.barracks.jobs
                                var resources = village.getResources()
                                var computed = resources.getComputed()
                                var woodComputed = computed.wood
                                var clayComputed = computed.clay
                                var ironComputed = computed.iron
                                var foodComputed = computed.food
                                villageFood3 = foodComputed.currentStock
                                villageWood3 = woodComputed.currentStock
                                villageClay3 = clayComputed.currentStock
                                villageIron3 = ironComputed.currentStock
                                barracksQueue3.forEach(function(job) {
                                    recruitingTime = job.clientRecruitingTime
                                    totalRecruitingTime = (job.data.time_completed - job.data.start_time) * 1000
                                    recruitingTimeToFinish = totalRecruitingTime - recruitingTime
                                    barracksRecrutingTime3.push(recruitingTimeToFinish)
                                })
                                modifier3Get()
                            }
                        })
                    }, (index * interval) + interval3)
                })
            } else {
                console.log('Nie wybrano grupy nr3')
            }
            if (selectedGroup4) {
                villages.forEach(function(village, index) {
                    setTimeout(function() {
                        groupVillages4.forEach(function(id4) {
                            if (village.data.villageId == id4) {
                                console.log('wioska:' + village.getName())
                                villageIdSet = village.getId()
                                spearAmount = village.unitInfo.units.spear.own + village.unitInfo.units.spear.recruiting
                                swordAmount = village.unitInfo.units.sword.own + village.unitInfo.units.sword.recruiting
                                axeAmount = village.unitInfo.units.axe.own + village.unitInfo.units.axe.recruiting
                                archerAmount = village.unitInfo.units.archer.own + village.unitInfo.units.archer.recruiting
                                light_cavalryAmount = village.unitInfo.units.light_cavalry.own + village.unitInfo.units.light_cavalry.recruiting
                                mounted_archerAmount = village.unitInfo.units.mounted_archer.own + village.unitInfo.units.mounted_archer.recruiting
                                ramAmount = village.unitInfo.units.ram.own + village.unitInfo.units.ram.recruiting
                                catapultAmount = village.unitInfo.units.catapult.own + village.unitInfo.units.catapult.recruiting
                                heavy_cavalryAmount = village.unitInfo.units.heavy_cavalry.own + village.unitInfo.units.heavy_cavalry.recruiting
                                Barracks4 = village.buildingData.data.barracks.level
                                queue4 = village.buildingQueue.data.queue
                                recruitingQueues = village.getRecruitingQueues()
                                barracksQueue4 = recruitingQueues.barracks.jobs
                                var resources = village.getResources()
                                var computed = resources.getComputed()
                                var woodComputed = computed.wood
                                var clayComputed = computed.clay
                                var ironComputed = computed.iron
                                var foodComputed = computed.food
                                villageFood4 = foodComputed.currentStock
                                villageWood4 = woodComputed.currentStock
                                villageClay4 = clayComputed.currentStock
                                villageIron4 = ironComputed.currentStock
                                barracksQueue4.forEach(function(job) {
                                    recruitingTime = job.clientRecruitingTime
                                    totalRecruitingTime = (job.data.time_completed - job.data.start_time) * 1000
                                    recruitingTimeToFinish = totalRecruitingTime - recruitingTime
                                    barracksRecrutingTime4.push(recruitingTimeToFinish)
                                })
                                modifier4Get()
                            }
                        })
                    }, (index * interval) + interval4)
                })
            } else {
                console.log('Nie wybrano grupy nr4')
            }
        }
        setInterval(function() {
            if (running == false) {
                return
            }
        }, 60000)
        getVillageData()
        eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_CYCLE_END)
    }
    recruitQueue.getLogs = function() {
        return logs
    }
    recruitQueue.clearLogs = function() {
        logs = []
        Lockr.set(STORAGE_KEYS.LOGS, logs)
        eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_CLEAR_LOGS)
        return logs
    }
    recruitQueue.start = function() {
        running = true
        eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_START)
        addLog(LOG_TYPES.RECRUIT_START, 'start', '')
        interval5 = Math.max(MINIMUM_RECRUIT_CYCLE_INTERVAL, recruitQueueSettings[SETTINGS.RECRUIT_QUEUE_INTERVAL] * 60 * 1000)
        runningRecrutation = setInterval(function() {
            running = true
            recruitQueue.presetRecrutation()
        }, interval5)
    }
    recruitQueue.stop = function(reason = STATUS.USER_STOP) {
        if (interval5) {
            if (reason !== STATUS.USER_STOP) {
                nextCycleDate = timeHelper.gameTime() + getCycleInterval()
            }
            eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_CYCLE_END, reason)
        } else {
            nextCycleDate = null
        }
        running = false
        clearInterval(runningRecrutation)
        eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_STOP, {
            reason: reason
        })
        eventQueue.trigger(eventTypeProvider.RECRUIT_QUEUE_CYCLE_END, reason)
        if (reason === STATUS.USER_STOP) {
            addLog(LOG_TYPES.RECRUIT_STOP, 'stop', '')
            addLog(LOG_TYPES.RECRUIT_STOP, 'cycle.end', '')
        }
    }
    recruitQueue.getSettings = function() {
        return settings
    }
    recruitQueue.isInitialized = function() {
        return initialized
    }
    recruitQueue.isRunning = function() {
        return running
    }
    recruitQueue.getNextCycleDate = function() {
        return nextCycleDate
    }
    recruitQueue.getCycleInterval = getCycleInterval
    return recruitQueue
})
define('two/recruitQueue/events', [], function () {
    angular.extend(eventTypeProvider, {
        RECRUIT_QUEUE_JOB_STARTED: 'recruit_queue_job_started',
        RECRUIT_QUEUE_START: 'recruit_queue_start',
        RECRUIT_QUEUE_STOP: 'recruit_queue_stop',
        RECRUIT_QUEUE_CLEAR_LOGS: 'recruit_queue_clear_logs',
        RECRUIT_QUEUE_CYCLE_BEGIN: 'recruit_queue_cycle_begin',
        RECRUIT_QUEUE_CYCLE_END: 'recruit_queue_cycle_end'
    })
})

define('two/recruitQueue/ui', [
    'two/ui',
    'two/recruitQueue',
    'two/recruitQueue/settings',
    'two/recruitQueue/settings/map',
    'two/recruitQueue/types/units',
    'two/recruitQueue/types/status',
    'two/recruitQueue/types/errors',
    'two/Settings',
    'queues/EventQueue',
    'two/EventScope',
    'helper/time',
    'two/utils'
], function(
    interfaceOverflow,
    recruitQueue,
    SETTINGS,
    SETTINGS_MAP,
    RQ_UNIT,
    STATUS,
    ERROR_TYPES,
    Settings,
    eventQueue,
    EventScope,
    timeHelper,
    utils
) {
    let $scope
    let settings
    let groupList = modelDataService.getGroupList()
    let $button
    let running = false
    let cycleCountdownTimer = null
    let logsView = {}
    let villagesInfo = {}
    let villagesLabel = {}
    const TAB_TYPES = {
        PRESETS: 'presets',
        OWN: 'own',
        LOGS: 'logs'
    }
    const selectTab = function(tabType) {
        $scope.selectedTab = tabType
    }
    const switchRecruiterP = function() {
        if (recruitQueue.isRunning()) {
            recruitQueue.stop()
            running = false
        } else {
            recruitQueue.start()
            settings.setAll(settings.decode($scope.settings))
            recruitQueue.presetRecrutation()
        }
    }
    const switchRecruiterO = function() {
        if (recruitQueue.isRunning()) {
            recruitQueue.stop()
            running = false
        } else {
            recruitQueue.start()
            settings.setAll(settings.decode($scope.settings))
            recruitQueue.ownRecrutation()
        }
    }
    const clearP = function() {
        $scope.settings[SETTINGS.GROUP1] = false
        $scope.settings[SETTINGS.GROUP2] = false
        $scope.settings[SETTINGS.GROUP3] = false
        $scope.settings[SETTINGS.GROUP4] = false
        $scope.settings[SETTINGS.FINAL_AMOUNT1] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT2] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT3] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT4] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT5] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT6] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT7] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT8] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT9] = 0
        $scope.settings[SETTINGS.START_AMOUNT1] = 0
        $scope.settings[SETTINGS.START_AMOUNT2] = 0
        $scope.settings[SETTINGS.START_AMOUNT3] = 0
        $scope.settings[SETTINGS.START_AMOUNT4] = 0
        $scope.settings[SETTINGS.START_AMOUNT5] = 0
        $scope.settings[SETTINGS.START_AMOUNT6] = 0
        $scope.settings[SETTINGS.START_AMOUNT7] = 0
        $scope.settings[SETTINGS.START_AMOUNT8] = 0
        $scope.settings[SETTINGS.START_AMOUNT9] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT11] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT12] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT13] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT14] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT15] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT16] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT17] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT18] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT19] = 0
        $scope.settings[SETTINGS.START_AMOUNT11] = 0
        $scope.settings[SETTINGS.START_AMOUNT12] = 0
        $scope.settings[SETTINGS.START_AMOUNT13] = 0
        $scope.settings[SETTINGS.START_AMOUNT14] = 0
        $scope.settings[SETTINGS.START_AMOUNT15] = 0
        $scope.settings[SETTINGS.START_AMOUNT16] = 0
        $scope.settings[SETTINGS.START_AMOUNT17] = 0
        $scope.settings[SETTINGS.START_AMOUNT18] = 0
        $scope.settings[SETTINGS.START_AMOUNT19] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT21] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT22] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT23] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT24] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT25] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT26] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT27] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT28] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT29] = 0
        $scope.settings[SETTINGS.START_AMOUNT21] = 0
        $scope.settings[SETTINGS.START_AMOUNT22] = 0
        $scope.settings[SETTINGS.START_AMOUNT23] = 0
        $scope.settings[SETTINGS.START_AMOUNT24] = 0
        $scope.settings[SETTINGS.START_AMOUNT25] = 0
        $scope.settings[SETTINGS.START_AMOUNT26] = 0
        $scope.settings[SETTINGS.START_AMOUNT27] = 0
        $scope.settings[SETTINGS.START_AMOUNT28] = 0
        $scope.settings[SETTINGS.START_AMOUNT29] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT31] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT32] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT33] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT34] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT35] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT36] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT37] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT38] = 0
        $scope.settings[SETTINGS.FINAL_AMOUNT39] = 0
        $scope.settings[SETTINGS.START_AMOUNT31] = 0
        $scope.settings[SETTINGS.START_AMOUNT32] = 0
        $scope.settings[SETTINGS.START_AMOUNT33] = 0
        $scope.settings[SETTINGS.START_AMOUNT34] = 0
        $scope.settings[SETTINGS.START_AMOUNT35] = 0
        $scope.settings[SETTINGS.START_AMOUNT36] = 0
        $scope.settings[SETTINGS.START_AMOUNT37] = 0
        $scope.settings[SETTINGS.START_AMOUNT38] = 0
        $scope.settings[SETTINGS.START_AMOUNT39] = 0
        settings.setAll(settings.decode($scope.settings))
    }
    const clearO = function() {
        $scope.settings[SETTINGS.GROUP5] = false
        $scope.settings[SETTINGS.GROUP6] = false
        $scope.settings[SETTINGS.GROUP7] = false
        $scope.settings[SETTINGS.GROUP8] = false
        $scope.settings[SETTINGS.GROUP9] = false
        $scope.settings[SETTINGS.GROUP10] = false
        $scope.settings[SETTINGS.GROUP11] = false
        $scope.settings[SETTINGS.GROUP12] = false
        $scope.settings[SETTINGS.GROUP13] = false
        $scope.settings[SETTINGS.GROUP14] = false
        $scope.settings[SETTINGS.GROUP15] = false
        $scope.settings[SETTINGS.GROUP16] = false
        $scope.settings[SETTINGS.GROUP17] = false
        $scope.settings[SETTINGS.GROUP18] = false
        $scope.settings[SETTINGS.GROUP19] = false
        $scope.settings[SETTINGS.GROUP20] = false
        $scope.settings[SETTINGS.GROUP21] = false
        $scope.settings[SETTINGS.GROUP22] = false
        $scope.settings[SETTINGS.GROUP23] = false
        $scope.settings[SETTINGS.GROUP24] = false
        $scope.settings[SETTINGS.UNIT1] = false
        $scope.settings[SETTINGS.UNIT2] = false
        $scope.settings[SETTINGS.UNIT3] = false
        $scope.settings[SETTINGS.UNIT4] = false
        $scope.settings[SETTINGS.UNIT5] = false
        $scope.settings[SETTINGS.UNIT6] = false
        $scope.settings[SETTINGS.UNIT7] = false
        $scope.settings[SETTINGS.UNIT8] = false
        $scope.settings[SETTINGS.UNIT9] = false
        $scope.settings[SETTINGS.UNIT10] = false
        $scope.settings[SETTINGS.UNIT11] = false
        $scope.settings[SETTINGS.UNIT12] = false
        $scope.settings[SETTINGS.UNIT13] = false
        $scope.settings[SETTINGS.UNIT14] = false
        $scope.settings[SETTINGS.UNIT15] = false
        $scope.settings[SETTINGS.UNIT16] = false
        $scope.settings[SETTINGS.UNIT17] = false
        $scope.settings[SETTINGS.UNIT18] = false
        $scope.settings[SETTINGS.UNIT19] = false
        $scope.settings[SETTINGS.UNIT20] = false
        $scope.settings[SETTINGS.AMOUNT1] = 1
        $scope.settings[SETTINGS.AMOUNT2] = 1
        $scope.settings[SETTINGS.AMOUNT3] = 1
        $scope.settings[SETTINGS.AMOUNT4] = 1
        $scope.settings[SETTINGS.AMOUNT5] = 1
        $scope.settings[SETTINGS.AMOUNT6] = 1
        $scope.settings[SETTINGS.AMOUNT7] = 1
        $scope.settings[SETTINGS.AMOUNT8] = 1
        $scope.settings[SETTINGS.AMOUNT9] = 1
        $scope.settings[SETTINGS.AMOUNT10] = 1
        $scope.settings[SETTINGS.AMOUNT11] = 1
        $scope.settings[SETTINGS.AMOUNT12] = 1
        $scope.settings[SETTINGS.AMOUNT13] = 1
        $scope.settings[SETTINGS.AMOUNT14] = 1
        $scope.settings[SETTINGS.AMOUNT15] = 1
        $scope.settings[SETTINGS.AMOUNT16] = 1
        $scope.settings[SETTINGS.AMOUNT17] = 1
        $scope.settings[SETTINGS.AMOUNT18] = 1
        $scope.settings[SETTINGS.AMOUNT19] = 1
        $scope.settings[SETTINGS.AMOUNT20] = 1
        settings.setAll(settings.decode($scope.settings))
    }
    const loadVillageInfo = function(villageId) {
        if (villagesInfo[villageId]) {
            return villagesInfo[villageId]
        }
        villagesInfo[villageId] = true
        villagesLabel[villageId] = 'ŁADOWANIE...'
        socketService.emit(routeProvider.MAP_GET_VILLAGE_DETAILS, {
            my_village_id: modelDataService.getSelectedVillage().getId(),
            village_id: villageId,
            num_reports: 1
        }, function(data) {
            villagesInfo[villageId] = {
                x: data.village_x,
                y: data.village_y,
                name: data.village_name,
                last_report: data.last_reports[0]
            }
            villagesLabel[villageId] = `${data.village_name} (${data.village_x}|${data.village_y})`
        })
    }
    logsView.updateVisibleLogs = function() {
        const offset = $scope.pagination.logs.offset
        const limit = $scope.pagination.logs.limit
        logsView.visibleLogs = logsView.logs.slice(offset, offset + limit)
        $scope.pagination.logs.count = logsView.logs.length
        logsView.visibleLogs.forEach(function(log) {
            if (log.villageId) {
                loadVillageInfo(log.villageId)
            }
        })
    }
    logsView.clearLogs = function() {
        recruitQueue.clearLogs()
    }
    const checkCycleInterval = function() {
        if (running == true) {
            let nextCycleDate = recruitQueue.getNextCycleDate()
            let terminateDate = nextCycleDate - timeHelper.gameTime()
            if (nextCycleDate) {
                $scope.showCycleTimer = true
                $scope.nextCycleCountdown = terminateDate
                cycleCountdownTimer = setInterval(function() {
                    $scope.nextCycleCountdown -= 1000
                    if (terminateDate < 0) {
                        clearInterval(cycleCountdownTimer)
                        $scope.nextCycleCountdown = 'Cykl zakończony'
                    }
                }, 1000)
            }
        } else {
            $scope.showCycleTimer = false
        }
    }
    const eventHandlers = {
        updateGroups: function() {
            $scope.groups = Settings.encodeList(groupList.getGroups(), {
                disabled: false,
                type: 'groups'
            })
        },
        updateLogs: function() {
            $scope.logs = recruitQueue.getLogs()
            logsView.updateVisibleLogs()
            if (!$scope.logs.length) {
                utils.notif('success', $filter('i18n')('reseted_logs', $rootScope.loc.ale, 'recruit_queue'))
            }
        },
        clearLogs: function() {
            utils.notif('success', $filter('i18n')('logs.cleared', $rootScope.loc.ale, 'recruit_queue'))
            $scope.visibleLogs = []
            eventHandlers.updateLogs()
        },
        start: function() {
            $scope.running = true
        },
        stop: function(event, data) {
            $scope.running = false
            $scope.showCycleTimer = false
            clearInterval(cycleCountdownTimer)
            switch (data.reason) {
                case ERROR_TYPES.USER_STOP: {
                    utils.notif('success', $filter('i18n')('general.stopped', $rootScope.loc.ale, 'recruit_queue'))
                    break
                }
            }
        },
        onCycleBegin: function() {
            $scope.showCycleTimer = false
            clearInterval(cycleCountdownTimer)
        },
        onCycleEnd: function(event, reason) {
            if (reason === STATUS.USER_STOP) {
                return
            }
            $scope.showCycleTimer = true
            $scope.nextCycleCountdown = recruitQueue.getCycleInterval()
            cycleCountdownTimer = setInterval(function() {
                $scope.nextCycleCountdown -= 1000
            }, 1000)
        }
    }
    const init = function() {
        settings = recruitQueue.getSettings()
        $button = interfaceOverflow.addMenuButton('Kapitan', 80, $filter('i18n')('description', $rootScope.loc.ale, 'recruit_queue'))
        $button.addEventListener('click', buildWindow)
        eventQueue.register(eventTypeProvider.RECRUIT_QUEUE_START, function() {
            running = true
            $button.classList.remove('btn-orange')
            $button.classList.add('btn-red')
            utils.notif('success', $filter('i18n')('general.started', $rootScope.loc.ale, 'recruit_queue'))
        })
        eventQueue.register(eventTypeProvider.RECRUIT_QUEUE_STOP, function() {
            running = false
            $button.classList.remove('btn-red')
            $button.classList.add('btn-orange')
            utils.notif('success', $filter('i18n')('general.stopped', $rootScope.loc.ale, 'recruit_queue'))
        })
        interfaceOverflow.addTemplate('twoverflow_recruit_queue_window', `___recruit_queue_html_main`)
        interfaceOverflow.addStyle('___recruit_queue_css_style')
    }
    const buildWindow = function() {
        $scope = $rootScope.$new()
        $scope.SETTINGS = SETTINGS
        $scope.TAB_TYPES = TAB_TYPES
        $scope.running = running
        $scope.selectedTab = TAB_TYPES.PRESETS
        $scope.settingsMap = SETTINGS_MAP
        $scope.pagination = {}
        $scope.clearP = clearP
        $scope.clearO = clearO
        $scope.units = Settings.encodeList(RQ_UNIT, {
            textObject: 'recruit_queue',
            disabled: true
        })
        $scope.selectTab = selectTab
        $scope.switchRecruiterO = switchRecruiterO
        $scope.switchRecruiterP = switchRecruiterP
        $scope.logsView = logsView
        $scope.logsView.logs = recruitQueue.getLogs()
        $scope.villagesLabel = villagesLabel
        $scope.villagesInfo = villagesInfo
        $scope.openVillageInfo = windowDisplayService.openVillageInfo
        settings.injectScope($scope)
        eventHandlers.updateGroups()
        checkCycleInterval()
        $scope.pagination.logs = {
            count: logsView.logs.length,
            offset: 0,
            loader: logsView.updateVisibleLogs,
            limit: storageService.getPaginationLimit()
        }
        logsView.updateVisibleLogs()
        let eventScope = new EventScope('twoverflow_recruit_queue_window', function onDestroy() {
            console.log('recruitQueue window closed')
            clearInterval(cycleCountdownTimer)
        })
        eventScope.register(eventTypeProvider.GROUPS_CREATED, eventHandlers.updateGroups, true)
        eventScope.register(eventTypeProvider.GROUPS_DESTROYED, eventHandlers.updateGroups, true)
        eventScope.register(eventTypeProvider.GROUPS_UPDATED, eventHandlers.updateGroups, true)
        eventScope.register(eventTypeProvider.RECRUIT_QUEUE_JOB_STARTED, eventHandlers.updateLogs)
        eventScope.register(eventTypeProvider.RECRUIT_QUEUE_CLEAR_LOGS, eventHandlers.clearLogs)
        eventScope.register(eventTypeProvider.RECRUIT_QUEUE_START, eventHandlers.start)
        eventScope.register(eventTypeProvider.RECRUIT_QUEUE_STOP, eventHandlers.stop)
        eventScope.register(eventTypeProvider.RECRUIT_QUEUE_CYCLE_BEGIN, eventHandlers.onCycleBegin)
        eventScope.register(eventTypeProvider.RECRUIT_QUEUE_CYCLE_END, eventHandlers.onCycleEnd)
        windowManagerService.getScreenWithInjectedScope('!twoverflow_recruit_queue_window', $scope)
    }
    return init
})
define('two/recruitQueue/settings', [], function() {
    return {
        MIN_PACK1: 'minpack1',
        MIN_PACK2: 'minpack2',
        MIN_PACK3: 'minpack3',
        MIN_PACK4: 'minpack4',
        RECRUIT_QUEUE_INTERVAL: 'recruit_cycle_interval',
        GROUP_QUEUE_INTERVAL: 'group_cycle_interval',
        UNIT_QUEUE_INTERVAL: 'unit_cycle_interval',
        GROUP1: 'group1',
        GROUP2: 'group2',
        GROUP3: 'group3',
        GROUP4: 'group4',
        GROUP5: 'group5',
        GROUP6: 'group6',
        GROUP7: 'group7',
        GROUP8: 'group8',
        GROUP9: 'group9',
        GROUP10: 'group10',
        GROUP11: 'group11',
        GROUP12: 'group12',
        GROUP13: 'group13',
        GROUP14: 'group14',
        GROUP15: 'group15',
        GROUP16: 'group16',
        GROUP17: 'group17',
        GROUP18: 'group18',
        GROUP19: 'group19',
        GROUP20: 'group20',
        GROUP21: 'group21',
        GROUP22: 'group22',
        GROUP23: 'group23',
        GROUP24: 'group24',
        UNIT1: 'unit1',
        UNIT2: 'unit2',
        UNIT3: 'unit3',
        UNIT4: 'unit4',
        UNIT5: 'unit5',
        UNIT6: 'unit6',
        UNIT7: 'unit7',
        UNIT8: 'unit8',
        UNIT9: 'unit9',
        UNIT10: 'unit10',
        UNIT11: 'unit11',
        UNIT12: 'unit12',
        UNIT13: 'unit13',
        UNIT14: 'unit14',
        UNIT15: 'unit15',
        UNIT16: 'unit16',
        UNIT17: 'unit17',
        UNIT18: 'unit18',
        UNIT19: 'unit19',
        UNIT20: 'unit20',
        START_AMOUNT1: 'startamount1',
        START_AMOUNT2: 'startamount2',
        START_AMOUNT3: 'startamount3',
        START_AMOUNT4: 'startamount4',
        START_AMOUNT5: 'startamount5',
        START_AMOUNT6: 'startamount6',
        START_AMOUNT7: 'startamount7',
        START_AMOUNT8: 'startamount8',
        START_AMOUNT9: 'startamount9',
        START_AMOUNT11: 'startamount11',
        START_AMOUNT12: 'startamount12',
        START_AMOUNT13: 'startamount13',
        START_AMOUNT14: 'startamount14',
        START_AMOUNT15: 'startamount15',
        START_AMOUNT16: 'startamount16',
        START_AMOUNT17: 'startamount17',
        START_AMOUNT18: 'startamount18',
        START_AMOUNT19: 'startamount19',
        START_AMOUNT21: 'startamount21',
        START_AMOUNT22: 'startamount22',
        START_AMOUNT23: 'startamount23',
        START_AMOUNT24: 'startamount24',
        START_AMOUNT25: 'startamount25',
        START_AMOUNT26: 'startamount26',
        START_AMOUNT27: 'startamount27',
        START_AMOUNT28: 'startamount28',
        START_AMOUNT29: 'startamount29',
        START_AMOUNT31: 'startamount31',
        START_AMOUNT32: 'startamount32',
        START_AMOUNT33: 'startamount33',
        START_AMOUNT34: 'startamount34',
        START_AMOUNT35: 'startamount35',
        START_AMOUNT36: 'startamount36',
        START_AMOUNT37: 'startamount37',
        START_AMOUNT38: 'startamount38',
        START_AMOUNT39: 'startamount39',
        FINAL_AMOUNT1: 'finalamount1',
        FINAL_AMOUNT2: 'finalamount2',
        FINAL_AMOUNT3: 'finalamount3',
        FINAL_AMOUNT4: 'finalamount4',
        FINAL_AMOUNT5: 'finalamount5',
        FINAL_AMOUNT6: 'finalamount6',
        FINAL_AMOUNT7: 'finalamount7',
        FINAL_AMOUNT8: 'finalamount8',
        FINAL_AMOUNT9: 'finalamount9',
        FINAL_AMOUNT11: 'finalamount11',
        FINAL_AMOUNT12: 'finalamount12',
        FINAL_AMOUNT13: 'finalamount13',
        FINAL_AMOUNT14: 'finalamount14',
        FINAL_AMOUNT15: 'finalamount15',
        FINAL_AMOUNT16: 'finalamount16',
        FINAL_AMOUNT17: 'finalamount17',
        FINAL_AMOUNT18: 'finalamount18',
        FINAL_AMOUNT19: 'finalamount19',
        FINAL_AMOUNT21: 'finalamount21',
        FINAL_AMOUNT22: 'finalamount22',
        FINAL_AMOUNT23: 'finalamount23',
        FINAL_AMOUNT24: 'finalamount24',
        FINAL_AMOUNT25: 'finalamount25',
        FINAL_AMOUNT26: 'finalamount26',
        FINAL_AMOUNT27: 'finalamount27',
        FINAL_AMOUNT28: 'finalamount28',
        FINAL_AMOUNT29: 'finalamount29',
        FINAL_AMOUNT31: 'finalamount31',
        FINAL_AMOUNT32: 'finalamount32',
        FINAL_AMOUNT33: 'finalamount33',
        FINAL_AMOUNT34: 'finalamount34',
        FINAL_AMOUNT35: 'finalamount35',
        FINAL_AMOUNT36: 'finalamount36',
        FINAL_AMOUNT37: 'finalamount37',
        FINAL_AMOUNT38: 'finalamount38',
        FINAL_AMOUNT39: 'finalamount39',
        AMOUNT1: 'amount1',
        AMOUNT2: 'amount2',
        AMOUNT3: 'amount3',
        AMOUNT4: 'amount4',
        AMOUNT5: 'amount5',
        AMOUNT6: 'amount6',
        AMOUNT7: 'amount7',
        AMOUNT8: 'amount8',
        AMOUNT9: 'amount9',
        AMOUNT10: 'amount10',
        AMOUNT11: 'amount11',
        AMOUNT12: 'amount12',
        AMOUNT13: 'amount13',
        AMOUNT14: 'amount14',
        AMOUNT15: 'amount15',
        AMOUNT16: 'amount16',
        AMOUNT17: 'amount17',
        AMOUNT18: 'amount18',
        AMOUNT19: 'amount19',
        AMOUNT20: 'amount20'
    }
})
define('two/recruitQueue/settings/updates', function() {
    return {
        GROUPS: 'groups',
        INTERVAL_TIMERS: 'interval_timers'
    }
})
define('two/recruitQueue/settings/map', [
    'two/recruitQueue/settings',
    'two/recruitQueue/settings/updates'
], function(
    SETTINGS,
    UPDATES
) {
    return {
        [SETTINGS.GROUP1]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP2]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP3]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP4]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP5]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP6]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP7]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP8]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP9]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP10]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP11]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP12]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP13]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP14]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP15]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP16]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP17]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP18]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP19]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP20]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP21]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP22]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP23]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.GROUP24]: {
            default: [],
            updates: [
                UPDATES.GROUPS,
            ],
            disabledOption: true,
            inputType: 'select',
            type: 'groups'
        },
        [SETTINGS.AMOUNT1]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.AMOUNT2]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.AMOUNT3]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.AMOUNT4]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.AMOUNT5]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.AMOUNT6]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.AMOUNT7]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.AMOUNT8]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.AMOUNT9]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.AMOUNT10]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.AMOUNT11]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.AMOUNT12]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.AMOUNT13]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.AMOUNT14]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.AMOUNT15]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.AMOUNT16]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.AMOUNT17]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.AMOUNT18]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.AMOUNT19]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.AMOUNT20]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.UNIT1]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT2]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT3]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT4]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT5]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT6]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT7]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT8]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT9]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT10]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT11]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT12]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT13]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT14]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT15]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT16]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT17]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT18]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT19]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT20]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT_PRESET1]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT_PRESET2]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT_PRESET3]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT_PRESET4]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT_PRESET5]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT_PRESET6]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT_PRESET7]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT_PRESET8]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.UNIT_PRESET9]: {
            default: false,
            disabledOption: true,
            inputType: 'select'
        },
        [SETTINGS.FINAL_AMOUNT1]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT2]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT3]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT4]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT5]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT6]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT7]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT8]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT9]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT1]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT2]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT3]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT4]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT5]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT6]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT7]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT8]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT9]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT11]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT12]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT13]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT14]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT15]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT16]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT17]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT18]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT19]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT11]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT12]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT13]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT14]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT15]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT16]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT17]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT18]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT19]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT21]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT22]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT23]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT24]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT25]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT26]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT27]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT28]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT29]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT21]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT22]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT23]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT24]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT25]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT26]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT27]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT28]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT29]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT31]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT32]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT33]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT34]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT35]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT36]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT37]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT38]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.FINAL_AMOUNT39]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT31]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT32]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT33]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT34]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT35]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT36]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT37]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT38]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.START_AMOUNT39]: {
            default: 0,
            inputType: 'number',
            min: 0,
            max: 24000
        },
        [SETTINGS.MIN_PACK1]: {
            default: 10,
            inputType: 'number'
        },
        [SETTINGS.MIN_PACK2]: {
            default: 10,
            inputType: 'number'
        },
        [SETTINGS.MIN_PACK3]: {
            default: 10,
            inputType: 'number'
        },
        [SETTINGS.MIN_PACK4]: {
            default: 10,
            inputType: 'number'
        },
        [SETTINGS.RECRUIT_QUEUE_INTERVAL]: {
            default: 60,
            updates: [UPDATES.INTERVAL_TIMERS],
            inputType: 'number',
            min: 1,
            max: 240
        },
        [SETTINGS.UNIT_QUEUE_INTERVAL]: {
            default: 6,
            updates: [UPDATES.INTERVAL_TIMERS],
            inputType: 'number',
            min: 2,
            max: 30
        },
        [SETTINGS.GROUP_QUEUE_INTERVAL]: {
            default: 60,
            updates: [UPDATES.INTERVAL_TIMERS],
            inputType: 'number',
            min: 20,
            max: 240
        }
    }
})
define('two/recruitQueue/types/units', [], function () {
    return {
        SPEAR: 'spear',
        SWORD: 'sword',
        AXE: 'axe',
        ARCHER: 'archer',
        LIGHT_CAVALRY: 'light_cavalry',
        MOUNTED_ARCHER: 'mounted_archer',
        HEAVY_CAVALRY: 'heavy_cavalry',
        RAM: 'ram',
        CATAPULT: 'catapult'
    }
})
define('two/recruitQueue/types/errors', [], function () {
    return {
        USER_STOP: 'user_stop'
    }
})

define('two/recruitQueue/types/status', [], function () {
    return {
        USER_STOP: 'user_stop'
    }
})
define('two/recruitQueue/types/logs', [], function () {
    return {
        RECRUIT_START: 'recruit_start',
        RECRUIT_STOP: 'recruit_stop',
    }
})

require([
    'two/ready',
    'two/recruitQueue',
    'two/recruitQueue/ui',
    'two/recruitQueue/events'
], function (
    ready,
    recruitQueue,
    recruitQueueInterface
) {
    if (recruitQueue.isInitialized()) {
        return false
    }

    ready(function () {
        recruitQueue.init()
        recruitQueueInterface()
    })
})

define('two/reportSender', [
    'queues/EventQueue'
], function(
    eventQueue
) {
    var player = modelDataService.getSelectedCharacter()
    var playerId = player.data.character_id
    var initialized = false
    var running = false
    var scoutReportsId = []
    var defenseReportsId = []
    var attackReportsId = []
    var convert

    function secondsToDaysHHMMSS(totalSeconds) {
        var returnString = ''
        var date = new Date(totalSeconds * 1000)
        convert = date.toLocaleString()
        returnString = convert
        return returnString
    }
    var checkNewReports = function() {
        if (!running) {
            return false
        }
        socketService.emit(routeProvider.REPORT_GET_LIST_REVERSE, {
            offset: 0,
            count: 50,
            query: '',
            types: ['scouting']
        }, function(data) {
            var reports = data.reports
            for (var i = 0; i < reports.length; i++) {
                if (scoutReportsId.includes(reports[i].id)) {
                    console.log('Raport zwiadowczy już wysłany')
                } else {
                    scoutReportsId.push(reports[i].id)
                    socketService.emit(routeProvider.REPORT_GET, {
                        id: reports[i].id
                    }, sendInfoScout)
                }
            }
        })
        socketService.emit(routeProvider.REPORT_GET_LIST_REVERSE, {
            offset: 0,
            count: 100,
            query: '',
            types: ['defense']
        }, function(data) {
            var reports = data.reports
            for (var i = 0; i < reports.length; i++) {
                if (defenseReportsId.includes(reports[i].id)) {
                    console.log('Raport wsparcia już wysłany')
                } else {
                    defenseReportsId.push(reports[i].id)
                    socketService.emit(routeProvider.REPORT_GET, {
                        id: reports[i].id
                    }, sendInfoDefense)
                }
            }
        })
        socketService.emit(routeProvider.REPORT_GET_LIST_REVERSE, {
            offset: 0,
            count: 100,
            query: '',
            types: ['attack']
        }, function(data) {
            var reports = data.reports
            for (var i = 0; i < reports.length; i++) {
                if (attackReportsId.includes(reports[i].id)) {
                    console.log('Raport ataku już wysłany')
                } else {
                    attackReportsId.push(reports[i].id)
                    socketService.emit(routeProvider.REPORT_GET, {
                        id: reports[i].id
                    }, sendInfoAttack)
                }
            }
        })
    }
    var sendInfoScout = function sendInfoScout(data) {
        var alertText = []
        var result = data.result
        var token = data.token
        var time
        var timecreated = data.time_created
        var finalTime = secondsToDaysHHMMSS(timecreated)
        var details = data.ReportScouting
        var attCharacterId = details.attCharacterId
        var attCharacterName = details.attCharacterName
        var attScouts = details.attScouts
        var attLosses = details.attLosses
        var attVillageId = details.attVillageId
        var attVillageName = details.attVillageName
        var defCharacterId = details.defCharacterId
        var defCharacterName = details.defCharacterName
        var defLosses = details.defLosses
        var defScouts = details.defScouts
        var defScoutsFinal
        var attScoutsFinal
        var defScoutsLossesFinal
        var attScoutsLossesFinal
        var defVillageId = details.defVillageId
        var defVillageName = details.defVillageName
        var commandType = details.commandType
        var resultString = ''
        var type = ''
        var origin = ''
        var gamer = ''
        var dateNow = Date.now()
        var newToken = token.split('.').join('_')
        if (result == 2) {
            resultString = ' [color=d96a19]Częściowy sukces[/color]'
        } else if (result == 1) {
            resultString = ' [color=0a8028]Sukces[/color]'
        } else if (result == 3) {
            resultString = ' [color=e21f1f]Porażka[/color]'
        }
        if (commandType == 'units') {
            type = 'Jednostki'
        } else if (commandType == 'buildings') {
            type = 'Budynki'
        } else {
            type = 'Sabotaż'
        }
        if (defScouts == null) {
            defScoutsFinal = 'nieznana'
        } else {
            defScoutsFinal = defScouts
        }
        if (attScouts == null) {
            attScoutsFinal = 'nieznana'
        } else {
            attScoutsFinal = attScouts
        }
        if (defLosses == null) {
            defScoutsLossesFinal = 'nieznana'
        } else {
            defScoutsLossesFinal = defLosses
        }
        if (attLosses == null) {
            attScoutsLossesFinal = 'nieznana'
        } else {
            attScoutsLossesFinal = attLosses
        }
        if (attCharacterName == null && attCharacterId == null) {
            gamer = 'Brak danych'
        } else {
            gamer = '[player=' + attCharacterId + ']' + attCharacterName + '[/player]'
        }
        if (attVillageName == null && attVillageId == null) {
            origin = 'Brak danych'
        } else {
            origin = '[village=' + attVillageId + ']' + attVillageName + '[/village]'
        }
        time = Math.floor((dateNow / 1000) - timecreated)
        alertText.push('[size=XL][b]Raport szpiegowski: [report]' + newToken + '[/report][br]' + resultString + ' --- Typ: ' + type + '[/b][/size][br][b][size=large] Czas wejścia szpiegów: ' + finalTime + '[/size][/b][br][size=medium][b] Wioska cel: [/b][village=' + defVillageId + ']' + defVillageName + '[/village][b] Gracz cel: [/b][player=' + defCharacterId + ']' + defCharacterName + '[/player][br]Liczba szpiegów: [b]' + defScoutsFinal + '[/b] Stracone: [b][color=e21f1f]' + defScoutsLossesFinal + '[/color][/b][br]Wioska pochodzenia: [/b]' + origin + '[b] Gracz szpiegujący: [/b]' + gamer + '[br]Liczba szpiegów: [b]' + attScoutsFinal + '[/b] Stracone: [b][color=e21f1f]' + attScoutsLossesFinal + '[/color][/b][/size]')
        var message = alertText.join()
        if (defCharacterId != playerId) {
            if (time < 10800) {
                socketService.emit(routeProvider.MESSAGE_REPLY, {
                    message_id: 8462,
                    message: message
                })
                alertText = []
            }
        } else {
            if (time < 10800) {
                socketService.emit(routeProvider.MESSAGE_REPLY, {
                    message_id: 8463,
                    message: message
                })
                alertText = []
            }
        }
    }
    var sendInfoDefense = function sendInfoDefense(data) {
        var alertText = []
        var result = data.result
        var token = data.token
        var time
        var timecreated = data.time_created
        var finalTime = secondsToDaysHHMMSS(timecreated)
        var details = data.ReportAttack
        var attCharacterId = details.attCharacterId
        var attCharacterName = details.attCharacterName
        var attVillageId = details.attVillageId
        var attVillageName = details.attVillageName
        var attEffects = details.attEffects
        var defEffects = details.defEffects
        var attUnits = details.attUnits
        var noFake = attUnits.spear + attUnits.sword + attUnits.axe + attUnits.archer + attUnits.light_cavalry + attUnits.mounted_archer + attUnits.ram + attUnits.catapult + attUnits.heavy_cavalry + attUnits.trebuchet + attUnits.knight + attUnits.snob + attUnits.doppelsoldner
        if (noFake > 30) {
            var EffectsForAttacker = []
            var EffectsForDefender = []
            attEffects.forEach(function(effect) {
                var type = effect.type
                var factorICC = 0
                var minlevelBWL = 0
                var bonusMAF = 0
                var ratioRAL = 0
                var bedsEHB = 0
                var increasedByISD = 0
                var increasedByIML = 0
                var factorRSB = 0
                var factorFSI = 0
                var factorRDJA = 0
                var factorRDJD = 0
                var factorFTS = 0
                if (type == 'increased_carrying_capacity') {
                    factorICC = ((effect.factor - 1) * 100).toFixed([0])
                    EffectsForAttacker.push(' Wagony ' + factorICC + '%')
                }
                if (type == 'base_wall_levels') {
                    minlevelBWL = effect.min_level
                    EffectsForAttacker.push(' Żelazny mur ' + minlevelBWL + '')
                }
                if (type == 'modify_attack_factor') {
                    bonusMAF = effect.bonus * 100
                    EffectsForAttacker.push(' Mistrzostwo broni ' + bonusMAF + '%')
                }
                if (type == 'revive_attacker_losses') {
                    ratioRAL = effect.ratio * 100
                    EffectsForAttacker.push(' Doktor ' + ratioRAL + '%')
                }
                if (type == 'extra_hospital_beds') {
                    bedsEHB = effect.beds
                    EffectsForAttacker.push(' Klinika ' + bedsEHB + '')
                }
                if (type == 'increase_spy_defense') {
                    increasedByISD = effect.increased_by
                    EffectsForAttacker.push(' Agent wewnętrzny ' + increasedByISD + '%')
                }
                if (type == 'increase_member_limit') {
                    increasedByIML = effect.increased_by
                    EffectsForAttacker.push(' Siła w liczbach ' + increasedByIML + '')
                }
                if (type == 'recruit_speed_boost') {
                    factorRSB = effect.factor
                    EffectsForAttacker.push(' Intensywny trening ' + factorRSB + '%')
                }
                if (type == 'farm_speed_increase') {
                    factorFSI = effect.factor
                    EffectsForAttacker.push(' Drogi najazdów ' + factorFSI + '%')
                }
                if (type == 'resource_deposit_job_amount') {
                    factorRDJA = effect.factor
                    EffectsForAttacker.push(' Wagony(depozyt) ' + factorRDJA + '%')
                }
                if (type == 'resource_deposit_job_duration') {
                    factorRDJD = effect.factor
                    EffectsForAttacker.push(' Drogi najazdów(depozyt) ' + factorRDJD + '%')
                }
                if (type == 'faster_tribe_support') {
                    factorFTS = effect.factor
                    EffectsForAttacker.push(' Zjednoczenie ' + factorFTS + '%')
                }
            })
            var finishedAttEffects = EffectsForAttacker.join()
            defEffects.forEach(function(effect) {
                var type = effect.type
                var factorICC = 0
                var minlevelBWL = 0
                var bonusMAF = 0
                var ratioRAL = 0
                var bedsEHB = 0
                var increasedByISD = 0
                var increasedByIML = 0
                var factorRSB = 0
                var factorFSI = 0
                var factorRDJA = 0
                var factorRDJD = 0
                var factorFTS = 0
                if (type == 'increased_carrying_capacity') {
                    factorICC = ((effect.factor - 1) * 100).toFixed([0])
                    EffectsForDefender.push(' Wagony ' + factorICC + '%')
                }
                if (type == 'base_wall_levels') {
                    minlevelBWL = effect.min_level
                    EffectsForDefender.push(' Żelazny mur ' + minlevelBWL + '')
                }
                if (type == 'modify_attack_factor') {
                    bonusMAF = effect.bonus * 100
                    EffectsForDefender.push(' Mistrzostwo broni ' + bonusMAF + '%')
                }
                if (type == 'revive_attacker_losses') {
                    ratioRAL = effect.ratio * 100
                    EffectsForDefender.push(' Doktor ' + ratioRAL + '%')
                }
                if (type == 'extra_hospital_beds') {
                    bedsEHB = effect.beds
                    EffectsForDefender.push(' Klinika ' + bedsEHB + '')
                }
                if (type == 'increase_spy_defense') {
                    increasedByISD = effect.increased_by
                    EffectsForDefender.push(' Agent wewnętrzny ' + increasedByISD + '%')
                }
                if (type == 'increase_member_limit') {
                    increasedByIML = effect.increased_by
                    EffectsForDefender.push(' Siła w liczbach ' + increasedByIML + '')
                }
                if (type == 'recruit_speed_boost') {
                    factorRSB = effect.factor
                    EffectsForDefender.push(' Intensywny trening ' + factorRSB + '%')
                }
                if (type == 'farm_speed_increase') {
                    factorFSI = effect.factor
                    EffectsForDefender.push(' Drogi najazdów ' + factorFSI + '%')
                }
                if (type == 'resource_deposit_job_amount') {
                    factorRDJA = effect.factor
                    EffectsForDefender.push(' Wagony(depozyt) ' + factorRDJA + '%')
                }
                if (type == 'resource_deposit_job_duration') {
                    factorRDJD = effect.factor
                    EffectsForDefender.push(' Drogi najazdów(depozyt) ' + factorRDJD + '%')
                }
                if (type == 'faster_tribe_support') {
                    factorFTS = effect.factor
                    EffectsForDefender.push(' Zjednoczenie ' + factorFTS + '%')
                }
            })
            var finishedDefEffects = EffectsForDefender.join()
            var attFaith = (details.attFaith * 100).toFixed([0])
            var attModifier = (Math.round(details.attModifier * 100)).toFixed([0])
            var morale = (Math.round(details.morale * 100)).toFixed([0])
            var luck = ((details.luck - 1) * 100).toFixed([0])
            var defCharacterId = details.defCharacterId
            var defCharacterName = details.defCharacterName
            var defVillageId = details.defVillageId
            var defVillageName = details.defVillageName
            var defFaith = (details.defFaith * 100).toFixed([0])
            var defModifier = (Math.round(details.defModifier * 100)).toFixed([0])
            var wallBonus = (details.wallBonus * 100).toFixed([0])
            var night = details.night
            var loyaltyAfter = details.loyaltyAfter
            var loyaltyBefore = details.loyaltyBefore
            var wallAfter = details.wallAfter
            var wallBefore = details.wallBefore
            var officers = details.officers
            var leaderF = details.leader
            var resultString = ''
            var origin = ''
            var gamer = ''
            var nightB = ''
            var officersF = ''
            var loyaltyStart = ''
            var loyaltyFinish = ''
            var wallStart = ''
            var wallFinish = ''
            var dateNow = Date.now()
            var newToken = token.split('.').join('_')
            if (loyaltyBefore != null) {
                loyaltyStart = 'Lojalność przed atakiem: ' + Math.floor(loyaltyBefore) + ' '
            }
            if (loyaltyAfter != null) {
                loyaltyFinish = 'Lojalność po ataku: ' + Math.floor(loyaltyAfter) + ' '
            }
            if (wallBefore != null) {
                wallStart = 'Mury przed ataku: ' + wallBefore + ' '
            }
            if (wallAfter != null) {
                wallFinish = 'Mury po ataku: ' + wallAfter + ' '
            }
            if (officers == null && leaderF == 1.0) {
                officersF = 'Brak'
            } else if (officers == null && leaderF == 1.1) {
                officersF = ' Wielki Mistrz '
            }
            if (night == false) {
                nightB = 'Nie'
            } else {
                nightB = 'Tak'
            }
            if (result == 2) {
                resultString = ' [color=d96a19]Częściowy sukces[/color]'
            } else if (result == 1) {
                resultString = ' [color=0a8028]Sukces[/color]'
            } else if (result == 3) {
                resultString = ' [color=e21f1f]Porażka[/color]'
            }
            if (attCharacterName == null && attCharacterId == null) {
                gamer = 'Brak danych'
            } else {
                gamer = '[player=' + attCharacterId + ']' + attCharacterName + '[/player]'
            }
            if (attVillageName == null && attVillageId == null) {
                origin = 'Brak danych'
            } else {
                origin = '[village=' + attVillageId + ']' + attVillageName + '[/village]'
            }
            time = Math.floor((dateNow / 1000) - timecreated)
            alertText.push('[size=XL][b]Raport obronny: [report]' + newToken + '[/report][br]' + resultString + '[/b][/size][br][b][size=large] Czas wejścia ataku: ' + finalTime + '[/size][/b][br][size=medium][b] Wioska cel: [/b][village=' + defVillageId + ']' + defVillageName + '[/village][b] Gracz cel: [/b][player=' + defCharacterId + ']' + defCharacterName + '[/player][br]Modyfikator obrony: [b]' + defModifier + '[/b] Bonus za mury: [b]' + wallBonus + '[/b][br]Wiara: [b]' + defFaith + '[/b] Bonus nocny: [b]' + nightB + '[/b][br]Pozostałe bonusy: [b]' + finishedDefEffects + '[/b][br][b]Wioska pochodzenia: [/b]' + origin + '[b] Gracz atakujący: [/b]' + gamer + '[br]Modyfikator ataku: [b]' + attModifier + '[/b] Morale: [b]' + morale + '[/b][br]Wiara: [b]' + attFaith + '[/b] Szczęście: [b]' + luck + '[/b][br]Pozostałe bonusy: [b]' + finishedAttEffects + '[/b][br]Oficerowie: [b]' + officersF + '[/b][br]' + loyaltyStart + '' + loyaltyFinish + '[br]' + wallStart + '' + wallFinish + '[/size]')
            var message = alertText.join()
            if (time < 10800) {
                socketService.emit(routeProvider.MESSAGE_REPLY, {
                    message_id: 8461,
                    message: message
                })
                alertText = []
            }
        }
    }
    var sendInfoAttack = function sendInfoAttack(data) {
        var alertText = []
        var result = data.result
        var token = data.token
        var timecreated = data.time_created
        var time
        var finalTime = secondsToDaysHHMMSS(timecreated)
        var details = data.ReportAttack
        var attCharacterId = details.attCharacterId
        var attCharacterName = details.attCharacterName
        var attVillageId = details.attVillageId
        var attVillageName = details.attVillageName
        var attEffects = details.attEffects
        var defEffects = details.defEffects
        var attUnits = details.attUnits
        var noFake = attUnits.spear + attUnits.sword + attUnits.axe + attUnits.archer + attUnits.light_cavalry + attUnits.mounted_archer + attUnits.ram + attUnits.catapult + attUnits.heavy_cavalry + attUnits.trebuchet + attUnits.knight + attUnits.snob + attUnits.doppelsoldner
        if (noFake > 30) {
            var EffectsForAttacker = []
            var EffectsForDefender = []
            attEffects.forEach(function(effect) {
                var type = effect.type
                var factorICC = 0
                var minlevelBWL = 0
                var bonusMAF = 0
                var ratioRAL = 0
                var bedsEHB = 0
                var increasedByISD = 0
                var increasedByIML = 0
                var factorRSB = 0
                var factorFSI = 0
                var factorRDJA = 0
                var factorRDJD = 0
                var factorFTS = 0
                if (type == 'increased_carrying_capacity') {
                    factorICC = ((effect.factor - 1) * 100).toFixed([0])
                    EffectsForAttacker.push(' Wagony ' + factorICC + '%')
                }
                if (type == 'base_wall_levels') {
                    minlevelBWL = effect.min_level
                    EffectsForAttacker.push(' Żelazny mur ' + minlevelBWL + '')
                }
                if (type == 'modify_attack_factor') {
                    bonusMAF = effect.bonus * 100
                    EffectsForAttacker.push(' Mistrzostwo broni ' + bonusMAF + '%')
                }
                if (type == 'revive_attacker_losses') {
                    ratioRAL = effect.ratio * 100
                    EffectsForAttacker.push(' Doktor ' + ratioRAL + '%')
                }
                if (type == 'extra_hospital_beds') {
                    bedsEHB = effect.beds
                    EffectsForAttacker.push(' Klinika ' + bedsEHB + '')
                }
                if (type == 'increase_spy_defense') {
                    increasedByISD = effect.increased_by
                    EffectsForAttacker.push(' Agent wewnętrzny ' + increasedByISD + '%')
                }
                if (type == 'increase_member_limit') {
                    increasedByIML = effect.increased_by
                    EffectsForAttacker.push(' Siła w liczbach ' + increasedByIML + '')
                }
                if (type == 'recruit_speed_boost') {
                    factorRSB = effect.factor
                    EffectsForAttacker.push(' Intensywny trening ' + factorRSB + '%')
                }
                if (type == 'farm_speed_increase') {
                    factorFSI = effect.factor
                    EffectsForAttacker.push(' Drogi najazdów ' + factorFSI + '%')
                }
                if (type == 'resource_deposit_job_amount') {
                    factorRDJA = effect.factor
                    EffectsForAttacker.push(' Wagony(depozyt) ' + factorRDJA + '%')
                }
                if (type == 'resource_deposit_job_duration') {
                    factorRDJD = effect.factor
                    EffectsForAttacker.push(' Drogi najazdów(depozyt) ' + factorRDJD + '%')
                }
                if (type == 'faster_tribe_support') {
                    factorFTS = effect.factor
                    EffectsForAttacker.push(' Zjednoczenie ' + factorFTS + '%')
                }
            })
            var finishedAttEffects = EffectsForAttacker.join()
            defEffects.forEach(function(effect) {
                var type = effect.type
                var factorICC = 0
                var minlevelBWL = 0
                var bonusMAF = 0
                var ratioRAL = 0
                var bedsEHB = 0
                var increasedByISD = 0
                var increasedByIML = 0
                var factorRSB = 0
                var factorFSI = 0
                var factorRDJA = 0
                var factorRDJD = 0
                var factorFTS = 0
                if (type == 'increased_carrying_capacity') {
                    factorICC = ((effect.factor - 1) * 100).toFixed([0])
                    EffectsForDefender.push(' Wagony ' + factorICC + '%')
                }
                if (type == 'base_wall_levels') {
                    minlevelBWL = effect.min_level
                    EffectsForDefender.push(' Żelazny mur ' + minlevelBWL + '')
                }
                if (type == 'modify_attack_factor') {
                    bonusMAF = effect.bonus * 100
                    EffectsForDefender.push(' Mistrzostwo broni ' + bonusMAF + '%')
                }
                if (type == 'revive_attacker_losses') {
                    ratioRAL = effect.ratio * 100
                    EffectsForDefender.push(' Doktor ' + ratioRAL + '%')
                }
                if (type == 'extra_hospital_beds') {
                    bedsEHB = effect.beds
                    EffectsForDefender.push(' Klinika ' + bedsEHB + '')
                }
                if (type == 'increase_spy_defense') {
                    increasedByISD = effect.increased_by
                    EffectsForDefender.push(' Agent wewnętrzny ' + increasedByISD + '%')
                }
                if (type == 'increase_member_limit') {
                    increasedByIML = effect.increased_by
                    EffectsForDefender.push(' Siła w liczbach ' + increasedByIML + '')
                }
                if (type == 'recruit_speed_boost') {
                    factorRSB = effect.factor
                    EffectsForDefender.push(' Intensywny trening ' + factorRSB + '%')
                }
                if (type == 'farm_speed_increase') {
                    factorFSI = effect.factor
                    EffectsForDefender.push(' Drogi najazdów ' + factorFSI + '%')
                }
                if (type == 'resource_deposit_job_amount') {
                    factorRDJA = effect.factor
                    EffectsForDefender.push(' Wagony(depozyt) ' + factorRDJA + '%')
                }
                if (type == 'resource_deposit_job_duration') {
                    factorRDJD = effect.factor
                    EffectsForDefender.push(' Drogi najazdów(depozyt) ' + factorRDJD + '%')
                }
                if (type == 'faster_tribe_support') {
                    factorFTS = effect.factor
                    EffectsForDefender.push(' Zjednoczenie ' + factorFTS + '%')
                }
            })
            var finishedDefEffects = EffectsForDefender.join()
            var attFaith = (details.attFaith * 100).toFixed([0])
            var attModifier = (Math.round(details.attModifier * 100)).toFixed([0])
            var morale = (Math.round(details.morale * 100)).toFixed([0])
            var luck = ((details.luck - 1) * 100).toFixed([0])
            var defCharacterId = details.defCharacterId
            var defCharacterName = details.defCharacterName
            var defVillageId = details.defVillageId
            var defVillageName = details.defVillageName
            var defFaith = (details.defFaith * 100).toFixed([0])
            var defModifier = (Math.round(details.defModifier * 100)).toFixed([0])
            var wallBonus = (details.wallBonus * 100).toFixed([0])
            var night = details.night
            var loyaltyAfter = details.loyaltyAfter
            var loyaltyBefore = details.loyaltyBefore
            var wallAfter = details.wallAfter
            var wallBefore = details.wallBefore
            var officers = details.officers
            var resultString = ''
            var origin = ''
            var gamer = ''
            var nightB = ''
            var loyaltyStart = ''
            var loyaltyFinish = ''
            var wallStart = ''
            var wallFinish = ''
            var officersF = []
            var officersD
            var dateNow = Date.now()
            var newToken = token.split('.').join('_')
            if (loyaltyBefore != null) {
                loyaltyStart = 'Lojalność przed atakiem: ' + Math.floor(loyaltyBefore) + ' '
            }
            if (loyaltyAfter != null) {
                loyaltyFinish = 'Lojalność po ataku: ' + Math.floor(loyaltyAfter) + ' '
            }
            if (wallBefore != null) {
                wallStart = 'Mury przed ataku: ' + wallBefore + ' '
            }
            if (wallAfter != null) {
                wallFinish = 'Mury po ataku: ' + wallAfter + ' '
            }
            if (officers == null) {
                officersF.push('Brak')
            } else {
                var bastard = details.officers.bastard
                var leader = details.officers.leader
                var medic = details.officers.medic
                var scout = details.officers.scout
                var loot = details.officers.loot_master
                var supporter = details.officers.supporter
                if (bastard == false && leader == false && medic == false && loot == false && scout == false && supporter == false) {
                    officersF.push('Brak')
                } else {
                    if (bastard == true) {
                        officersF.push(' Oszust ')
                    } else {
                        officersF.push('')
                    }
                    if (leader == true) {
                        officersF.push(' Wielki Mistrz ')
                    } else {
                        officersF.push('')
                    }
                    if (medic == true) {
                        officersF.push(' Medyk ')
                    } else {
                        officersF.push('')
                    }
                    if (scout == true) {
                        officersF.push(' Łowczy ')
                    } else {
                        officersF.push('')
                    }
                    if (loot == true) {
                        officersF.push(' Mistrz Łupu ')
                    } else {
                        officersF.push('')
                    }
                    if (supporter == true) {
                        officersF.push(' Taktyk ')
                    } else {
                        officersF.push('')
                    }
                }
            }
            if (night == false) {
                nightB = 'Nie'
            } else {
                nightB = 'Tak'
            }
            if (result == 2) {
                resultString = ' [color=d96a19]Częściowy sukces[/color]'
            } else if (result == 1) {
                resultString = ' [color=0a8028]Sukces[/color]'
            } else if (result == 3) {
                resultString = ' [color=e21f1f]Porażka[/color]'
            }
            if (attCharacterName == null && attCharacterId == null) {
                gamer = 'Brak danych'
            } else {
                gamer = '[player=' + attCharacterId + ']' + attCharacterName + '[/player]'
            }
            if (attVillageName == null && attVillageId == null) {
                origin = 'Brak danych'
            } else {
                origin = '[village=' + attVillageId + ']' + attVillageName + '[/village]'
            }
            time = Math.floor((dateNow / 1000) - timecreated)
            officersD = officersF.join()
            if (defCharacterName != null) {
                alertText.push('[size=XL][b]Raport z ataku: [report]' + newToken + '[/report][br]' + resultString + '[/b][/size][br][b][size=large] Czas wejścia ataku: ' + finalTime + '[/size][/b][br][size=medium][b] Wioska cel: [/b][village=' + defVillageId + ']' + defVillageName + '[/village][b] Gracz cel: [/b][player=' + defCharacterId + ']' + defCharacterName + '[/player][br]Modyfikator obrony: [b]' + defModifier + '[/b] Bonus za mury: [b]' + wallBonus + '[/b][br]Wiara: [b]' + defFaith + '[/b] Bonus nocny: [b]' + nightB + '[/b][br]Pozostałe bonusy: [b]' + finishedDefEffects + '[/b][br][b]Wioska pochodzenia: [/b]' + origin + '[b] Gracz atakujący: [/b]' + gamer + '[br]Modyfikator ataku: [b]' + attModifier + '[/b] Morale: [b]' + morale + '[/b][br]Wiara: [b]' + attFaith + '[/b] Szczęście: [b]' + luck + '[/b][br]Pozostałe bonusy: [b]' + finishedAttEffects + '[/b][br]Oficerowie: [b]' + officersD + '[/b][br]' + loyaltyStart + '' + loyaltyFinish + '[br]' + wallStart + '' + wallFinish + '[/size]')
                var message = alertText.join()
                if (time < 10800) {
                    socketService.emit(routeProvider.MESSAGE_REPLY, {
                        message_id: 8460,
                        message: message
                    })
                    alertText = []
                }
            }
        }
    }
    var reportSender = {}
    reportSender.init = function() {
        initialized = true
    }
    reportSender.start = function() {
        eventQueue.trigger(eventTypeProvider.REPORT_SENDER_STARTED)
        running = true
        setInterval(function() {
            running = true
            checkNewReports()
        }, 60000)
        checkNewReports()
    }
    reportSender.stop = function() {
        eventQueue.trigger(eventTypeProvider.REPORT_SENDER_STOPPED)
        running = false
    }
    reportSender.isRunning = function() {
        return running
    }
    reportSender.isInitialized = function() {
        return initialized
    }
    return reportSender
})
define('two/reportSender/events', [], function () {
    angular.extend(eventTypeProvider, {
        REPORT_SENDER_STARTED: 'report_sender_started',
        REPORT_SENDER_STOPPED: 'report_sender_stopped'
    })
})

define('two/reportSender/ui', [
    'two/ui',
    'two/reportSender',
    'two/utils',
    'queues/EventQueue'
], function (
    interfaceOverflow,
    reportSender,
    utils,
    eventQueue
) {
    let $button

    const init = function () {
        interfaceOverflow.addDivisor(71)
        $button = interfaceOverflow.addMenuButton('Goniec', 70, $filter('i18n')('description', $rootScope.loc.ale, 'report_sender'))

        $button.addEventListener('click', function () {
            if (reportSender.isRunning()) {
                reportSender.stop()
                utils.notif('success', $filter('i18n')('deactivated', $rootScope.loc.ale, 'report_sender'))
            } else {
                reportSender.start()
                utils.notif('success', $filter('i18n')('activated', $rootScope.loc.ale, 'report_sender'))
            }
        })

        eventQueue.register(eventTypeProvider.REPORT_SENDER_STARTED, function () {
            $button.classList.remove('btn-orange')
            $button.classList.add('btn-red')
        })

        eventQueue.register(eventTypeProvider.REPORT_SENDER_STOPPED, function () {
            $button.classList.remove('btn-red')
            $button.classList.add('btn-orange')
        })

        if (reportSender.isRunning()) {
            eventQueue.trigger(eventTypeProvider.REPORT_SENDER_STARTED)
        }

        return opener
    }

    return init
})
require([
    'two/ready',
    'two/reportSender',
    'two/reportSender/ui',
    'Lockr',
    'queues/EventQueue',
    'two/reportSender/events',
], function(
    ready,
    reportSender,
    reportSenderInterface,
    Lockr,
    eventQueue
) {
    const STORAGE_KEYS = {
        ACTIVE: 'report_sender_active'
    }
	
    if (reportSender.isInitialized()) {
        return false
    }
    ready(function() {
        reportSender.init()
        reportSenderInterface()

        ready(function() {
            if (Lockr.get(STORAGE_KEYS.ACTIVE, false, true)) {
                reportSender.start()
            }

            eventQueue.register(eventTypeProvider.REPORT_SENDER_STARTED, function() {
                Lockr.set(STORAGE_KEYS.ACTIVE, true)
            })

            eventQueue.register(eventTypeProvider.REPORT_SENDER_STOPPED, function() {
                Lockr.set(STORAGE_KEYS.ACTIVE, false)
            })
        }, ['initial_village'])
    })
})
define('two/spyRecruiter', [
    'two/utils',
    'queues/EventQueue'
], function(
    utils,
    eventQueue
) {
    let initialized = false
    let running = false
    var recruitSpy = function recruitSpy() {
        if (running == true) {
            var player = modelDataService.getSelectedCharacter()
            var villages = player.getVillageList()
            villages.forEach(function(village) {
                var data = village.data
                var buildings = data.buildings
                var tavern = buildings.tavern
                var level = tavern.level
                var scoutingInfo = village.scoutingInfo
                var spies = scoutingInfo.spies
                var resources = village.getResources()
                var computed = resources.getComputed()
                var wood = computed.wood
                var clay = computed.clay
                var iron = computed.iron
                var villageWood = wood.currentStock
                var villageClay = clay.currentStock
                var villageIron = iron.currentStock
                var woodCost = [500, 1000, 2200, 7000, 12000]
                var clayCost = [500, 800, 2000, 6500, 10000]
                var ironCost = [500, 1200, 2400, 8000, 18000]
                if (level < 1) {
                    console.log('Brak tawerny w wiosce:' + village.getName())
                } else if (level >= 1 && level < 3) {
                    spies.forEach(function(spy) {
                        if (spy.id == 1 && spy.active != true && spy.recruitingInProgress != true && (villageWood >= woodCost[1] && villageClay >= clayCost[1] && villageIron >= ironCost[1])) {
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 1
                            })
                        }
                    })
                    console.log('Dodano do rekrutacji szpiega (slot 1) w wiosce:' + village.getName())
                } else if (level >= 3 && level < 6) {
                    spies.forEach(function(spy) {
                        if (spy.id == 1 && spy.active != true && spy.recruitingInProgress != true && (villageWood >= woodCost[1] && villageClay >= clayCost[1] && villageIron >= ironCost[1])) {
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 1
                            })
                            console.log('Dodano do rekrutacji szpiega (slot 1) w wiosce:' + village.getName())
                        } else if (spy.id == 2 && spy.active != true && spy.recruitingInProgress != true && (villageWood >= woodCost[2] && villageClay >= clayCost[2] && villageIron >= ironCost[2])) {
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 2
                            })
                            console.log('Dodano do rekrutacji szpiega (slot 2) w wiosce:' + village.getName())
                        }
                    })
                } else if (level >= 6 && level < 9) {
                    spies.forEach(function(spy) {
                        if ((spy.id == 3 && spy.recruitingInProgress == true) && (spy.id == 1 && spy.active != true)) {
                            socketService.emit(routeProvider.SCOUTING_CANCEL_RECRUIT, {
                                village_id: village.getId(),
                                slot: 3
                            })
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 1
                            })
                            console.log('Anulowano rekrutację szpiega (slot 3) w wiosce:' + village.getName())
                            console.log('Dodano do rekrutacji szpiega (slot 1) w wiosce:' + village.getName())
                        } else if (spy.id == 1 && spy.active != true && spy.recruitingInProgress != true && (villageWood >= woodCost[1] && villageClay >= clayCost[1] && villageIron >= ironCost[1])) {
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 1
                            })
                            console.log('Dodano do rekrutacji szpiega (slot 1) w wiosce:' + village.getName())
                        } else if (spy.id == 2 && spy.active != true && spy.recruitingInProgress != true && (villageWood >= woodCost[2] && villageClay >= clayCost[2] && villageIron >= ironCost[2])) {
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 2
                            })
                            console.log('Dodano do rekrutacji szpiega (slot 2) w wiosce:' + village.getName())
                        } else if (spy.id == 3 && spy.active != true && spy.recruitingInProgress != true && (villageWood >= woodCost[3] && villageClay >= clayCost[3] && villageIron >= ironCost[3])) {
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 3
                            })
                            console.log('Dodano do rekrutacji szpiega (slot 3) w wiosce:' + village.getName())
                        }
                    })
                } else if (level >= 9 && level < 12) {
                    spies.forEach(function(spy) {
                        if ((spy.id == 4 && spy.recruitingInProgress == true) && (spy.id == 1 && spy.active != true)) {
                            socketService.emit(routeProvider.SCOUTING_CANCEL_RECRUIT, {
                                village_id: village.getId(),
                                slot: 4
                            })
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 1
                            })
                            console.log('Anulowano rekrutację szpiega (slot 4) w wiosce:' + village.getName())
                            console.log('Dodano do rekrutacji szpiega (slot 1) w wiosce:' + village.getName())
                        } else if ((spy.id == 4 && spy.recruitingInProgress == true) && (spy.id == 2 && spy.active != true)) {
                            socketService.emit(routeProvider.SCOUTING_CANCEL_RECRUIT, {
                                village_id: village.getId(),
                                slot: 4
                            })
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 2
                            })
                            console.log('Anulowano rekrutację szpiega (slot 4) w wiosce:' + village.getName())
                            console.log('Dodano do rekrutacji szpiega (slot 2) w wiosce:' + village.getName())
                        } else if ((spy.id == 3 && spy.recruitingInProgress == true) && (spy.id == 1 && spy.active != true)) {
                            socketService.emit(routeProvider.SCOUTING_CANCEL_RECRUIT, {
                                village_id: village.getId(),
                                slot: 3
                            })
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 1
                            })
                            console.log('Anulowano rekrutację szpiega (slot 3) w wiosce:' + village.getName())
                            console.log('Dodano do rekrutacji szpiega (slot 1) w wiosce:' + village.getName())
                        } else if ((spy.id == 3 && spy.recruitingInProgress == true) && (spy.id == 2 && spy.active != true)) {
                            socketService.emit(routeProvider.SCOUTING_CANCEL_RECRUIT, {
                                village_id: village.getId(),
                                slot: 3
                            })
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 2
                            })
                            console.log('Anulowano rekrutację szpiega (slot 3) w wiosce:' + village.getName())
                            console.log('Dodano do rekrutacji szpiega (slot 2) w wiosce:' + village.getName())
                        } else if (spy.id == 1 && spy.active != true && spy.recruitingInProgress != true && (villageWood >= woodCost[1] && villageClay >= clayCost[1] && villageIron >= ironCost[1])) {
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 1
                            })
                            console.log('Dodano do rekrutacji szpiega (slot 1) w wiosce:' + village.getName())
                        } else if (spy.id == 2 && spy.active != true && spy.recruitingInProgress != true && (villageWood >= woodCost[2] && villageClay >= clayCost[2] && villageIron >= ironCost[2])) {
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 2
                            })
                            console.log('Dodano do rekrutacji szpiega (slot 2) w wiosce:' + village.getName())
                        } else if (spy.id == 3 && spy.active != true && spy.recruitingInProgress != true && (villageWood >= woodCost[3] && villageClay >= clayCost[3] && villageIron >= ironCost[3])) {
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 3
                            })
                            console.log('Dodano do rekrutacji szpiega (slot 3) w wiosce:' + village.getName())
                        } else if (spy.id == 4 && spy.active != true && spy.recruitingInProgress != true && (villageWood >= woodCost[4] && villageClay >= clayCost[4] && villageIron >= ironCost[4])) {
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 4
                            })
                            console.log('Dodano do rekrutacji szpiega (slot 4) w wiosce:' + village.getName())
                        }
                    })
                } else if (level >= 12) {
                    spies.forEach(function(spy) {
                        if ((spy.id == 5 && spy.recruitingInProgress == true) && (spy.id == 1 && spy.active != true)) {
                            socketService.emit(routeProvider.SCOUTING_CANCEL_RECRUIT, {
                                village_id: village.getId(),
                                slot: 5
                            })
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 1
                            })
                            console.log('Anulowano rekrutację szpiega (slot 5) w wiosce:' + village.getName())
                            console.log('Dodano do rekrutacji szpiega (slot 1) w wiosce:' + village.getName())
                        } else if ((spy.id == 5 && spy.recruitingInProgress == true) && (spy.id == 2 && spy.active != true)) {
                            socketService.emit(routeProvider.SCOUTING_CANCEL_RECRUIT, {
                                village_id: village.getId(),
                                slot: 5
                            })
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 2
                            })
                            console.log('Anulowano rekrutację szpiega (slot 5) w wiosce:' + village.getName())
                            console.log('Dodano do rekrutacji szpiega (slot 2) w wiosce:' + village.getName())
                        } else if ((spy.id == 4 && spy.recruitingInProgress == true) && (spy.id == 1 && spy.active != true)) {
                            socketService.emit(routeProvider.SCOUTING_CANCEL_RECRUIT, {
                                village_id: village.getId(),
                                slot: 4
                            })
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 1
                            })
                            console.log('Anulowano rekrutację szpiega (slot 4) w wiosce:' + village.getName())
                            console.log('Dodano do rekrutacji szpiega (slot 1) w wiosce:' + village.getName())
                        } else if ((spy.id == 3 && spy.recruitingInProgress == true) && (spy.id == 1 && spy.active != true)) {
                            socketService.emit(routeProvider.SCOUTING_CANCEL_RECRUIT, {
                                village_id: village.getId(),
                                slot: 3
                            })
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 1
                            })
                            console.log('Anulowano rekrutację szpiega (slot 3) w wiosce:' + village.getName())
                            console.log('Dodano do rekrutacji szpiega (slot 1) w wiosce:' + village.getName())
                        } else if ((spy.id == 4 && spy.recruitingInProgress == true) && (spy.id == 2 && spy.active != true)) {
                            socketService.emit(routeProvider.SCOUTING_CANCEL_RECRUIT, {
                                village_id: village.getId(),
                                slot: 4
                            })
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 2
                            })
                            console.log('Anulowano rekrutację szpiega (slot 4) w wiosce:' + village.getName())
                            console.log('Dodano do rekrutacji szpiega (slot 2) w wiosce:' + village.getName())
                        } else if ((spy.id == 5 && spy.recruitingInProgress == true) && (spy.id == 3 && spy.active != true)) {
                            socketService.emit(routeProvider.SCOUTING_CANCEL_RECRUIT, {
                                village_id: village.getId(),
                                slot: 5
                            })
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 3
                            })
                            console.log('Anulowano rekrutację szpiega (slot 5) w wiosce:' + village.getName())
                            console.log('Dodano do rekrutacji szpiega (slot 3) w wiosce:' + village.getName())
                        } else if ((spy.id == 3 && spy.recruitingInProgress == true) && (spy.id == 2 && spy.active != true)) {
                            socketService.emit(routeProvider.SCOUTING_CANCEL_RECRUIT, {
                                village_id: village.getId(),
                                slot: 3
                            })
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 2
                            })
                            console.log('Anulowano rekrutację szpiega (slot 3) w wiosce:' + village.getName())
                            console.log('Dodano do rekrutacji szpiega (slot 2) w wiosce:' + village.getName())
                        } else if ((spy.id == 4 && spy.recruitingInProgress == true) && (spy.id == 3 && spy.active != true)) {
                            socketService.emit(routeProvider.SCOUTING_CANCEL_RECRUIT, {
                                village_id: village.getId(),
                                slot: 4
                            })
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 3
                            })
                            console.log('Anulowano rekrutację szpiega (slot 4) w wiosce:' + village.getName())
                            console.log('Dodano do rekrutacji szpiega (slot 3) w wiosce:' + village.getName())
                        } else if ((spy.id == 5 && spy.recruitingInProgress == true) && (spy.id == 4 && spy.active != true)) {
                            socketService.emit(routeProvider.SCOUTING_CANCEL_RECRUIT, {
                                village_id: village.getId(),
                                slot: 5
                            })
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 4
                            })
                            console.log('Anulowano rekrutację szpiega (slot 5) w wiosce:' + village.getName())
                            console.log('Dodano do rekrutacji szpiega (slot 4) w wiosce:' + village.getName())
                        } else if (spy.id == 1 && spy.active != true && spy.recruitingInProgress != true && (villageWood >= woodCost[1] && villageClay >= clayCost[1] && villageIron >= ironCost[1])) {
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 1
                            })
                            console.log('Dodano do rekrutacji szpiega (slot 1) w wiosce:' + village.getName())
                        } else if (spy.id == 2 && spy.active != true && spy.recruitingInProgress != true && (villageWood >= woodCost[2] && villageClay >= clayCost[2] && villageIron >= ironCost[2])) {
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 2
                            })
                            console.log('Dodano do rekrutacji szpiega (slot 2) w wiosce:' + village.getName())
                        } else if (spy.id == 3 && spy.active != true && spy.recruitingInProgress != true && (villageWood >= woodCost[3] && villageClay >= clayCost[3] && villageIron >= ironCost[3])) {
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 3
                            })
                            console.log('Dodano do rekrutacji szpiega (slot 3) w wiosce:' + village.getName())
                        } else if (spy.id == 4 && spy.active != true && spy.recruitingInProgress != true && (villageWood >= woodCost[4] && villageClay >= clayCost[4] && villageIron >= ironCost[4])) {
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 4
                            })
                            console.log('Dodano do rekrutacji szpiega (slot 4) w wiosce:' + village.getName())
                        } else if (spy.id == 5 && spy.active != true && spy.recruitingInProgress != true && (villageWood >= woodCost[5] && villageClay >= clayCost[5] && villageIron >= ironCost[5])) {
                            socketService.emit(routeProvider.SCOUTING_RECRUIT, {
                                village_id: village.getId(),
                                slot: 5
                            })
                            console.log('Dodano do rekrutacji szpiega (slot 5) w wiosce:' + village.getName())
                        }
                    })
                }
            })
            utils.notif('success', $filter('i18n')('revived', $rootScope.loc.ale, 'spy_recruiter'))
        }
    }
    let spyRecruiter = {}
    spyRecruiter.init = function() {
        initialized = true
    }
    spyRecruiter.start = function() {
        eventQueue.trigger(eventTypeProvider.SPY_RECRUITER_STARTED)
        running = true
        recruitSpy()
        setInterval(function() {
            recruitSpy()
        }, 120000)
    }
    spyRecruiter.stop = function() {
        eventQueue.trigger(eventTypeProvider.SPY_RECRUITER_STOPPED)
        running = false
    }
    spyRecruiter.isRunning = function() {
        return running
    }
    spyRecruiter.isInitialized = function() {
        return initialized
    }
    return spyRecruiter
})
define('two/spyRecruiter/events', [], function () {
    angular.extend(eventTypeProvider, {
        SPY_RECRUITER_STARTED: 'spy_recruiter_started',
        SPY_RECRUITER_STOPPED: 'spy_recruiter_stopped'
    })
})

define('two/spyRecruiter/ui', [
    'two/ui',
    'two/spyRecruiter',
    'two/utils',
    'queues/EventQueue'
], function (
    interfaceOverflow,
    spyRecruiter,
    utils,
    eventQueue
) {
    let $button

    const init = function () {
        interfaceOverflow.addDivisor3(21)
        $button = interfaceOverflow.addMenuButton3('Szpieg', 20, $filter('i18n')('description', $rootScope.loc.ale, 'spy_recruiter'))
        $button.addEventListener('click', function () {
            if (spyRecruiter.isRunning()) {
                spyRecruiter.stop()
                utils.notif('success', $filter('i18n')('deactivated', $rootScope.loc.ale, 'spy_recruiter'))
            } else {
                spyRecruiter.start()
                utils.notif('success', $filter('i18n')('activated', $rootScope.loc.ale, 'spy_recruiter'))
            }
        })

        eventQueue.register(eventTypeProvider.SPY_RECRUITER_STARTED, function () {
            $button.classList.remove('btn-orange')
            $button.classList.add('btn-red')
        })

        eventQueue.register(eventTypeProvider.SPY_RECRUITER_STOPPED, function () {
            $button.classList.remove('btn-red')
            $button.classList.add('btn-orange')
        })

        if (spyRecruiter.isRunning()) {
            eventQueue.trigger(eventTypeProvider.SPY_RECRUITER_STARTED)
        }

        return opener
    }

    return init
})

require([
    'two/ready',
    'two/spyRecruiter',
    'two/spyRecruiter/ui',
    'Lockr',
    'queues/EventQueue',
    'two/spyRecruiter/events'
], function(
    ready,
    spyRecruiter,
    spyRecruiterInterface,
    Lockr,
    eventQueue
) {
    const STORAGE_KEYS = {
        ACTIVE: 'spy_recruiter_active'
    }
	
    if (spyRecruiter.isInitialized()) {
        return false
    }
    ready(function() {
        spyRecruiter.init()
        spyRecruiterInterface()

        ready(function() {
            if (Lockr.get(STORAGE_KEYS.ACTIVE, false, true)) {
                spyRecruiter.start()
            }

            eventQueue.register(eventTypeProvider.SPY_RECRUITER_STARTED, function() {
                Lockr.set(STORAGE_KEYS.ACTIVE, true)
            })

            eventQueue.register(eventTypeProvider.SPY_RECRUITER_STOPPED, function() {
                Lockr.set(STORAGE_KEYS.ACTIVE, false)
            })
        }, ['initial_village'])
    })
})
})(this)
